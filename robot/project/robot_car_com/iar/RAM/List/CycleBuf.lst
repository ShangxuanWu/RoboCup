###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     25/Sep/2013  22:37:20 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\中国机器人大赛\robot_project\project\LPLD_Template\ap #
#                    p\CycleBuf.c                                             #
#    Command line =  D:\中国机器人大赛\robot_project\project\LPLD_Template\ap #
#                    p\CycleBuf.c -D IAR -D LPLD_K60 -lCN                     #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\RAM\List\ -lB D:\中国机器人大赛\robot_project\project\ #
#                    LPLD_Template\iar\RAM\List\ -o                           #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\RAM\Obj\ --no_cse --no_unroll --no_inline              #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "D:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I D:\中国机器人大赛\robot_project\project\LPLD_T #
#                    emplate\iar\..\app\ -I D:\中国机器人大赛\robot_project\p #
#                    roject\LPLD_Template\iar\..\..\..\lib\common\ -I         #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\cpu\ -I D:\中国机器人大赛\robot_project\p #
#                    roject\LPLD_Template\iar\..\..\..\lib\cpu\headers\ -I    #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\drivers\adc16\ -I                         #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\drivers\enet\ -I                          #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\drivers\lptmr\ -I                         #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\drivers\mcg\ -I                           #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\drivers\pmc\ -I                           #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\drivers\rtc\ -I                           #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\drivers\uart\ -I                          #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\drivers\wdog\ -I                          #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\platforms\ -I                             #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\LPLD\ -I D:\中国机器人大赛\robot_project\ #
#                    project\LPLD_Template\iar\..\..\..\lib\LPLD\FatFs\ -I    #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\LPLD\USB\ -I                              #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\iar_config_files\ -Ol                     #
#    List file    =  D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\RAM\List\CycleBuf.lst                                  #
#    Object file  =  D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\RAM\Obj\CycleBuf.o                                     #
#                                                                             #
#                                                                             #
###############################################################################

D:\中国机器人大赛\robot_project\project\LPLD_Template\app\CycleBuf.c
      1          #include "CycleBuf.h"
      2          

   \                                 In section .bss, align 4
      3          static int i;
   \                     i:
   \   00000000                      DS8 4
      4          /************************  结构体初始化  ****************************/

   \                                 In section .text, align 2, keep-with-next
      5          void Cyc_Init(CycleBuf* inCB)
      6          {
      7          	inCB->put = 0;
   \                     Cyc_Init:
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0xF880 0x1101      STRB     R1,[R0, #+257]
      8          	inCB->get = 0;
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0xF880 0x1100      STRB     R1,[R0, #+256]
      9                  
     10                  for(i=0;i<CYC_BUF_MAX;i++)
   \   0000000C   0x....             LDR.N    R1,??DataTable0
   \   0000000E   0x2200             MOVS     R2,#+0
   \   00000010   0x600A             STR      R2,[R1, #+0]
   \   00000012   0xE008             B.N      ??Cyc_Init_0
     11                  {
     12                    inCB->buf[i] = 0;
   \                     ??Cyc_Init_1:
   \   00000014   0x....             LDR.N    R1,??DataTable0
   \   00000016   0x6809             LDR      R1,[R1, #+0]
   \   00000018   0x2200             MOVS     R2,#+0
   \   0000001A   0x540A             STRB     R2,[R1, R0]
     13                  }
   \   0000001C   0x....             LDR.N    R1,??DataTable0
   \   0000001E   0x6809             LDR      R1,[R1, #+0]
   \   00000020   0x1C49             ADDS     R1,R1,#+1
   \   00000022   0x....             LDR.N    R2,??DataTable0
   \   00000024   0x6011             STR      R1,[R2, #+0]
   \                     ??Cyc_Init_0:
   \   00000026   0x....             LDR.N    R1,??DataTable0
   \   00000028   0x6809             LDR      R1,[R1, #+0]
   \   0000002A   0x29FF             CMP      R1,#+255
   \   0000002C   0xDDF2             BLE.N    ??Cyc_Init_1
     14          }
   \   0000002E   0x4770             BX       LR               ;; return
     15          
     16          /************************  将数据放进缓冲区  ****************************/

   \                                 In section .text, align 2, keep-with-next
     17          void Cyc_PutIn(CycleBuf* inCB,unsigned char inData)
     18          {
     19          	inCB->buf[inCB->put] = inData;
   \                     Cyc_PutIn:
   \   00000000   0xF890 0x2101      LDRB     R2,[R0, #+257]
   \   00000004   0x5411             STRB     R1,[R2, R0]
     20          	inCB->put ++;
   \   00000006   0xF890 0x1101      LDRB     R1,[R0, #+257]
   \   0000000A   0x1C49             ADDS     R1,R1,#+1
   \   0000000C   0xF880 0x1101      STRB     R1,[R0, #+257]
     21          
     22          	if(inCB->put >= CYC_BUF_MAX)
   \   00000010   0xF890 0x1101      LDRB     R1,[R0, #+257]
   \   00000014   0xF44F 0x7280      MOV      R2,#+256
   \   00000018   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000001A   0x4291             CMP      R1,R2
   \   0000001C   0xD302             BCC.N    ??Cyc_PutIn_0
     23          	{
     24          	  inCB->put = 0;
   \   0000001E   0x2100             MOVS     R1,#+0
   \   00000020   0xF880 0x1101      STRB     R1,[R0, #+257]
     25          	}
     26          }
   \                     ??Cyc_PutIn_0:
   \   00000024   0x4770             BX       LR               ;; return
     27          
     28          /************************  将数据放进缓冲区  ****************************/

   \                                 In section .text, align 2, keep-with-next
     29          unsigned char Cyc_Get(CycleBuf* inCB,unsigned char* inData)
     30          {
   \                     Cyc_Get:
   \   00000000   0xB410             PUSH     {R4}
     31            unsigned char result = 0;
   \   00000002   0x2200             MOVS     R2,#+0
     32            if(inCB->put != inCB->get)
   \   00000004   0xF890 0x3101      LDRB     R3,[R0, #+257]
   \   00000008   0xF890 0x4100      LDRB     R4,[R0, #+256]
   \   0000000C   0x42A3             CMP      R3,R4
   \   0000000E   0xD014             BEQ.N    ??Cyc_Get_0
     33            {
     34              *inData = inCB->buf[inCB->get];
   \   00000010   0xF890 0x2100      LDRB     R2,[R0, #+256]
   \   00000014   0x5C12             LDRB     R2,[R2, R0]
   \   00000016   0x700A             STRB     R2,[R1, #+0]
     35              inCB->get ++;
   \   00000018   0xF890 0x1100      LDRB     R1,[R0, #+256]
   \   0000001C   0x1C49             ADDS     R1,R1,#+1
   \   0000001E   0xF880 0x1100      STRB     R1,[R0, #+256]
     36              if(inCB->get >=CYC_BUF_MAX)
   \   00000022   0xF890 0x1100      LDRB     R1,[R0, #+256]
   \   00000026   0xF44F 0x7280      MOV      R2,#+256
   \   0000002A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000002C   0x4291             CMP      R1,R2
   \   0000002E   0xD302             BCC.N    ??Cyc_Get_1
     37              {
     38                inCB->get = 0;
   \   00000030   0x2100             MOVS     R1,#+0
   \   00000032   0xF880 0x1100      STRB     R1,[R0, #+256]
     39              }
     40              result = 1;
   \                     ??Cyc_Get_1:
   \   00000036   0x2201             MOVS     R2,#+1
   \   00000038   0xE000             B.N      ??Cyc_Get_2
     41            }
     42            else
     43            {
     44              result = 0;
   \                     ??Cyc_Get_0:
   \   0000003A   0x2200             MOVS     R2,#+0
     45            }
     46          
     47            return result;
   \                     ??Cyc_Get_2:
   \   0000003C   0x0010             MOVS     R0,R2
   \   0000003E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000040   0xBC10             POP      {R4}
   \   00000042   0x4770             BX       LR               ;; return
     48          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x........         DC32     i
     49          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        4  Cyc_Get
        0  Cyc_Init
        0  Cyc_PutIn


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
      68  Cyc_Get
      48  Cyc_Init
      38  Cyc_PutIn
       4  i

 
   4 bytes in section .bss
 158 bytes in section .text
 
 158 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: 2
