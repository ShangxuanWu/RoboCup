###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     25/Sep/2013  21:07:10 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\中国机器人大赛\robot_project\lib\LPLD\HAL_PDB.c       #
#    Command line =  D:\中国机器人大赛\robot_project\lib\LPLD\HAL_PDB.c -D    #
#                    IAR -D LPLD_K60 -lCN D:\中国机器人大赛\robot_project\pro #
#                    ject\LPLD_Template\iar\RAM\List\ -lB                     #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\RAM\List\ -o D:\中国机器人大赛\robot_project\project\L #
#                    PLD_Template\iar\RAM\Obj\ --no_cse --no_unroll           #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "D:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I D:\中国机器人大赛\robot_project\project\LPLD_T #
#                    emplate\iar\..\app\ -I D:\中国机器人大赛\robot_project\p #
#                    roject\LPLD_Template\iar\..\..\..\lib\common\ -I         #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\cpu\ -I D:\中国机器人大赛\robot_project\p #
#                    roject\LPLD_Template\iar\..\..\..\lib\cpu\headers\ -I    #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\drivers\adc16\ -I                         #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\drivers\enet\ -I                          #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\drivers\lptmr\ -I                         #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\drivers\mcg\ -I                           #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\drivers\pmc\ -I                           #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\drivers\rtc\ -I                           #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\drivers\uart\ -I                          #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\drivers\wdog\ -I                          #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\platforms\ -I                             #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\LPLD\ -I D:\中国机器人大赛\robot_project\ #
#                    project\LPLD_Template\iar\..\..\..\lib\LPLD\FatFs\ -I    #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\LPLD\USB\ -I                              #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\iar_config_files\ -Ol                     #
#    List file    =  D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\RAM\List\HAL_PDB.lst                                   #
#    Object file  =  D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\RAM\Obj\HAL_PDB.o                                      #
#                                                                             #
#                                                                             #
###############################################################################

D:\中国机器人大赛\robot_project\lib\LPLD\HAL_PDB.c
      1          /*
      2           * --------------"拉普兰德K60底层库"-----------------
      3           *
      4           * 测试硬件平台:LPLD_K60 Card
      5           * 版权所有:北京拉普兰德电子技术有限公司
      6           * 网络销售:http://laplenden.taobao.com
      7           * 公司门户:http://www.lpld.cn
      8           *
      9           * 文件名: HAL_PDB.c
     10           * 用途: PDB底层模块相关函数
     11           * 最后修改日期: 20120321
     12           *
     13           * 开发者使用协议:
     14           *  本代码面向所有使用者开放源代码，开发者可以随意修改源代码。但本段及以上注释应
     15           *  予以保留，不得更改或删除原版权所有者姓名。二次开发者可以加注二次版权所有者，
     16           *  但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     17          */
     18          #include "HAL_PDB.h"
     19          #include "common.h"
     20          
     21          /*
     22           *******需用到PDB中断，请在isr.h中粘贴一下代码:*********
     23          #undef  VECTOR_088
     24          #define VECTOR_088 LPLD_PDB_Isr
     25          //以下函数在LPLD_Kinetis底层包，不必修改
     26          extern void LPLD_PDB_Isr(void);
     27           ***********************代码结束*************************
     28          */
     29          
     30          

   \                                 In section .bss, align 4
     31          PDB_ISR_CALLBACK PDB_ISR[1];
   \                     PDB_ISR:
   \   00000000                      DS8 4
     32          
     33          
     34          /*
     35           * LPLD_PDB_Init
     36           * 用于初始化PDB
     37           * 设置PDB的prescale预分频值
     38           * 设置PDB的trgsel输入触发源
     39           * 设置PDB的ldmod加载模式
     40           * 设置PDB的cont持续工作模式和one-shot模式
     41           * 设置PDB的dma_en
     42           * 
     43           * 参数:
     44           *    prescale--PDB 分频系数
     45           *      PDB的计数器频率 等于 外设总线频率除以 prescale和mult的乘积\
     46           *      |__PDB_PRESC_1      -设置prescale = MULT * 1
     47           *      |__PDB_PRESC_2      -设置prescale = MULT * 2
     48           *      |__PDB_PRESC_4      -设置prescale = MULT * 4
     49           *      |__PDB_PRESC_8      -设置prescale = MULT * 8
     50           *      |__PDB_PRESC_16     -设置prescale = MULT * 16
     51           *      |__PDB_PRESC_32     -设置prescale = MULT * 32
     52           *      |__PDB_PRESC_64     -设置prescale = MULT * 64
     53           *      |__PDB_PRESC_128    -设置prescale = MULT * 128
     54           *
     55           *    mult--PDB 分频因子
     56           *      PDB的计数器频率 等于 外设总线频率除以 prescale和mult的乘积
     57           *      |__PDB_MULT_1       -设置MULT = 1
     58           *      |__PDB_MULT_10      -设置MULT = 10
     59           *      |__PDB_MULT_20      -设置MULT = 20
     60           *      |__PDB_MULT_40      -设置MULT = 40
     61           *
     62           *    mod--PDB 模计数器，
     63           *      当PDB计数器等于MOD的值，PDB计数器清零
     64           *
     65           *    trgsel-- PDB 触发源选择
     66           *      |__TRIGER_IN0        -输入触发源0
     67           *      |__...                  
     68           *      |__TRIGER_IN14       -输入触发源14
     69           *      |__SOFTWARE_TRIGER   -软件触发
     70           * 
     71           *    ldmod--设置PDB ADC通道x的预触发通道
     72           *      |__LDMOD0   -当LDOK=1后 MOD, IDLY, CHnDLYm, INTx, 和 POyDLY 寄存器立即加载
     73           *      |__LDMOD1   -当LDOK=1和PDB计数器到达MOD后 MOD, IDLY, CHnDLYm, INTx, 和 POyDLY 寄存器立即加载
     74           *      |__LDMOD2   -当LDOK=1和一个输入事件设置为1后 MOD, IDLY, CHnDLYm, INTx, 和 POyDLY 寄存器立即加载
     75           *      |__LDMOD3   -当LDOK=1后和一个输入事件设置为1或PDB计数器到达MOD后 MOD, IDLY, CHnDLYm, INTx, 和 POyDLY 寄存器立即加载
     76           *
     77           *    cont -- 设置PDB 工作模式
     78           *      |__PDB_ONESHOT   -单次模式
     79           *      |__PDB_CONTINUE  -连续模式
     80           * 
     81           *    dma_en -- 使能DMA功能
     82           *      |__PDB_DMA_OFF   -禁止DMA模式
     83           *      |__PDB_DMA_ON    -使能DMA模式
     84           *
     85           *    返回值:
     86           *       0 错误
     87           *       1 设置成功
     88           */

   \                                 In section .text, align 2, keep-with-next
     89          uint8 LPLD_PDB_Init(uint8 prescale,uint8 mult,uint16 mod ,uint8 trgsel,uint8 ldmod,uint8 cont,uint8 dma_en)
     90          {
   \                     LPLD_PDB_Init:
   \   00000000   0xB4F0             PUSH     {R4-R7}
   \   00000002   0x9C04             LDR      R4,[SP, #+16]
   \   00000004   0x9D05             LDR      R5,[SP, #+20]
   \   00000006   0x9E06             LDR      R6,[SP, #+24]
     91            //使能PDB时钟
     92            SIM_SCGC6 |= SIM_SCGC6_PDB_MASK ;
   \   00000008   0x....             LDR.N    R7,??DataTable6  ;; 0x4004803c
   \   0000000A   0x683F             LDR      R7,[R7, #+0]
   \   0000000C   0xF457 0x0780      ORRS     R7,R7,#0x400000
   \   00000010   0x.... 0x....      LDR.W    R12,??DataTable6  ;; 0x4004803c
   \   00000014   0xF8CC 0x7000      STR      R7,[R12, #+0]
     93            
     94            PDB0_SC = 0x00;
   \   00000018   0x....             LDR.N    R7,??DataTable6_1  ;; 0x40036000
   \   0000001A   0xF05F 0x0C00      MOVS     R12,#+0
   \   0000001E   0xF8C7 0xC000      STR      R12,[R7, #+0]
     95            //设置分频因子
     96            //f_PDB = f_perpherial_bus / (mult * prescale)
     97            //其中f_perpherial_bus在PLL锁相环中设置
     98            if( mult > 3)
   \   00000022   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000024   0x2904             CMP      R1,#+4
   \   00000026   0xD301             BCC.N    ??LPLD_PDB_Init_0
     99              return 0;
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0xE056             B.N      ??LPLD_PDB_Init_1
    100            else
    101              PDB0_SC |=PDB_SC_MULT(mult);
   \                     ??LPLD_PDB_Init_0:
   \   0000002C   0x....             LDR.N    R7,??DataTable6_1  ;; 0x40036000
   \   0000002E   0x683F             LDR      R7,[R7, #+0]
   \   00000030   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000032   0x0089             LSLS     R1,R1,#+2
   \   00000034   0xF011 0x010C      ANDS     R1,R1,#0xC
   \   00000038   0x4339             ORRS     R1,R1,R7
   \   0000003A   0x....             LDR.N    R7,??DataTable6_1  ;; 0x40036000
   \   0000003C   0x6039             STR      R1,[R7, #+0]
    102            
    103            if(prescale >7)
   \   0000003E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000040   0x2808             CMP      R0,#+8
   \   00000042   0xD301             BCC.N    ??LPLD_PDB_Init_2
    104              return 0;
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0xE048             B.N      ??LPLD_PDB_Init_1
    105            else
    106              PDB0_SC |=PDB_SC_PRESCALER(prescale);
   \                     ??LPLD_PDB_Init_2:
   \   00000048   0x....             LDR.N    R1,??DataTable6_1  ;; 0x40036000
   \   0000004A   0x6809             LDR      R1,[R1, #+0]
   \   0000004C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004E   0x0300             LSLS     R0,R0,#+12
   \   00000050   0xF410 0x40E0      ANDS     R0,R0,#0x7000
   \   00000054   0x4308             ORRS     R0,R0,R1
   \   00000056   0x....             LDR.N    R1,??DataTable6_1  ;; 0x40036000
   \   00000058   0x6008             STR      R0,[R1, #+0]
    107            
    108            if(ldmod > 3)
   \   0000005A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000005C   0x2C04             CMP      R4,#+4
   \   0000005E   0xD301             BCC.N    ??LPLD_PDB_Init_3
    109              return 0;
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0xE03A             B.N      ??LPLD_PDB_Init_1
    110            else
    111              //设置加载模式
    112              PDB0_SC |= PDB_SC_LDMOD(ldmod); 
   \                     ??LPLD_PDB_Init_3:
   \   00000064   0x....             LDR.N    R0,??DataTable6_1  ;; 0x40036000
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000006A   0x04A1             LSLS     R1,R4,#+18
   \   0000006C   0xF411 0x2140      ANDS     R1,R1,#0xC0000
   \   00000070   0x4308             ORRS     R0,R1,R0
   \   00000072   0x....             LDR.N    R1,??DataTable6_1  ;; 0x40036000
   \   00000074   0x6008             STR      R0,[R1, #+0]
    113            
    114            if(trgsel >15)
   \   00000076   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000078   0x2B10             CMP      R3,#+16
   \   0000007A   0xD301             BCC.N    ??LPLD_PDB_Init_4
    115              return 0;
   \   0000007C   0x2000             MOVS     R0,#+0
   \   0000007E   0xE02C             B.N      ??LPLD_PDB_Init_1
    116            else
    117              //设置触发模式
    118              PDB0_SC |= PDB_SC_TRGSEL(trgsel);
   \                     ??LPLD_PDB_Init_4:
   \   00000080   0x....             LDR.N    R0,??DataTable6_1  ;; 0x40036000
   \   00000082   0x6800             LDR      R0,[R0, #+0]
   \   00000084   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000086   0x0219             LSLS     R1,R3,#+8
   \   00000088   0xF411 0x6170      ANDS     R1,R1,#0xF00
   \   0000008C   0x4308             ORRS     R0,R1,R0
   \   0000008E   0x....             LDR.N    R1,??DataTable6_1  ;; 0x40036000
   \   00000090   0x6008             STR      R0,[R1, #+0]
    119            
    120            //设置PDB工作模式
    121            if(cont)
   \   00000092   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000094   0x2D00             CMP      R5,#+0
   \   00000096   0xD006             BEQ.N    ??LPLD_PDB_Init_5
    122            {
    123              //PDB 工作在连续模式
    124              PDB0_SC |= PDB_SC_CONT_MASK ;
   \   00000098   0x....             LDR.N    R0,??DataTable6_1  ;; 0x40036000
   \   0000009A   0x6800             LDR      R0,[R0, #+0]
   \   0000009C   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   000000A0   0x....             LDR.N    R1,??DataTable6_1  ;; 0x40036000
   \   000000A2   0x6008             STR      R0,[R1, #+0]
   \   000000A4   0xE005             B.N      ??LPLD_PDB_Init_6
    125            }
    126            else
    127            {
    128              //PDB 工作在连续模式
    129              PDB0_SC &=(~PDB_SC_CONT_MASK);
   \                     ??LPLD_PDB_Init_5:
   \   000000A6   0x....             LDR.N    R0,??DataTable6_1  ;; 0x40036000
   \   000000A8   0x6800             LDR      R0,[R0, #+0]
   \   000000AA   0xF030 0x0002      BICS     R0,R0,#0x2
   \   000000AE   0x....             LDR.N    R1,??DataTable6_1  ;; 0x40036000
   \   000000B0   0x6008             STR      R0,[R1, #+0]
    130            }
    131            //设置DMA模式
    132            if(dma_en)
   \                     ??LPLD_PDB_Init_6:
   \   000000B2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000B4   0x2E00             CMP      R6,#+0
   \   000000B6   0xD006             BEQ.N    ??LPLD_PDB_Init_7
    133            {
    134              //PDB 工作在连续模式
    135              PDB0_SC |= PDB_SC_DMAEN_MASK ;
   \   000000B8   0x....             LDR.N    R0,??DataTable6_1  ;; 0x40036000
   \   000000BA   0x6800             LDR      R0,[R0, #+0]
   \   000000BC   0xF450 0x4000      ORRS     R0,R0,#0x8000
   \   000000C0   0x....             LDR.N    R1,??DataTable6_1  ;; 0x40036000
   \   000000C2   0x6008             STR      R0,[R1, #+0]
   \   000000C4   0xE005             B.N      ??LPLD_PDB_Init_8
    136            }
    137            else
    138            {
    139              //PDB 工作在连续模式
    140              PDB0_SC &=(~PDB_SC_DMAEN_MASK);
   \                     ??LPLD_PDB_Init_7:
   \   000000C6   0x....             LDR.N    R0,??DataTable6_1  ;; 0x40036000
   \   000000C8   0x6800             LDR      R0,[R0, #+0]
   \   000000CA   0xF430 0x4000      BICS     R0,R0,#0x8000
   \   000000CE   0x....             LDR.N    R1,??DataTable6_1  ;; 0x40036000
   \   000000D0   0x6008             STR      R0,[R1, #+0]
    141            }
    142            
    143            PDB0_MOD = mod;
   \                     ??LPLD_PDB_Init_8:
   \   000000D2   0x....             LDR.N    R0,??DataTable6_2  ;; 0x40036004
   \   000000D4   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000000D6   0x6002             STR      R2,[R0, #+0]
    144            
    145            return 1;
   \   000000D8   0x2001             MOVS     R0,#+1
   \                     ??LPLD_PDB_Init_1:
   \   000000DA   0xBCF0             POP      {R4-R7}
   \   000000DC   0x4770             BX       LR               ;; return
    146          }
    147          
    148          /*
    149           * LPLD_PDB_SetUp
    150           * 用于开启关闭PDB计数器
    151           * 开启的同时根据LMOD的配置加载MOD, IDLY, CHnDLYm, DACINTx, and POyDLY
    152           * 如果设置为软件触发，此时清零计数器
    153           *
    154           * 参数:
    155           *   is_operate -- 决定是否开启PDB
    156           *     |__PDB_STOP        -关闭PDB
    157           *     |__PDB_OPERATION   -开启PDB
    158           */

   \                                 In section .text, align 2, keep-with-next
    159          void LPLD_PDB_SetUp(uint8 is_operate)
    160          {
    161            if(is_operate==PDB_OPERATION)
   \                     LPLD_PDB_SetUp:
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0x2801             CMP      R0,#+1
   \   00000004   0xD112             BNE.N    ??LPLD_PDB_SetUp_0
    162            {
    163              //开启PDB0
    164              PDB0_SC |= PDB_SC_PDBEN_MASK ; 
   \   00000006   0x....             LDR.N    R0,??DataTable6_1  ;; 0x40036000
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   0000000E   0x....             LDR.N    R1,??DataTable6_1  ;; 0x40036000
   \   00000010   0x6008             STR      R0,[R1, #+0]
    165              //LDOK 只有在PDBEN = 1情况下才有用；
    166              //更细MOD, IDLY, CHnDLYm, DACINTx, and POyDLY中的值
    167              //将所有设置的时间值加载到相对应的缓冲区中。
    168              PDB0_SC |= PDB_SC_LDOK_MASK ;
   \   00000012   0x....             LDR.N    R0,??DataTable6_1  ;; 0x40036000
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000001A   0x....             LDR.N    R1,??DataTable6_1  ;; 0x40036000
   \   0000001C   0x6008             STR      R0,[R1, #+0]
    169              
    170              //PDB使能后且软件触发模式后
    171              //此时计数器会清零，复位计数器
    172              PDB0_SC |= PDB_SC_SWTRIG_MASK ;
   \   0000001E   0x....             LDR.N    R0,??DataTable6_1  ;; 0x40036000
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0xF450 0x3080      ORRS     R0,R0,#0x10000
   \   00000026   0x....             LDR.N    R1,??DataTable6_1  ;; 0x40036000
   \   00000028   0x6008             STR      R0,[R1, #+0]
   \   0000002A   0xE005             B.N      ??LPLD_PDB_SetUp_1
    173            }
    174            else
    175            {
    176              //关闭PDB
    177              PDB0_SC &= (~PDB_SC_PDBEN_MASK); 
   \                     ??LPLD_PDB_SetUp_0:
   \   0000002C   0x....             LDR.N    R0,??DataTable6_1  ;; 0x40036000
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0xF030 0x0080      BICS     R0,R0,#0x80
   \   00000034   0x....             LDR.N    R1,??DataTable6_1  ;; 0x40036000
   \   00000036   0x6008             STR      R0,[R1, #+0]
    178            }
    179          }
   \                     ??LPLD_PDB_SetUp_1:
   \   00000038   0x4770             BX       LR               ;; return
    180          
    181          /*
    182           * LPLD_PDB_ADC_Trigger_Congfig
    183           * 用于设置通过PDB设置ADC的触发信号，在该函数中
    184           * 设置PDB的adcx通道
    185           * 设置PDB的adcx预触发延时计数器的值
    186           * 设置PDB的adcx预触发通道
    187           * 设置PDB的adcx预触发通道bb模式
    188           * 
    189           * 参数:
    190           *    adcx--选择PDB ADC的通道
    191           *      |__ADC0       -选择PDB ADC通道0
    192           *      |__ADC1       -选择PDB ADC通道1
    193           * 
    194           *    *pre_dalay--PDB ADC的预触发延时器的计数值，该参数最大为65536
    195           *        PDB ADC的延时频率 等于 PDB计数器的频率 乘以 pre_dalay 
    196           *        因为每个通道有两个预触发延时器，需要两个延时值，所以定义为*pre_dalay
    197           * 
    198           *    pre_ch--设置PDB ADC通道x的预触发通道
    199           *      |__PDB_PRECH_DIS  -不选择预触发位
    200           *      |__PDB_PRECH_EN0  -选择预触发0  
    201           *      |__PDB_PRECH_EN1  -选择预触发1  
    202           *
    203           *    pre_bb_mode--设置PDB ADC通道x的预触发的back to back模式
    204           *      |__PDB_PREBB_DIS  -禁止PDB ADC通道x的预触发的b to b模式
    205           *      |__PDB_PREBB_EN0  -选择PDB ADC通道x的预触发0的的b to b模式
    206           *      |__PDB_PREBB_EN1  -选择PDB ADC通道x的预触发1的的b to b模式
    207           */
    208          

   \                                 In section .text, align 2, keep-with-next
    209          void LPLD_PDB_ADC_Trigger_Congfig(ADCx adcx, uint16 *pre_dalay, uint8 pre_ch, uint8 pre_bb_mode)
    210          {
   \                     LPLD_PDB_ADC_Trigger_Congfig:
   \   00000000   0xB430             PUSH     {R4,R5}
    211            PDB_C1_REG(PDB0_BASE_PTR,adcx) = (0 
    212                                              | PDB_C1_BB(pre_bb_mode)
    213                                              | PDB_C1_TOS(pre_ch)
    214                                              | PDB_C1_EN(pre_ch)
    215                                              );
   \   00000002   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000004   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000006   0x0214             LSLS     R4,R2,#+8
   \   00000008   0xEA54 0x4303      ORRS     R3,R4,R3, LSL #+16
   \   0000000C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000000E   0x4313             ORRS     R3,R2,R3
   \   00000010   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000012   0x2428             MOVS     R4,#+40
   \   00000014   0x....             LDR.N    R5,??DataTable6_3  ;; 0x40036010
   \   00000016   0xFB04 0x5400      MLA      R4,R4,R0,R5
   \   0000001A   0x6023             STR      R3,[R4, #+0]
    216            
    217            if(pre_ch) 
   \   0000001C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000001E   0x2A00             CMP      R2,#+0
   \   00000020   0xD009             BEQ.N    ??LPLD_PDB_ADC_Trigger_Congfig_0
    218            {
    219              PDB_DLY_REG(PDB0_BASE_PTR,adcx,pre_ch-1) = *pre_dalay;
   \   00000022   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000024   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   0x2328             MOVS     R3,#+40
   \   00000028   0x....             LDR.N    R4,??DataTable6_3  ;; 0x40036010
   \   0000002A   0xFB03 0x4000      MLA      R0,R3,R0,R4
   \   0000002E   0xEB10 0x0082      ADDS     R0,R0,R2, LSL #+2
   \   00000032   0x8809             LDRH     R1,[R1, #+0]
   \   00000034   0x6041             STR      R1,[R0, #+4]
    220            }
    221          }
   \                     ??LPLD_PDB_ADC_Trigger_Congfig_0:
   \   00000036   0xBC30             POP      {R4,R5}
   \   00000038   0x4770             BX       LR               ;; return
    222          
    223          /*
    224           * LPLD_PDB_DAC_Interval_Congfig
    225           * 该函数用于设置DAC的PDB触发周期，在该函数中
    226           * 设置PDB的dacx通道
    227           * 设置PDB的dacx的PDB0_DACINTx的计数值，
    228           * 设置PDB的dacx外部引脚触发模式
    229           * 
    230           * 参数:
    231           *    dacx--选择PDB DAC的通道
    232           *      |__DAC0       -选择PDB DAC通道0
    233           *      |__DAC1       -选择PDB DAC通道1
    234           * 
    235           *    interval -- DAC的触发间隔，该参数最大为65536
    236           *        DAC的触发频率 等于 PDB计数器的频率 乘以 interval 
    237           * 
    238           *    extrigger -- DAC外部触发输入使能，如果设置此位PDB0_DACINTx会被放弃
    239           *      |__PDB_EXTRG_DIS  -禁用外部触发输入
    240           *      |__PDB_EXTRG_EN   -使能外部触发输入   
    241           */

   \                                 In section .text, align 2, keep-with-next
    242          void LPLD_PDB_DAC_Interval_Congfig(DACx dacx,uint16 interval,uint8 extrigger)
    243          {
    244          
    245            if(extrigger == PDB_EXTRG_EN)
   \                     LPLD_PDB_DAC_Interval_Congfig:
   \   00000000   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000002   0x2A01             CMP      R2,#+1
   \   00000004   0xD10A             BNE.N    ??LPLD_PDB_DAC_Interval_Congfig_0
    246            {
    247              //外部触发模式下，PDB0_DACINT0无用
    248              //DAC output delay from PDB Software trigger
    249              PDB_INTC_REG(PDB0_BASE_PTR,dacx) |= PDB_INTC_EXT_MASK ;
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0x....             LDR.N    R1,??DataTable6_4  ;; 0x40036150
   \   0000000A   0xF851 0x1030      LDR      R1,[R1, R0, LSL #+3]
   \   0000000E   0xF051 0x0102      ORRS     R1,R1,#0x2
   \   00000012   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   0x....             LDR.N    R2,??DataTable6_4  ;; 0x40036150
   \   00000016   0xF842 0x1030      STR      R1,[R2, R0, LSL #+3]
   \   0000001A   0xE00F             B.N      ??LPLD_PDB_DAC_Interval_Congfig_1
    250            }
    251            else
    252            {
    253              //设置PDB0_DACINT0时，必须保证PDSC_DACTOE = 1,意思是开启PDB内部DAC计数器
    254              //DAC output changes are base on the interval defined by this value
    255              PDB_INT_REG(PDB0_BASE_PTR,dacx) = interval;
   \                     ??LPLD_PDB_DAC_Interval_Congfig_0:
   \   0000001C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001E   0x....             LDR.N    R2,??DataTable6_4  ;; 0x40036150
   \   00000020   0xEB12 0x02C0      ADDS     R2,R2,R0, LSL #+3
   \   00000024   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000026   0x6051             STR      R1,[R2, #+4]
    256              PDB_INTC_REG(PDB0_BASE_PTR,dacx) &= ~PDB_INTC_EXT_MASK ;
   \   00000028   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002A   0x....             LDR.N    R1,??DataTable6_4  ;; 0x40036150
   \   0000002C   0xF851 0x1030      LDR      R1,[R1, R0, LSL #+3]
   \   00000030   0xF031 0x0102      BICS     R1,R1,#0x2
   \   00000034   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000036   0x....             LDR.N    R2,??DataTable6_4  ;; 0x40036150
   \   00000038   0xF842 0x1030      STR      R1,[R2, R0, LSL #+3]
    257            }
    258            //使能DAC间隔计数器
    259            PDB_INTC_REG(PDB0_BASE_PTR,dacx) |= PDB_INTC_TOE_MASK ;
   \                     ??LPLD_PDB_DAC_Interval_Congfig_1:
   \   0000003C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003E   0x....             LDR.N    R1,??DataTable6_4  ;; 0x40036150
   \   00000040   0xF851 0x1030      LDR      R1,[R1, R0, LSL #+3]
   \   00000044   0xF051 0x0101      ORRS     R1,R1,#0x1
   \   00000048   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004A   0x....             LDR.N    R2,??DataTable6_4  ;; 0x40036150
   \   0000004C   0xF842 0x1030      STR      R1,[R2, R0, LSL #+3]
    260            
    261          }
   \   00000050   0x4770             BX       LR               ;; return
    262          
    263          /*
    264           * LPLD_PDB_Delay_SetIsr
    265           * 该函数用于设定PDB延时中断
    266           * 
    267           * 参数:
    268           * 
    269           *    delay -- PDB的延时值，该参数最大为65536
    270           *        PDB的延时值频率 等于 PDB计数器的频率 乘以 delay 
    271           * 
    272           *    isr_func -- PDB延时中断服务函数
    273           */
    274          

   \                                 In section .text, align 2, keep-with-next
    275          void LPLD_PDB_SetDelayIsr(uint16 delay,PDB_ISR_CALLBACK isr_func)
    276          {
   \                     LPLD_PDB_SetDelayIsr:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x000C             MOVS     R4,R1
    277            //设定定时器值
    278            PDB0_IDLY = delay;
   \   00000004   0x....             LDR.N    R1,??DataTable6_5  ;; 0x4003600c
   \   00000006   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000008   0x6008             STR      R0,[R1, #+0]
    279            
    280            enable_irq(72);
   \   0000000A   0x2048             MOVS     R0,#+72
   \   0000000C   0x.... 0x....      BL       enable_irq
    281            //使能定时中断
    282            PDB0_SC |= PDB_SC_PDBIE_MASK;
   \   00000010   0x....             LDR.N    R0,??DataTable6_1  ;; 0x40036000
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0xF050 0x0020      ORRS     R0,R0,#0x20
   \   00000018   0x....             LDR.N    R1,??DataTable6_1  ;; 0x40036000
   \   0000001A   0x6008             STR      R0,[R1, #+0]
    283            //添加中断函数  
    284            PDB_ISR[0] = isr_func;
   \   0000001C   0x....             LDR.N    R0,??DataTable6_6
   \   0000001E   0x6004             STR      R4,[R0, #+0]
    285          
    286          }
   \   00000020   0xBD10             POP      {R4,PC}          ;; return
    287          
    288          /*
    289           * LPLD_PDB_Delay
    290           * 该函数用查询标志位的方式等待延时完成
    291           * 
    292           * 参数:
    293           * 
    294           *    delay -- PDB的延时值，该参数最大为65536
    295           *        PDB的延时值频率 等于 PDB计数器单位的频率 乘以 delay 
    296           * 
    297           */

   \                                 In section .text, align 2, keep-with-next
    298          void LPLD_PDB_Delay(uint16 delay)
    299          {
    300            //设定定时器值
    301            PDB0_IDLY = delay;
   \                     LPLD_PDB_Delay:
   \   00000000   0x....             LDR.N    R1,??DataTable6_5  ;; 0x4003600c
   \   00000002   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000004   0x6008             STR      R0,[R1, #+0]
    302            //禁止定时器中断
    303            PDB0_SC &= (~PDB_SC_PDBIE_MASK);
   \   00000006   0x....             LDR.N    R0,??DataTable6_1  ;; 0x40036000
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0xF030 0x0020      BICS     R0,R0,#0x20
   \   0000000E   0x....             LDR.N    R1,??DataTable6_1  ;; 0x40036000
   \   00000010   0x6008             STR      R0,[R1, #+0]
   \   00000012   0xE005             B.N      ??LPLD_PDB_Delay_0
    304            //延时等待直到标志位置1
    305            while(PDB0_SC & PDB_SC_PDBIF_MASK)
    306            {
    307              //清除标志位  
    308              PDB0_SC |= PDB_SC_PDBIF_MASK;
   \                     ??LPLD_PDB_Delay_1:
   \   00000014   0x....             LDR.N    R0,??DataTable6_1  ;; 0x40036000
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   0000001C   0x....             LDR.N    R1,??DataTable6_1  ;; 0x40036000
   \   0000001E   0x6008             STR      R0,[R1, #+0]
    309            }
   \                     ??LPLD_PDB_Delay_0:
   \   00000020   0x....             LDR.N    R0,??DataTable6_1  ;; 0x40036000
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0x0640             LSLS     R0,R0,#+25
   \   00000026   0xD4F5             BMI.N    ??LPLD_PDB_Delay_1
    310          }
   \   00000028   0x4770             BX       LR               ;; return
    311          
    312          
    313          /*
    314           * LPLD_PDB_Isr
    315           * PDB通用中断底层入口函数
    316           * PDB一共有两个中断，其一为定时中断，其二为错误中断
    317           * 这里仅设置定时中断处理函数
    318           * 用户无需修改，程序自动进入对应通道中断函数
    319           */

   \                                 In section .text, align 2, keep-with-next
    320          void LPLD_PDB_Isr(void)
    321          {
   \                     LPLD_PDB_Isr:
   \   00000000   0xB580             PUSH     {R7,LR}
    322            #define PDB_VECTORNUM   (*(volatile uint8*)(0xE000ED04))
    323            uint8 pdb_ch = PDB_VECTORNUM - 88;
   \   00000002   0x....             LDR.N    R0,??DataTable6_7  ;; 0xe000ed04
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x3858             SUBS     R0,R0,#+88
    324              
    325            //调用用户自定义中断服务
    326            PDB_ISR[pdb_ch]();  
   \   00000008   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000A   0x....             LDR.N    R1,??DataTable6_6
   \   0000000C   0xF851 0x0020      LDR      R0,[R1, R0, LSL #+2]
   \   00000010   0x4780             BLX      R0
    327            
    328            //清除定时中断标志位  
    329            PDB0_SC &= ~PDB_SC_PDBIF_MASK;
   \   00000012   0x....             LDR.N    R0,??DataTable6_1  ;; 0x40036000
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0xF030 0x0040      BICS     R0,R0,#0x40
   \   0000001A   0x....             LDR.N    R1,??DataTable6_1  ;; 0x40036000
   \   0000001C   0x6008             STR      R0,[R1, #+0]
    330          }
   \   0000001E   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x4004803C         DC32     0x4004803c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x40036000         DC32     0x40036000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x40036004         DC32     0x40036004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x40036010         DC32     0x40036010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0x40036150         DC32     0x40036150

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   0x4003600C         DC32     0x4003600c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   0x........         DC32     PDB_ISR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \   00000000   0xE000ED04         DC32     0xe000ed04

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  LPLD_PDB_ADC_Trigger_Congfig
        0  LPLD_PDB_DAC_Interval_Congfig
        0  LPLD_PDB_Delay
       16  LPLD_PDB_Init
        8  LPLD_PDB_Isr
             8 -- Indirect call
        8  LPLD_PDB_SetDelayIsr
             8 -> enable_irq
        0  LPLD_PDB_SetUp


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
      58  LPLD_PDB_ADC_Trigger_Congfig
      82  LPLD_PDB_DAC_Interval_Congfig
      42  LPLD_PDB_Delay
     222  LPLD_PDB_Init
      32  LPLD_PDB_Isr
      34  LPLD_PDB_SetDelayIsr
      58  LPLD_PDB_SetUp
       4  PDB_ISR

 
   4 bytes in section .bss
 560 bytes in section .text
 
 560 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: none
