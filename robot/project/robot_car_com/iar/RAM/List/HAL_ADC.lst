###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     25/Sep/2013  21:07:09 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\中国机器人大赛\robot_project\lib\LPLD\HAL_ADC.c       #
#    Command line =  D:\中国机器人大赛\robot_project\lib\LPLD\HAL_ADC.c -D    #
#                    IAR -D LPLD_K60 -lCN D:\中国机器人大赛\robot_project\pro #
#                    ject\LPLD_Template\iar\RAM\List\ -lB                     #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\RAM\List\ -o D:\中国机器人大赛\robot_project\project\L #
#                    PLD_Template\iar\RAM\Obj\ --no_cse --no_unroll           #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "D:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I D:\中国机器人大赛\robot_project\project\LPLD_T #
#                    emplate\iar\..\app\ -I D:\中国机器人大赛\robot_project\p #
#                    roject\LPLD_Template\iar\..\..\..\lib\common\ -I         #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\cpu\ -I D:\中国机器人大赛\robot_project\p #
#                    roject\LPLD_Template\iar\..\..\..\lib\cpu\headers\ -I    #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\drivers\adc16\ -I                         #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\drivers\enet\ -I                          #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\drivers\lptmr\ -I                         #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\drivers\mcg\ -I                           #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\drivers\pmc\ -I                           #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\drivers\rtc\ -I                           #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\drivers\uart\ -I                          #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\drivers\wdog\ -I                          #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\platforms\ -I                             #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\LPLD\ -I D:\中国机器人大赛\robot_project\ #
#                    project\LPLD_Template\iar\..\..\..\lib\LPLD\FatFs\ -I    #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\LPLD\USB\ -I                              #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\iar_config_files\ -Ol                     #
#    List file    =  D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\RAM\List\HAL_ADC.lst                                   #
#    Object file  =  D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\RAM\Obj\HAL_ADC.o                                      #
#                                                                             #
#                                                                             #
###############################################################################

D:\中国机器人大赛\robot_project\lib\LPLD\HAL_ADC.c
      1          /*
      2           * --------------"拉普兰德K60底层库"-----------------
      3           *
      4           * 测试硬件平台:LPLD_K60 Card
      5           * 版权所有:北京拉普兰德电子技术有限公司
      6           * 网络销售:http://laplenden.taobao.com
      7           * 公司门户:http://www.lpld.cn
      8           *
      9           * 文件名: HAL_ADC.c
     10           * 用途: ADC底层模块相关函数
     11           * 最后修改日期: 20120323
     12           *
     13           * 开发者使用协议:
     14           *  本代码面向所有使用者开放源代码，开发者可以随意修改源代码。但本段及以上注释应
     15           *  予以保留，不得更改或删除原版权所有者姓名。二次开发者可以加注二次版权所有者，
     16           *  但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     17           */
     18          #include "common.h"
     19          #include "HAL_ADC.h"
     20          

   \                                 In section .bss, align 4
     21          ADC_ISR_CALLBACK ADC_ISR[2];
   \                     ADC_ISR:
   \   00000000                      DS8 8
     22          //全局变量定义

   \                                 In section .bss, align 4
     23          tADC_Config Adc0_Config;  // ADC0 寄存器结构体
   \                     Adc0_Config:
   \   00000000                      DS8 16

   \                                 In section .bss, align 4
     24          tADC_Config Adc1_Config;  // ADC0 寄存器结构体
   \                     Adc1_Config:
   \   00000000                      DS8 16
     25          
     26          //ADC映射地址数组

   \                                 In section .data, align 4
     27          volatile ADC_MemMapPtr ADCx_Ptr[2] = {ADC0_BASE_PTR, 
   \                     ADCx_Ptr:
   \   00000000   0x4003B000         DC32 4003B000H, 400BB000H
   \              0x400BB000   
     28                                                ADC1_BASE_PTR};
     29          
     30          
     31          /*
     32           * LPLD_ADC_Init
     33           * ADC模块通用初始化函数--用于非中断模式、单次转换、软件触发
     34           * 
     35           * 参数:
     36           *    adcx--ADC模块号
     37           *      |__ADC0         -ADC0模块
     38           *      |__ADC1         -ADC1模块
     39           *    mode--AD转换精度
     40           *      |__MODE_8       --单端8位，差分9位
     41           *      |__MODE_12      --单端12位，差分13位
     42           *      |__MODE_10      --单端10位，差分11位
     43           *      |__MODE_16      --单端16位，差分16位
     44           *    diff--单端输入或差分输入
     45           *      |__CONV_SING    --单端
     46           *      |__CONV_DIFF    --差分
     47           *
     48           * 输出:
     49           *    0--配置错误
     50           *    1--配置成功
     51           */

   \                                 In section .text, align 2, keep-with-next
     52          uint8 LPLD_ADC_Init(ADCx adcx, uint8 mode, uint8 diff)
     53          {
   \                     LPLD_ADC_Init:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0015             MOVS     R5,R2
     54            tADC_ConfigPtr ADC_CfgPtr;
     55            
     56            if(adcx == ADC0)
   \   00000006   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD143             BNE.N    ??LPLD_ADC_Init_0
     57            {
     58              SIM_SCGC6 |= (SIM_SCGC6_ADC0_MASK);   // 开启ADC0时钟
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable5  ;; 0x4004803c
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0xF050 0x6000      ORRS     R0,R0,#0x8000000
   \   00000016   0x.... 0x....      LDR.W    R2,??DataTable5  ;; 0x4004803c
   \   0000001A   0x6010             STR      R0,[R2, #+0]
     59              ADC_CfgPtr = &Adc0_Config;
   \   0000001C   0x.... 0x....      LDR.W    R6,??DataTable5_1
     60            }
     61            else if(adcx == ADC1)
     62            {
     63              SIM_SCGC3 |= (SIM_SCGC3_ADC1_MASK);   // 开启ADC1时钟
     64              ADC_CfgPtr = &Adc1_Config;
     65            }
     66            else
     67            {
     68              return 0;
     69            }
     70            
     71            // 初始化ADC
     72            ADC_CfgPtr->CONFIG1  = ADLPC_NORMAL                   // 重新为正常使用进行配置，4次硬件平均
     73                                | ADC_CFG1_ADIV(ADIV_8) //| ADC_CFG1_ADIV(ADIV_1) // ADC输入时钟分频为 1
     74                                | ADLSMP_LONG                     // 长采样时间设置 
     75                                | ADC_CFG1_ADICLK(ADICLK_BUS_2);  // ADC输入时钟源为 BusClk/2
   \                     ??LPLD_ADC_Init_1:
   \   00000020   0x2071             MOVS     R0,#+113
   \   00000022   0x7030             STRB     R0,[R6, #+0]
     76            
     77            // 选择转换精度
     78            switch(mode)
   \   00000024   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000026   0x2900             CMP      R1,#+0
   \   00000028   0xD005             BEQ.N    ??LPLD_ADC_Init_2
   \   0000002A   0x2902             CMP      R1,#+2
   \   0000002C   0xD047             BEQ.N    ??LPLD_ADC_Init_3
   \   0000002E   0xD341             BCC.N    ??LPLD_ADC_Init_4
   \   00000030   0x2903             CMP      R1,#+3
   \   00000032   0xD049             BEQ.N    ??LPLD_ADC_Init_5
   \   00000034   0xE04D             B.N      ??LPLD_ADC_Init_6
     79            {
     80              case MODE_8:
     81                 ADC_CfgPtr->CONFIG1 |= ADC_CFG1_MODE(MODE_8);
   \                     ??LPLD_ADC_Init_2:
   \   00000036   0x7830             LDRB     R0,[R6, #+0]
   \   00000038   0x7030             STRB     R0,[R6, #+0]
     82                 break;
     83              case MODE_12:
     84                 ADC_CfgPtr->CONFIG1 |= ADC_CFG1_MODE(MODE_12);
     85                 break;
     86              case MODE_10:
     87                 ADC_CfgPtr->CONFIG1 |= ADC_CFG1_MODE(MODE_10);
     88                 break;
     89              case MODE_16:
     90                 ADC_CfgPtr->CONFIG1 |= ADC_CFG1_MODE(MODE_16);
     91                 break;
     92              default:
     93                return 0;
     94            }
     95            // 选择ADxxa为输入通道
     96            // 异步时钟输出使能
     97            // 高速转换
     98            // 长采样时间时钟周期选择 额外20个时钟周期，共24个ADCK周期
     99            // 总采样周期见K60技术文档 page:840
    100            ADC_CfgPtr->CONFIG2  = MUXSEL_ADCA 
    101                                | ADACKEN_DISABLED 
    102                                | ADHSC_HISPEED
    103                                | ADC_CFG2_ADLSTS(ADLSTS_20) ;
   \                     ??LPLD_ADC_Init_7:
   \   0000003A   0x2004             MOVS     R0,#+4
   \   0000003C   0x7070             STRB     R0,[R6, #+1]
    104            //用于设定阈值
    105            ADC_CfgPtr->COMPARE1 = 0x1234u ; 
   \   0000003E   0xF241 0x2034      MOVW     R0,#+4660
   \   00000042   0x8070             STRH     R0,[R6, #+2]
    106            ADC_CfgPtr->COMPARE2 = 0x5678u ;
   \   00000044   0xF245 0x6078      MOVW     R0,#+22136
   \   00000048   0x80B0             STRH     R0,[R6, #+4]
    107            
    108            ADC_CfgPtr->STATUS2  = ADTRG_SW     //初始化设置成为软件触发
    109                                | ACFE_DISABLED 
    110                                | ACFGT_GREATER 
    111                                | ACREN_ENABLED
    112                                | DMAEN_DISABLED
    113                                | ADC_SC2_REFSEL(REFSEL_EXT);
   \   0000004A   0x2018             MOVS     R0,#+24
   \   0000004C   0x71B0             STRB     R0,[R6, #+6]
    114            
    115            ADC_CfgPtr->STATUS3  = CAL_OFF    //关闭校准
    116                                | ADCO_SINGLE 
    117                                | AVGE_ENABLED 
    118                                | ADC_SC3_AVGS(AVGS_32);
   \   0000004E   0x2007             MOVS     R0,#+7
   \   00000050   0x71F0             STRB     R0,[R6, #+7]
    119            
    120            ADC_CfgPtr->PGA      = PGAEN_DISABLED 
    121                                | PGACHP_NOCHOP 
    122                                | PGALP_NORMAL 
    123                                | ADC_PGA_PGAG(PGAG_64);
   \   00000052   0xF45F 0x20C0      MOVS     R0,#+393216
   \   00000056   0x60F0             STR      R0,[R6, #+12]
    124            
    125            ADC_Config_Alt(ADCx_Ptr[adcx], ADC_CfgPtr);    //配置 ADC寄存器
   \   00000058   0x0031             MOVS     R1,R6
   \   0000005A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable5_2
   \   00000060   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000064   0x.... 0x....      BL       ADC_Config_Alt
    126            ADC_Cal(ADCx_Ptr[adcx]);                       //首先进行32次的硬件平均校准进行校准
   \   00000068   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000006A   0x.... 0x....      LDR.W    R0,??DataTable5_2
   \   0000006E   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000072   0x.... 0x....      BL       ADC_Cal
    127            
    128            //选择单端或差分模式
    129            if(diff == CONV_SING)
   \   00000076   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000078   0x2D00             CMP      R5,#+0
   \   0000007A   0xD12C             BNE.N    ??LPLD_ADC_Init_8
    130            {
    131              ADC_CfgPtr->STATUS1A =  DIFF_SINGLE ;
   \   0000007C   0x2000             MOVS     R0,#+0
   \   0000007E   0x7230             STRB     R0,[R6, #+8]
    132            }  
    133            else if(diff == CONV_DIFF)
    134            {
    135              ADC_CfgPtr->STATUS1A =  DIFF_DIFFERENTIAL;
    136            } 
    137            else
    138            {
    139              return 0;
    140            }
    141            
    142            ADC_Config_Alt(ADCx_Ptr[adcx], ADC_CfgPtr);  //再校准后，再次初始化，配置ADC0
   \                     ??LPLD_ADC_Init_9:
   \   00000080   0x0031             MOVS     R1,R6
   \   00000082   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000084   0x.... 0x....      LDR.W    R0,??DataTable5_2
   \   00000088   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000008C   0x.... 0x....      BL       ADC_Config_Alt
    143            
    144            return 1;
   \   00000090   0x2001             MOVS     R0,#+1
   \                     ??LPLD_ADC_Init_10:
   \   00000092   0xBD70             POP      {R4-R6,PC}       ;; return
   \                     ??LPLD_ADC_Init_0:
   \   00000094   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000096   0x2C01             CMP      R4,#+1
   \   00000098   0xD10A             BNE.N    ??LPLD_ADC_Init_11
   \   0000009A   0x.... 0x....      LDR.W    R0,??DataTable5_3  ;; 0x40048030
   \   0000009E   0x6800             LDR      R0,[R0, #+0]
   \   000000A0   0xF050 0x6000      ORRS     R0,R0,#0x8000000
   \   000000A4   0x.... 0x....      LDR.W    R2,??DataTable5_3  ;; 0x40048030
   \   000000A8   0x6010             STR      R0,[R2, #+0]
   \   000000AA   0x.... 0x....      LDR.W    R6,??DataTable5_4
   \   000000AE   0xE7B7             B.N      ??LPLD_ADC_Init_1
   \                     ??LPLD_ADC_Init_11:
   \   000000B0   0x2000             MOVS     R0,#+0
   \   000000B2   0xE7EE             B.N      ??LPLD_ADC_Init_10
   \                     ??LPLD_ADC_Init_4:
   \   000000B4   0x7830             LDRB     R0,[R6, #+0]
   \   000000B6   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   000000BA   0x7030             STRB     R0,[R6, #+0]
   \   000000BC   0xE7BD             B.N      ??LPLD_ADC_Init_7
   \                     ??LPLD_ADC_Init_3:
   \   000000BE   0x7830             LDRB     R0,[R6, #+0]
   \   000000C0   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   000000C4   0x7030             STRB     R0,[R6, #+0]
   \   000000C6   0xE7B8             B.N      ??LPLD_ADC_Init_7
   \                     ??LPLD_ADC_Init_5:
   \   000000C8   0x7830             LDRB     R0,[R6, #+0]
   \   000000CA   0xF050 0x000C      ORRS     R0,R0,#0xC
   \   000000CE   0x7030             STRB     R0,[R6, #+0]
   \   000000D0   0xE7B3             B.N      ??LPLD_ADC_Init_7
   \                     ??LPLD_ADC_Init_6:
   \   000000D2   0x2000             MOVS     R0,#+0
   \   000000D4   0xE7DD             B.N      ??LPLD_ADC_Init_10
   \                     ??LPLD_ADC_Init_8:
   \   000000D6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000D8   0x2D01             CMP      R5,#+1
   \   000000DA   0xD102             BNE.N    ??LPLD_ADC_Init_12
   \   000000DC   0x2020             MOVS     R0,#+32
   \   000000DE   0x7230             STRB     R0,[R6, #+8]
   \   000000E0   0xE7CE             B.N      ??LPLD_ADC_Init_9
   \                     ??LPLD_ADC_Init_12:
   \   000000E2   0x2000             MOVS     R0,#+0
   \   000000E4   0xE7D5             B.N      ??LPLD_ADC_Init_10
    145          }
    146          

   \                                 In section .text, align 2, keep-with-next
    147          void ADC_Init(ADCx adcx)
    148          {
   \                     ADC_Init:
   \   00000000   0xB510             PUSH     {R4,LR}
    149            tADC_ConfigPtr ADC_CfgPtr;
    150            if(adcx == ADC0)
   \   00000002   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD130             BNE.N    ??ADC_Init_0
    151            {
    152              SIM_SCGC6 |= (SIM_SCGC6_ADC0_MASK);   // 开启ADC0时钟
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable5  ;; 0x4004803c
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0xF050 0x6000      ORRS     R0,R0,#0x8000000
   \   00000012   0x.... 0x....      LDR.W    R1,??DataTable5  ;; 0x4004803c
   \   00000016   0x6008             STR      R0,[R1, #+0]
    153              ADC_CfgPtr = &Adc0_Config;
   \   00000018   0x.... 0x....      LDR.W    R4,??DataTable5_1
    154            }
    155            else if(adcx == ADC1)
    156            {
    157              SIM_SCGC3 |= (SIM_SCGC3_ADC1_MASK);   // 开启ADC1时钟
    158              ADC_CfgPtr = &Adc1_Config;
    159            }
    160            else
    161            {
    162              return;
    163            }
    164            ADC_CfgPtr->CONFIG1 = ADLPC_NORMAL 
    165                                | ADC_CFG1_ADIV(ADIV_8) 
    166                                | ADLSMP_LONG 
    167                                | ADC_CFG1_MODE(MODE_10)
    168                                | ADC_CFG1_ADICLK(ADICLK_BUS_2);
   \                     ??ADC_Init_1:
   \   0000001C   0x2079             MOVS     R0,#+121
   \   0000001E   0x7020             STRB     R0,[R4, #+0]
    169            
    170            ADC_CfgPtr->CONFIG2 = MUXSEL_ADCA 
    171                                | ADACKEN_DISABLED
    172                                | ADHSC_HISPEED 
    173                                | ADC_CFG2_ADLSTS(ADLSTS_20) ;
   \   00000020   0x2004             MOVS     R0,#+4
   \   00000022   0x7060             STRB     R0,[R4, #+1]
    174            
    175            ADC_CfgPtr->COMPARE1 = 0x1234u ; 
   \   00000024   0xF241 0x2034      MOVW     R0,#+4660
   \   00000028   0x8060             STRH     R0,[R4, #+2]
    176            ADC_CfgPtr->COMPARE2 = 0x5678u ;
   \   0000002A   0xF245 0x6078      MOVW     R0,#+22136
   \   0000002E   0x80A0             STRH     R0,[R4, #+4]
    177            
    178            ADC_CfgPtr->STATUS2  = ADTRG_SW 
    179                                |  ACFE_DISABLED 
    180                                |  ACFGT_GREATER 
    181                                |  ACREN_ENABLED 
    182                                |  DMAEN_ENABLED
    183                                |  ADC_SC2_REFSEL(REFSEL_EXT);
   \   00000030   0x201C             MOVS     R0,#+28
   \   00000032   0x71A0             STRB     R0,[R4, #+6]
    184            
    185            ADC_CfgPtr->STATUS3  = CAL_OFF
    186                                 | ADCO_SINGLE
    187                                 | AVGE_ENABLED
    188                                 | ADC_SC3_AVGS(AVGS_32);
   \   00000034   0x2007             MOVS     R0,#+7
   \   00000036   0x71E0             STRB     R0,[R4, #+7]
    189            
    190            ADC_CfgPtr->PGA     = PGAEN_DISABLED 
    191                                | PGACHP_NOCHOP 
    192                                | PGALP_NORMAL 
    193                                | ADC_PGA_PGAG(PGAG_64);
   \   00000038   0xF45F 0x20C0      MOVS     R0,#+393216
   \   0000003C   0x60E0             STR      R0,[R4, #+12]
    194            
    195            //ADC_CfgPtr->STATUS1A = AIEN_OFF | DIFF_SINGLE | ADC_SC1_ADCH(31);
    196            //ADC_CfgPtr->STATUS1B = AIEN_OFF | DIFF_SINGLE | ADC_SC1_ADCH(31);
    197            
    198            ADC_Config_Alt(ADC0_BASE_PTR, ADC_CfgPtr);   // config ADC
   \   0000003E   0x0021             MOVS     R1,R4
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable5_5  ;; 0x4003b000
   \   00000044   0x.... 0x....      BL       ADC_Config_Alt
    199            ADC_Cal(ADC0_BASE_PTR);                      // do the calibration
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable5_5  ;; 0x4003b000
   \   0000004C   0x.... 0x....      BL       ADC_Cal
    200            
    201            enable_irq(57);
   \   00000050   0x2039             MOVS     R0,#+57
   \   00000052   0x.... 0x....      BL       enable_irq
    202            ADC_CfgPtr->STATUS1A = AIEN_OFF | DIFF_SINGLE | ADC_SC1_ADCH(0);
   \   00000056   0x2000             MOVS     R0,#+0
   \   00000058   0x7220             STRB     R0,[R4, #+8]
    203            ADC_CfgPtr->STATUS1B = AIEN_OFF | DIFF_SINGLE | ADC_SC1_ADCH(0);
   \   0000005A   0x2000             MOVS     R0,#+0
   \   0000005C   0x7260             STRB     R0,[R4, #+9]
    204            ADC_Config_Alt(ADC0_BASE_PTR, ADC_CfgPtr);   // config ADC0
   \   0000005E   0x0021             MOVS     R1,R4
   \   00000060   0x.... 0x....      LDR.W    R0,??DataTable5_5  ;; 0x4003b000
   \   00000064   0x.... 0x....      BL       ADC_Config_Alt
    205          }
   \                     ??ADC_Init_2:
   \   00000068   0xBD10             POP      {R4,PC}          ;; return
   \                     ??ADC_Init_0:
   \   0000006A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006C   0x2801             CMP      R0,#+1
   \   0000006E   0xD10A             BNE.N    ??ADC_Init_3
   \   00000070   0x.... 0x....      LDR.W    R0,??DataTable5_3  ;; 0x40048030
   \   00000074   0x6800             LDR      R0,[R0, #+0]
   \   00000076   0xF050 0x6000      ORRS     R0,R0,#0x8000000
   \   0000007A   0x.... 0x....      LDR.W    R1,??DataTable5_3  ;; 0x40048030
   \   0000007E   0x6008             STR      R0,[R1, #+0]
   \   00000080   0x.... 0x....      LDR.W    R4,??DataTable5_4
   \   00000084   0xE7CA             B.N      ??ADC_Init_1
   \                     ??ADC_Init_3:
   \   00000086   0xE7EF             B.N      ??ADC_Init_2
    206          
    207          
    208          /*
    209           * LPLD_ADC_SE_Get
    210           * 取得ADC模块单端输入转换值--软件触发
    211           * 
    212           * 参数:
    213           *    adcx--ADC模块号
    214           *      |__ADC0         -ADC0模块
    215           *      |__ADC1         -ADC0模块
    216           *    channel--ADC通道号，不同的通道号对应不同的引脚，注意有些通道并非都有ADC0或ADC1
    217           *      |__0            --ADC0:PGA0_DP;  ADC1:PGA1_DP
    218           *      |__1            --ADC0:PGA2_DP;  ADC1:PGA3_DP
    219           *      |__2            --ADC0:PGA0_DP;  ADC1:PGA1_DP
    220           *      |__3            --ADC0:ADC0_DP3; ADC1:PGA0_DP
    221           *      |__4            --ADC0:NC;       ADC1:PTE0
    222           *      |__5            --ADC0:NC;       ADC1:PTE1
    223           *      |__6            --ADC0:NC;       ADC1:PTE2
    224           *      |__7            --ADC0:NC;       ADC1:PTE3
    225           *      |__8            --ADC0:PTB0;     ADC1:PTB0
    226           *      |__9            --ADC0:PTB1;     ADC1:PTB1
    227           *      |__10           --ADC0:PTA7;    ADC1:PTB4
    228           *      |__11           --ADC0:PTA8;    ADC1:PTB5
    229           *      |__12           --ADC0:PTB2;    ADC1:PTB6
    230           *      |__13           --ADC0:PTB3;    ADC1:PTB7
    231           *      |__14           --ADC0:PTC0;    ADC1:PTB10
    232           *      |__15           --ADC0:PTC1;    ADC1:PTB11
    233           *      |__16           --ADC0:ADC0_SE16;ADC1:ADC1_SE16
    234           *      |__17           --ADC0:PTE24;   ADC1:PTA17
    235           *      |__18           --ADC0:PTE25;   ADC1:VREF Output
    236           *      |__19           --ADC0:PGA0_DM; ADC1:PGA1_DM
    237           *      |__20           --ADC0:PGA2_DM; ADC1:PGA3_DM
    238           *      |__23           --ADC0:DAC0_OUT;ADC1:DAC1_OUT
    239           *      |__26           --ADC0:Temperature Sensor;  ADC1:Temperature Sensor
    240           *      |__27           --ADC0:Bandgap; ADC1:Bandgap
    241           *      |__29           --ADC0:VREFH;   ADC1:VREFH
    242           *      |__30           --ADC0:VREFL;   ADC1:VREFL
    243           *
    244           * 输出:
    245           *    0--配置错误，或电压值为0
    246           *    其他--AD通道转换值，右对齐
    247           */

   \                                 In section .text, align 2, keep-with-next
    248          uint16 LPLD_ADC_SE_Get(ADCx adcx, uint8 channel)
    249          {
    250            ADC_MemMapPtr adcptr = ADCx_Ptr[adcx];
   \                     LPLD_ADC_SE_Get:
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0x.... 0x....      LDR.W    R2,??DataTable5_2
   \   00000006   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
    251            
    252            if(channel>30)
   \   0000000A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000C   0x291F             CMP      R1,#+31
   \   0000000E   0xD301             BCC.N    ??LPLD_ADC_SE_Get_0
    253              return 0;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xE034             B.N      ??LPLD_ADC_SE_Get_1
    254            
    255            //不同的通道对应不同的引脚，因此需要判断并配置
    256            if(adcx == ADC0)
   \                     ??LPLD_ADC_SE_Get_0:
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xF040 0x8090      BNE.W    ??LPLD_ADC_SE_Get_2
    257            {
    258              switch(channel)
   \   0000001C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000001E   0x0008             MOVS     R0,R1
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0x2803             CMP      R0,#+3
   \   00000024   0xD91C             BLS.N    ??LPLD_ADC_SE_Get_3
   \   00000026   0x3808             SUBS     R0,R0,#+8
   \   00000028   0x2801             CMP      R0,#+1
   \   0000002A   0xD929             BLS.N    ??LPLD_ADC_SE_Get_4
   \   0000002C   0x1E80             SUBS     R0,R0,#+2
   \   0000002E   0x2801             CMP      R0,#+1
   \   00000030   0xD938             BLS.N    ??LPLD_ADC_SE_Get_5
   \   00000032   0x1E80             SUBS     R0,R0,#+2
   \   00000034   0x2801             CMP      R0,#+1
   \   00000036   0xD948             BLS.N    ??LPLD_ADC_SE_Get_6
   \   00000038   0x1E80             SUBS     R0,R0,#+2
   \   0000003A   0x2801             CMP      R0,#+1
   \   0000003C   0xD957             BLS.N    ??LPLD_ADC_SE_Get_7
   \   0000003E   0x1E80             SUBS     R0,R0,#+2
   \   00000040   0xD067             BEQ.N    ??LPLD_ADC_SE_Get_8
   \   00000042   0x1E40             SUBS     R0,R0,#+1
   \   00000044   0x2801             CMP      R0,#+1
   \   00000046   0xD965             BLS.N    ??LPLD_ADC_SE_Get_9
   \   00000048   0x1E80             SUBS     R0,R0,#+2
   \   0000004A   0x2801             CMP      R0,#+1
   \   0000004C   0xD973             BLS.N    ??LPLD_ADC_SE_Get_10
   \   0000004E   0x1F00             SUBS     R0,R0,#+4
   \   00000050   0xD071             BEQ.N    ??LPLD_ADC_SE_Get_10
   \   00000052   0x1EC0             SUBS     R0,R0,#+3
   \   00000054   0x2801             CMP      R0,#+1
   \   00000056   0xD96E             BLS.N    ??LPLD_ADC_SE_Get_10
   \   00000058   0x1EC0             SUBS     R0,R0,#+3
   \   0000005A   0x2801             CMP      R0,#+1
   \   0000005C   0xD96B             BLS.N    ??LPLD_ADC_SE_Get_10
   \   0000005E   0xE06B             B.N      ??LPLD_ADC_SE_Get_11
    259              {
    260                case 0:   //ADC0_DP0 -- PGA0_DP
    261                case 1:   //ADC0_DP1 -- PGA2_DP
    262                case 2:   //PGA0_DP
    263                case 3:   //ADC0_DP3 -- PGA1_DP
    264                  break;
    265                case 8:  //ADC0_SE8 -- PTB0
    266                case 9:  //ADC0_SE9 -- PTB1
    267                  SIM_SCGC5 |= SIM_SCGC5_PORTB_MASK; 
    268                  PORT_PCR_REG(PORTB_BASE_PTR, channel-8) =  PORT_PCR_MUX(0);
    269                  break;
    270                case 10:  //ADC0_SE10 -- PTA7
    271                case 11:  //ADC0_SE11 -- PTA8
    272                  SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK; 
    273                  PORT_PCR_REG(PORTA_BASE_PTR, channel-3) =  PORT_PCR_MUX(0);
    274                  break;
    275                case 12:  //ADC0_SE12 -- PTB2
    276                case 13:  //ADC0_SE13 -- PTB3
    277                  SIM_SCGC5 |= SIM_SCGC5_PORTB_MASK; 
    278                  PORT_PCR_REG(PORTB_BASE_PTR, channel-10) =  PORT_PCR_MUX(0);
    279                  break;
    280                case 14:  //ADC0_SE14 -- PTC0
    281                case 15:  //ADC0_SE15 -- PTC1
    282                  SIM_SCGC5 |= SIM_SCGC5_PORTC_MASK; 
    283                  PORT_PCR_REG(PORTC_BASE_PTR, channel-14) =  PORT_PCR_MUX(0);
    284                  break;
    285                case 16:   //ADC0_SE16
    286                  break;
    287                case 17:   //ADC0_SE17 -- PTE24
    288                case 18:   //ADC0_SE17 -- PTE25
    289                  SIM_SCGC5 |= SIM_SCGC5_PORTE_MASK; 
    290                  PORT_PCR_REG(PORTE_BASE_PTR, channel+7) =  PORT_PCR_MUX(0);
    291                  break;
    292                case 19:   //ADC0_DM0 -- PGA0_DM
    293                case 20:   //ADC0_DM1 -- PGA2_DM
    294                case 23:   //ADC0_SE23 -- DAC0_OUT
    295                case 26:   //Temperature Sensor (S.E)
    296                case 27:   //Bandgap (S.E)
    297                case 29:   //VREFH (S.E)
    298                case 30:   //VREFL
    299                  break;
    300                default:
    301                  return 0;  
    302              }
    303            }
    304            else if(adcx == ADC1)
    305            {
    306              switch(channel)
    307              {
    308                case 0:   //ADC1_DP0 -- PGA1_DP
    309                case 1:   //ADC1_DP1 -- PGA3_DP
    310                case 2:   //PGA1_DP 
    311                case 3:   //ADC1_DP3 -- PGA0_DP
    312                  break;
    313                case 4:   //ADC1_SE4a -- PTE0
    314                case 5:   //ADC1_SE5a -- PTE1
    315                case 6:   //ADC1_SE6a -- PTE2
    316                case 7:   //ADC1_SE7a -- PTE3
    317                  SIM_SCGC5 |= SIM_SCGC5_PORTE_MASK; 
    318                  PORT_PCR_REG(PORTE_BASE_PTR, channel-4) =  PORT_PCR_MUX(0);
    319                  break;
    320                case 8:  //ADC1_SE8 -- PTB0
    321                case 9:  //ADC1_SE9 -- PTB1
    322                  SIM_SCGC5 |= SIM_SCGC5_PORTB_MASK; 
    323                  PORT_PCR_REG(PORTB_BASE_PTR, channel-8) =  PORT_PCR_MUX(0);
    324                  break;
    325                case 10:  //ADC1_SE10 -- PTB4
    326                case 11:  //ADC1_SE11 -- PTB5
    327                case 12:  //ADC1_SE12 -- PTB6
    328                case 13:  //ADC1_SE13 -- PTB7
    329                  SIM_SCGC5 |= SIM_SCGC5_PORTB_MASK; 
    330                  PORT_PCR_REG(PORTB_BASE_PTR, channel-6) =  PORT_PCR_MUX(0);
    331                  break;
    332                case 14:  //ADC1_SE14 -- PTB10
    333                case 15:  //ADC1_SE15 -- PTB11
    334                  SIM_SCGC5 |= SIM_SCGC5_PORTB_MASK; 
    335                  PORT_PCR_REG(PORTB_BASE_PTR, channel-4) =  PORT_PCR_MUX(0);
    336                  break;
    337                case 16:   //ADC1_SE16
    338                  break;
    339                case 17:  //ADC1_SE17 -- PTA17
    340                  SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK; 
    341                  PORT_PCR_REG(PORTA_BASE_PTR, channel) =  PORT_PCR_MUX(0);
    342                  break;
    343                case 18:   //VREF Output
    344                case 19:   //ADC1_DM0 -- PGA1_DM
    345                case 20:   //ADC1_DM1 -- PGA3_DM
    346                case 23:   //DAC1_OUT 
    347                case 26:   //Temperature Sensor (S.E)
    348                case 27:   //Bandgap (S.E)
    349                case 29:   //VREFH (S.E)
    350                case 30:   //VREFL
    351                  break;
    352                default:
    353                  return 0;  
    354              }
    355            }
    356            else
    357            {
    358              return 0;
    359            }
    360            
    361            ADC_SC1_REG(adcptr,0) &= ~(ADC_SC1_ADCH_MASK);
   \                     ??LPLD_ADC_SE_Get_3:
   \                     ??LPLD_ADC_SE_Get_12:
   \   00000060   0x6810             LDR      R0,[R2, #+0]
   \   00000062   0x0940             LSRS     R0,R0,#+5
   \   00000064   0x0140             LSLS     R0,R0,#+5
   \   00000066   0x6010             STR      R0,[R2, #+0]
    362            ADC_SC1_REG(adcptr,0) |= ADC_SC1_ADCH(channel);
   \   00000068   0x6810             LDR      R0,[R2, #+0]
   \   0000006A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000006C   0xF011 0x011F      ANDS     R1,R1,#0x1F
   \   00000070   0x4308             ORRS     R0,R1,R0
   \   00000072   0x6010             STR      R0,[R2, #+0]
    363            
    364            while((ADC_SC1_REG(adcptr,0)&ADC_SC1_COCO_MASK) == 0);  //等待转换完成
   \                     ??LPLD_ADC_SE_Get_13:
   \   00000074   0x6810             LDR      R0,[R2, #+0]
   \   00000076   0x0600             LSLS     R0,R0,#+24
   \   00000078   0xD5FC             BPL.N    ??LPLD_ADC_SE_Get_13
    365            return ADC_R_REG(adcptr, 0);
   \   0000007A   0x6910             LDR      R0,[R2, #+16]
   \   0000007C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \                     ??LPLD_ADC_SE_Get_1:
   \   0000007E   0x4770             BX       LR               ;; return
   \                     ??LPLD_ADC_SE_Get_4:
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable5_6  ;; 0x40048038
   \   00000084   0x6800             LDR      R0,[R0, #+0]
   \   00000086   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   0000008A   0x.... 0x....      LDR.W    R3,??DataTable5_6  ;; 0x40048038
   \   0000008E   0x6018             STR      R0,[R3, #+0]
   \   00000090   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000092   0x0088             LSLS     R0,R1,#+2
   \   00000094   0xF100 0x4080      ADD      R0,R0,#+1073741824
   \   00000098   0xF510 0x2094      ADDS     R0,R0,#+303104
   \   0000009C   0x2300             MOVS     R3,#+0
   \   0000009E   0xF840 0x3C20      STR      R3,[R0, #-32]
   \   000000A2   0xE7DD             B.N      ??LPLD_ADC_SE_Get_12
   \                     ??LPLD_ADC_SE_Get_5:
   \   000000A4   0x.... 0x....      LDR.W    R0,??DataTable5_6  ;; 0x40048038
   \   000000A8   0x6800             LDR      R0,[R0, #+0]
   \   000000AA   0xF44F 0x7300      MOV      R3,#+512
   \   000000AE   0x4318             ORRS     R0,R3,R0
   \   000000B0   0x.... 0x....      LDR.W    R3,??DataTable5_6  ;; 0x40048038
   \   000000B4   0x6018             STR      R0,[R3, #+0]
   \   000000B6   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000B8   0x0088             LSLS     R0,R1,#+2
   \   000000BA   0xF100 0x4080      ADD      R0,R0,#+1073741824
   \   000000BE   0xF510 0x2092      ADDS     R0,R0,#+299008
   \   000000C2   0x2300             MOVS     R3,#+0
   \   000000C4   0xF840 0x3C0C      STR      R3,[R0, #-12]
   \   000000C8   0xE7CA             B.N      ??LPLD_ADC_SE_Get_12
   \                     ??LPLD_ADC_SE_Get_6:
   \   000000CA   0x.... 0x....      LDR.W    R0,??DataTable5_6  ;; 0x40048038
   \   000000CE   0x6800             LDR      R0,[R0, #+0]
   \   000000D0   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   000000D4   0x.... 0x....      LDR.W    R3,??DataTable5_6  ;; 0x40048038
   \   000000D8   0x6018             STR      R0,[R3, #+0]
   \   000000DA   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000DC   0x0088             LSLS     R0,R1,#+2
   \   000000DE   0xF100 0x4080      ADD      R0,R0,#+1073741824
   \   000000E2   0xF510 0x2094      ADDS     R0,R0,#+303104
   \   000000E6   0x2300             MOVS     R3,#+0
   \   000000E8   0xF840 0x3C28      STR      R3,[R0, #-40]
   \   000000EC   0xE7B8             B.N      ??LPLD_ADC_SE_Get_12
   \                     ??LPLD_ADC_SE_Get_7:
   \   000000EE   0x.... 0x....      LDR.W    R0,??DataTable5_6  ;; 0x40048038
   \   000000F2   0x6800             LDR      R0,[R0, #+0]
   \   000000F4   0xF450 0x6000      ORRS     R0,R0,#0x800
   \   000000F8   0x.... 0x....      LDR.W    R3,??DataTable5_6  ;; 0x40048038
   \   000000FC   0x6018             STR      R0,[R3, #+0]
   \   000000FE   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000100   0x0088             LSLS     R0,R1,#+2
   \   00000102   0xF100 0x4080      ADD      R0,R0,#+1073741824
   \   00000106   0xF510 0x2096      ADDS     R0,R0,#+307200
   \   0000010A   0x2300             MOVS     R3,#+0
   \   0000010C   0xF840 0x3C38      STR      R3,[R0, #-56]
   \   00000110   0xE7A6             B.N      ??LPLD_ADC_SE_Get_12
   \                     ??LPLD_ADC_SE_Get_8:
   \   00000112   0xE7A5             B.N      ??LPLD_ADC_SE_Get_12
   \                     ??LPLD_ADC_SE_Get_9:
   \   00000114   0x.... 0x....      LDR.W    R0,??DataTable5_6  ;; 0x40048038
   \   00000118   0x6800             LDR      R0,[R0, #+0]
   \   0000011A   0xF450 0x5000      ORRS     R0,R0,#0x2000
   \   0000011E   0x.... 0x....      LDR.W    R3,??DataTable5_6  ;; 0x40048038
   \   00000122   0x6018             STR      R0,[R3, #+0]
   \   00000124   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000126   0x0088             LSLS     R0,R1,#+2
   \   00000128   0xF100 0x4080      ADD      R0,R0,#+1073741824
   \   0000012C   0xF510 0x209A      ADDS     R0,R0,#+315392
   \   00000130   0x2300             MOVS     R3,#+0
   \   00000132   0x61C3             STR      R3,[R0, #+28]
   \   00000134   0xE794             B.N      ??LPLD_ADC_SE_Get_12
   \                     ??LPLD_ADC_SE_Get_10:
   \   00000136   0xE793             B.N      ??LPLD_ADC_SE_Get_12
   \                     ??LPLD_ADC_SE_Get_11:
   \   00000138   0x2000             MOVS     R0,#+0
   \   0000013A   0xE7A0             B.N      ??LPLD_ADC_SE_Get_1
   \                     ??LPLD_ADC_SE_Get_2:
   \   0000013C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000013E   0x2801             CMP      R0,#+1
   \   00000140   0xD178             BNE.N    ??LPLD_ADC_SE_Get_14
   \   00000142   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000144   0x0008             MOVS     R0,R1
   \   00000146   0x2800             CMP      R0,#+0
   \   00000148   0x2803             CMP      R0,#+3
   \   0000014A   0xD91B             BLS.N    ??LPLD_ADC_SE_Get_15
   \   0000014C   0x1F00             SUBS     R0,R0,#+4
   \   0000014E   0x2803             CMP      R0,#+3
   \   00000150   0xD919             BLS.N    ??LPLD_ADC_SE_Get_16
   \   00000152   0x1F00             SUBS     R0,R0,#+4
   \   00000154   0x2801             CMP      R0,#+1
   \   00000156   0xD928             BLS.N    ??LPLD_ADC_SE_Get_17
   \   00000158   0x1E80             SUBS     R0,R0,#+2
   \   0000015A   0x2803             CMP      R0,#+3
   \   0000015C   0xD937             BLS.N    ??LPLD_ADC_SE_Get_18
   \   0000015E   0x1F00             SUBS     R0,R0,#+4
   \   00000160   0x2801             CMP      R0,#+1
   \   00000162   0xD946             BLS.N    ??LPLD_ADC_SE_Get_19
   \   00000164   0x1E80             SUBS     R0,R0,#+2
   \   00000166   0xD054             BEQ.N    ??LPLD_ADC_SE_Get_20
   \   00000168   0x1E40             SUBS     R0,R0,#+1
   \   0000016A   0xD053             BEQ.N    ??LPLD_ADC_SE_Get_21
   \   0000016C   0x1E40             SUBS     R0,R0,#+1
   \   0000016E   0x2802             CMP      R0,#+2
   \   00000170   0xD95D             BLS.N    ??LPLD_ADC_SE_Get_22
   \   00000172   0x1F40             SUBS     R0,R0,#+5
   \   00000174   0xD05B             BEQ.N    ??LPLD_ADC_SE_Get_22
   \   00000176   0x1EC0             SUBS     R0,R0,#+3
   \   00000178   0x2801             CMP      R0,#+1
   \   0000017A   0xD958             BLS.N    ??LPLD_ADC_SE_Get_22
   \   0000017C   0x1EC0             SUBS     R0,R0,#+3
   \   0000017E   0x2801             CMP      R0,#+1
   \   00000180   0xD955             BLS.N    ??LPLD_ADC_SE_Get_22
   \   00000182   0xE055             B.N      ??LPLD_ADC_SE_Get_23
   \                     ??LPLD_ADC_SE_Get_15:
   \   00000184   0xE76C             B.N      ??LPLD_ADC_SE_Get_12
   \                     ??LPLD_ADC_SE_Get_16:
   \   00000186   0x.... 0x....      LDR.W    R0,??DataTable5_6  ;; 0x40048038
   \   0000018A   0x6800             LDR      R0,[R0, #+0]
   \   0000018C   0xF450 0x5000      ORRS     R0,R0,#0x2000
   \   00000190   0x.... 0x....      LDR.W    R3,??DataTable5_6  ;; 0x40048038
   \   00000194   0x6018             STR      R0,[R3, #+0]
   \   00000196   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000198   0x0088             LSLS     R0,R1,#+2
   \   0000019A   0xF100 0x4080      ADD      R0,R0,#+1073741824
   \   0000019E   0xF510 0x209A      ADDS     R0,R0,#+315392
   \   000001A2   0x2300             MOVS     R3,#+0
   \   000001A4   0xF840 0x3C10      STR      R3,[R0, #-16]
   \   000001A8   0xE75A             B.N      ??LPLD_ADC_SE_Get_12
   \                     ??LPLD_ADC_SE_Get_17:
   \   000001AA   0x.... 0x....      LDR.W    R0,??DataTable5_6  ;; 0x40048038
   \   000001AE   0x6800             LDR      R0,[R0, #+0]
   \   000001B0   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   000001B4   0x.... 0x....      LDR.W    R3,??DataTable5_6  ;; 0x40048038
   \   000001B8   0x6018             STR      R0,[R3, #+0]
   \   000001BA   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000001BC   0x0088             LSLS     R0,R1,#+2
   \   000001BE   0xF100 0x4080      ADD      R0,R0,#+1073741824
   \   000001C2   0xF510 0x2094      ADDS     R0,R0,#+303104
   \   000001C6   0x2300             MOVS     R3,#+0
   \   000001C8   0xF840 0x3C20      STR      R3,[R0, #-32]
   \   000001CC   0xE748             B.N      ??LPLD_ADC_SE_Get_12
   \                     ??LPLD_ADC_SE_Get_18:
   \   000001CE   0x.... 0x....      LDR.W    R0,??DataTable5_6  ;; 0x40048038
   \   000001D2   0x6800             LDR      R0,[R0, #+0]
   \   000001D4   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   000001D8   0x.... 0x....      LDR.W    R3,??DataTable5_6  ;; 0x40048038
   \   000001DC   0x6018             STR      R0,[R3, #+0]
   \   000001DE   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000001E0   0x0088             LSLS     R0,R1,#+2
   \   000001E2   0xF100 0x4080      ADD      R0,R0,#+1073741824
   \   000001E6   0xF510 0x2094      ADDS     R0,R0,#+303104
   \   000001EA   0x2300             MOVS     R3,#+0
   \   000001EC   0xF840 0x3C18      STR      R3,[R0, #-24]
   \   000001F0   0xE736             B.N      ??LPLD_ADC_SE_Get_12
   \                     ??LPLD_ADC_SE_Get_19:
   \   000001F2   0x....             LDR.N    R0,??DataTable5_6  ;; 0x40048038
   \   000001F4   0x6800             LDR      R0,[R0, #+0]
   \   000001F6   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   000001FA   0x....             LDR.N    R3,??DataTable5_6  ;; 0x40048038
   \   000001FC   0x6018             STR      R0,[R3, #+0]
   \   000001FE   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000200   0x0088             LSLS     R0,R1,#+2
   \   00000202   0xF100 0x4080      ADD      R0,R0,#+1073741824
   \   00000206   0xF510 0x2094      ADDS     R0,R0,#+303104
   \   0000020A   0x2300             MOVS     R3,#+0
   \   0000020C   0xF840 0x3C10      STR      R3,[R0, #-16]
   \   00000210   0xE726             B.N      ??LPLD_ADC_SE_Get_12
   \                     ??LPLD_ADC_SE_Get_20:
   \   00000212   0xE725             B.N      ??LPLD_ADC_SE_Get_12
   \                     ??LPLD_ADC_SE_Get_21:
   \   00000214   0x....             LDR.N    R0,??DataTable5_6  ;; 0x40048038
   \   00000216   0x6800             LDR      R0,[R0, #+0]
   \   00000218   0xF44F 0x7300      MOV      R3,#+512
   \   0000021C   0x4318             ORRS     R0,R3,R0
   \   0000021E   0x....             LDR.N    R3,??DataTable5_6  ;; 0x40048038
   \   00000220   0x6018             STR      R0,[R3, #+0]
   \   00000222   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000224   0x....             LDR.N    R0,??DataTable5_7  ;; 0x40049000
   \   00000226   0x2300             MOVS     R3,#+0
   \   00000228   0xF840 0x3021      STR      R3,[R0, R1, LSL #+2]
   \   0000022C   0xE718             B.N      ??LPLD_ADC_SE_Get_12
   \                     ??LPLD_ADC_SE_Get_22:
   \   0000022E   0xE717             B.N      ??LPLD_ADC_SE_Get_12
   \                     ??LPLD_ADC_SE_Get_23:
   \   00000230   0x2000             MOVS     R0,#+0
   \   00000232   0xE724             B.N      ??LPLD_ADC_SE_Get_1
   \                     ??LPLD_ADC_SE_Get_14:
   \   00000234   0x2000             MOVS     R0,#+0
   \   00000236   0xE722             B.N      ??LPLD_ADC_SE_Get_1
    366          }
    367          
    368          
    369          /*
    370           * LPLD_ADC_Channel_Init
    371           * ADC通道初始化,在该函数中配置ADC的输入通道，配置ADC中断、DMA请求，和相应的中断服务函数
    372           * 
    373           * 参数:
    374           *    adcx--ADC模块号
    375           *      |__ADC0         -ADC0模块
    376           *      |__ADC1         -ADC0模块
    377           *    channel--ADC通道号，不同的通道号对应不同的引脚，注意有些通道并非都有ADC0或ADC1
    378           *      |__0            --ADC0:PGA0_DP;  ADC1:PGA1_DP
    379           *      |__1            --ADC0:PGA2_DP;  ADC1:PGA3_DP
    380           *      |__2            --ADC0:PGA0_DP;  ADC1:PGA1_DP
    381           *      |__3            --ADC0:ADC0_DP3; ADC1:PGA0_DP
    382           *      |__4            --ADC0:NC;       ADC1:PTE0
    383           *      |__5            --ADC0:NC;       ADC1:PTE1
    384           *      |__6            --ADC0:NC;       ADC1:PTE2
    385           *      |__7            --ADC0:NC;       ADC1:PTE3
    386           *      |__8            --ADC0:PTB0;     ADC1:PTB0
    387           *      |__9            --ADC0:PTB1;     ADC1:PTB1
    388           *      |__10           --ADC0:PTA7;    ADC1:PTB4
    389           *      |__11           --ADC0:PTA8;    ADC1:PTB5
    390           *      |__12           --ADC0:PTB2;    ADC1:PTB6
    391           *      |__13           --ADC0:PTB3;    ADC1:PTB7
    392           *      |__14           --ADC0:PTC0;    ADC1:PTB10
    393           *      |__15           --ADC0:PTC1;    ADC1:PTB11
    394           *      |__16           --ADC0:ADC0_SE16;ADC1:ADC1_SE16
    395           *      |__17           --ADC0:PTE24;   ADC1:PTA17
    396           *      |__18           --ADC0:PTE25;   ADC1:VREF Output
    397           *      |__19           --ADC0:PGA0_DM; ADC1:PGA1_DM
    398           *      |__20           --ADC0:PGA2_DM; ADC1:PGA3_DM
    399           *      |__23           --ADC0:DAC0_OUT;ADC1:DAC1_OUT
    400           *      |__26           --ADC0:Temperature Sensor;  ADC1:Temperature Sensor
    401           *      |__27           --ADC0:Bandgap; ADC1:Bandgap
    402           *      |__29           --ADC0:VREFH;   ADC1:VREFH
    403           *      |__30           --ADC0:VREFL;   ADC1:VREFL
    404           *  ad_event--ADC事件，包括ADC中断禁止、使能，DMA请求禁止、使能。
    405           *      |__ADC_INT_DISABLE    --中断禁止
    406           *      |__ADC_INT_ENABLE     --中断使能
    407           *      |__ADC_DMA_DISABLE    --DMA请求禁止
    408           *      |__ADC_DMA_ENABLE     --DMA请求使能
    409           *
    410           *  ADC_ISR_CALLBACK
    411           *      |__isr                --如果使能中断，设置中断服务函数的路径，
    412           *                              如果没有设置中断，将其设置成为NULL
    413           * 输出:
    414           *    0--配置错误，或电压值为0
    415           *    其他--AD通道转换值，右对齐
    416           */

   \                                 In section .text, align 2, keep-with-next
    417          uint8_t LPLD_ADC_Channel_Init(ADCx adcx, uint8_t channel ,uint8_t ad_event,ADC_ISR_CALLBACK isr)
    418          {
   \                     LPLD_ADC_Channel_Init:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x000C             MOVS     R4,R1
   \   00000004   0x0015             MOVS     R5,R2
   \   00000006   0x001F             MOVS     R7,R3
    419            ADC_MemMapPtr adcptr = ADCx_Ptr[adcx];
   \   00000008   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000A   0x....             LDR.N    R1,??DataTable5_2
   \   0000000C   0xF851 0x6020      LDR      R6,[R1, R0, LSL #+2]
    420            
    421            if(channel>30)
   \   00000010   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000012   0x2C1F             CMP      R4,#+31
   \   00000014   0xD301             BCC.N    ??LPLD_ADC_Channel_Init_0
    422              return 0;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xE124             B.N      ??LPLD_ADC_Channel_Init_1
    423            
    424            //不同的通道对应不同的引脚，因此需要判断并配置
    425            if(adcx == ADC0)
   \                     ??LPLD_ADC_Channel_Init_0:
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD17D             BNE.N    ??LPLD_ADC_Channel_Init_2
    426            {
    427              switch(channel)
   \   00000020   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000022   0x0021             MOVS     R1,R4
   \   00000024   0x2900             CMP      R1,#+0
   \   00000026   0x2903             CMP      R1,#+3
   \   00000028   0xD91C             BLS.N    ??LPLD_ADC_Channel_Init_3
   \   0000002A   0x3908             SUBS     R1,R1,#+8
   \   0000002C   0x2901             CMP      R1,#+1
   \   0000002E   0xD921             BLS.N    ??LPLD_ADC_Channel_Init_4
   \   00000030   0x1E89             SUBS     R1,R1,#+2
   \   00000032   0x2901             CMP      R1,#+1
   \   00000034   0xD92E             BLS.N    ??LPLD_ADC_Channel_Init_5
   \   00000036   0x1E89             SUBS     R1,R1,#+2
   \   00000038   0x2901             CMP      R1,#+1
   \   0000003A   0xD93C             BLS.N    ??LPLD_ADC_Channel_Init_6
   \   0000003C   0x1E89             SUBS     R1,R1,#+2
   \   0000003E   0x2901             CMP      R1,#+1
   \   00000040   0xD949             BLS.N    ??LPLD_ADC_Channel_Init_7
   \   00000042   0x1E89             SUBS     R1,R1,#+2
   \   00000044   0xD057             BEQ.N    ??LPLD_ADC_Channel_Init_8
   \   00000046   0x1E49             SUBS     R1,R1,#+1
   \   00000048   0x2901             CMP      R1,#+1
   \   0000004A   0xD955             BLS.N    ??LPLD_ADC_Channel_Init_9
   \   0000004C   0x1E89             SUBS     R1,R1,#+2
   \   0000004E   0x2901             CMP      R1,#+1
   \   00000050   0xD961             BLS.N    ??LPLD_ADC_Channel_Init_10
   \   00000052   0x1F09             SUBS     R1,R1,#+4
   \   00000054   0xD05F             BEQ.N    ??LPLD_ADC_Channel_Init_10
   \   00000056   0x1EC9             SUBS     R1,R1,#+3
   \   00000058   0x2901             CMP      R1,#+1
   \   0000005A   0xD95C             BLS.N    ??LPLD_ADC_Channel_Init_10
   \   0000005C   0x1EC9             SUBS     R1,R1,#+3
   \   0000005E   0x2901             CMP      R1,#+1
   \   00000060   0xD959             BLS.N    ??LPLD_ADC_Channel_Init_10
   \   00000062   0xE059             B.N      ??LPLD_ADC_Channel_Init_11
    428              {
    429                case 0:   //ADC0_DP0 -- PGA0_DP
    430                case 1:   //ADC0_DP1 -- PGA2_DP
    431                case 2:   //PGA0_DP
    432                case 3:   //ADC0_DP3 -- PGA1_DP
    433                  break;
    434                case 8:  //ADC0_SE8 -- PTB0
    435                case 9:  //ADC0_SE9 -- PTB1
    436                  SIM_SCGC5 |= SIM_SCGC5_PORTB_MASK; 
    437                  PORT_PCR_REG(PORTB_BASE_PTR, channel-8) =  PORT_PCR_MUX(0);
    438                  break;
    439                case 10:  //ADC0_SE10 -- PTA7
    440                case 11:  //ADC0_SE11 -- PTA8
    441                  SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK; 
    442                  PORT_PCR_REG(PORTA_BASE_PTR, channel-3) =  PORT_PCR_MUX(0);
    443                  break;
    444                case 12:  //ADC0_SE12 -- PTB2
    445                case 13:  //ADC0_SE13 -- PTB3
    446                  SIM_SCGC5 |= SIM_SCGC5_PORTB_MASK; 
    447                  PORT_PCR_REG(PORTB_BASE_PTR, channel-10) =  PORT_PCR_MUX(0);
    448                  break;
    449                case 14:  //ADC0_SE14 -- PTC0
    450                case 15:  //ADC0_SE15 -- PTC1
    451                  SIM_SCGC5 |= SIM_SCGC5_PORTC_MASK; 
    452                  PORT_PCR_REG(PORTC_BASE_PTR, channel-14) =  PORT_PCR_MUX(0);
    453                  break;
    454                case 16:   //ADC0_SE16
    455                  break;
    456                case 17:   //ADC0_SE17 -- PTE24
    457                case 18:   //ADC0_SE17 -- PTE25
    458                  SIM_SCGC5 |= SIM_SCGC5_PORTE_MASK; 
    459                  PORT_PCR_REG(PORTE_BASE_PTR, channel+7) =  PORT_PCR_MUX(0);
    460                  break;
    461                case 19:   //ADC0_DM0 -- PGA0_DM
    462                case 20:   //ADC0_DM1 -- PGA2_DM
    463                case 23:   //ADC0_SE23 -- DAC0_OUT
    464                case 26:   //Temperature Sensor (S.E)
    465                case 27:   //Bandgap (S.E)
    466                case 29:   //VREFH (S.E)
    467                case 30:   //VREFL
    468                  break;
    469                default:
    470                  return 0;  
    471              }
    472            }
    473            else if(adcx == ADC1)
    474            {
    475              switch(channel)
    476              {
    477                case 0:   //ADC1_DP0 -- PGA1_DP
    478                case 1:   //ADC1_DP1 -- PGA3_DP
    479                case 2:   //PGA1_DP 
    480                case 3:   //ADC1_DP3 -- PGA0_DP
    481                  break;
    482                case 4:   //ADC1_SE4a -- PTE0
    483                case 5:   //ADC1_SE5a -- PTE1
    484                case 6:   //ADC1_SE6a -- PTE2
    485                case 7:   //ADC1_SE7a -- PTE3
    486                  SIM_SCGC5 |= SIM_SCGC5_PORTE_MASK; 
    487                  PORT_PCR_REG(PORTE_BASE_PTR, channel-4) =  PORT_PCR_MUX(0);
    488                  break;
    489                case 8:  //ADC1_SE8 -- PTB0
    490                case 9:  //ADC1_SE9 -- PTB1
    491                  SIM_SCGC5 |= SIM_SCGC5_PORTB_MASK; 
    492                  PORT_PCR_REG(PORTB_BASE_PTR, channel-8) =  PORT_PCR_MUX(0);
    493                  break;
    494                case 10:  //ADC1_SE10 -- PTB4
    495                case 11:  //ADC1_SE11 -- PTB5
    496                case 12:  //ADC1_SE12 -- PTB6
    497                case 13:  //ADC1_SE13 -- PTB7
    498                  SIM_SCGC5 |= SIM_SCGC5_PORTB_MASK; 
    499                  PORT_PCR_REG(PORTB_BASE_PTR, channel-6) =  PORT_PCR_MUX(0);
    500                  break;
    501                case 14:  //ADC1_SE14 -- PTB10
    502                case 15:  //ADC1_SE15 -- PTB11
    503                  SIM_SCGC5 |= SIM_SCGC5_PORTB_MASK; 
    504                  PORT_PCR_REG(PORTB_BASE_PTR, channel-4) =  PORT_PCR_MUX(0);
    505                  break;
    506                case 16:   //ADC1_SE16
    507                  break;
    508                case 17:  //ADC1_SE17 -- PTA17
    509                  SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK; 
    510                  PORT_PCR_REG(PORTA_BASE_PTR, channel) =  PORT_PCR_MUX(0);
    511                  break;
    512                case 18:   //VREF Output
    513                case 19:   //ADC1_DM0 -- PGA1_DM
    514                case 20:   //ADC1_DM1 -- PGA3_DM
    515                case 23:   //DAC1_OUT 
    516                case 26:   //Temperature Sensor (S.E)
    517                case 27:   //Bandgap (S.E)
    518                case 29:   //VREFH (S.E)
    519                case 30:   //VREFL
    520                  break;
    521                default:
    522                  return 0;  
    523              }
    524            }
    525            else
    526            {
    527              return 0;
    528            }
    529            
    530            if(ad_event & ADC_INT_DISABLE)
   \                     ??LPLD_ADC_Channel_Init_3:
   \                     ??LPLD_ADC_Channel_Init_12:
   \   00000064   0x07E9             LSLS     R1,R5,#+31
   \   00000066   0xF140 0x80D1      BPL.W    ??LPLD_ADC_Channel_Init_13
    531            {
    532              ADC_SC1_REG(adcptr,0) &= ~(ADC_SC1_AIEN_MASK); //禁止中断
   \   0000006A   0x6830             LDR      R0,[R6, #+0]
   \   0000006C   0xF030 0x0040      BICS     R0,R0,#0x40
   \   00000070   0x6030             STR      R0,[R6, #+0]
   \   00000072   0xE0DF             B.N      ??LPLD_ADC_Channel_Init_14
    533            }
   \                     ??LPLD_ADC_Channel_Init_4:
   \   00000074   0x....             LDR.N    R1,??DataTable5_6  ;; 0x40048038
   \   00000076   0x6809             LDR      R1,[R1, #+0]
   \   00000078   0xF451 0x6180      ORRS     R1,R1,#0x400
   \   0000007C   0x....             LDR.N    R2,??DataTable5_6  ;; 0x40048038
   \   0000007E   0x6011             STR      R1,[R2, #+0]
   \   00000080   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000082   0x00A1             LSLS     R1,R4,#+2
   \   00000084   0xF101 0x4180      ADD      R1,R1,#+1073741824
   \   00000088   0xF511 0x2194      ADDS     R1,R1,#+303104
   \   0000008C   0x2200             MOVS     R2,#+0
   \   0000008E   0xF841 0x2C20      STR      R2,[R1, #-32]
   \   00000092   0xE7E7             B.N      ??LPLD_ADC_Channel_Init_12
   \                     ??LPLD_ADC_Channel_Init_5:
   \   00000094   0x....             LDR.N    R1,??DataTable5_6  ;; 0x40048038
   \   00000096   0x6809             LDR      R1,[R1, #+0]
   \   00000098   0xF44F 0x7200      MOV      R2,#+512
   \   0000009C   0x4311             ORRS     R1,R2,R1
   \   0000009E   0x....             LDR.N    R2,??DataTable5_6  ;; 0x40048038
   \   000000A0   0x6011             STR      R1,[R2, #+0]
   \   000000A2   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000A4   0x00A1             LSLS     R1,R4,#+2
   \   000000A6   0xF101 0x4180      ADD      R1,R1,#+1073741824
   \   000000AA   0xF511 0x2192      ADDS     R1,R1,#+299008
   \   000000AE   0x2200             MOVS     R2,#+0
   \   000000B0   0xF841 0x2C0C      STR      R2,[R1, #-12]
   \   000000B4   0xE7D6             B.N      ??LPLD_ADC_Channel_Init_12
   \                     ??LPLD_ADC_Channel_Init_6:
   \   000000B6   0x....             LDR.N    R1,??DataTable5_6  ;; 0x40048038
   \   000000B8   0x6809             LDR      R1,[R1, #+0]
   \   000000BA   0xF451 0x6180      ORRS     R1,R1,#0x400
   \   000000BE   0x....             LDR.N    R2,??DataTable5_6  ;; 0x40048038
   \   000000C0   0x6011             STR      R1,[R2, #+0]
   \   000000C2   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000C4   0x00A1             LSLS     R1,R4,#+2
   \   000000C6   0xF101 0x4180      ADD      R1,R1,#+1073741824
   \   000000CA   0xF511 0x2194      ADDS     R1,R1,#+303104
   \   000000CE   0x2200             MOVS     R2,#+0
   \   000000D0   0xF841 0x2C28      STR      R2,[R1, #-40]
   \   000000D4   0xE7C6             B.N      ??LPLD_ADC_Channel_Init_12
   \                     ??LPLD_ADC_Channel_Init_7:
   \   000000D6   0x....             LDR.N    R1,??DataTable5_6  ;; 0x40048038
   \   000000D8   0x6809             LDR      R1,[R1, #+0]
   \   000000DA   0xF451 0x6100      ORRS     R1,R1,#0x800
   \   000000DE   0x....             LDR.N    R2,??DataTable5_6  ;; 0x40048038
   \   000000E0   0x6011             STR      R1,[R2, #+0]
   \   000000E2   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000E4   0x00A1             LSLS     R1,R4,#+2
   \   000000E6   0xF101 0x4180      ADD      R1,R1,#+1073741824
   \   000000EA   0xF511 0x2196      ADDS     R1,R1,#+307200
   \   000000EE   0x2200             MOVS     R2,#+0
   \   000000F0   0xF841 0x2C38      STR      R2,[R1, #-56]
   \   000000F4   0xE7B6             B.N      ??LPLD_ADC_Channel_Init_12
   \                     ??LPLD_ADC_Channel_Init_8:
   \   000000F6   0xE7B5             B.N      ??LPLD_ADC_Channel_Init_12
   \                     ??LPLD_ADC_Channel_Init_9:
   \   000000F8   0x....             LDR.N    R1,??DataTable5_6  ;; 0x40048038
   \   000000FA   0x6809             LDR      R1,[R1, #+0]
   \   000000FC   0xF451 0x5100      ORRS     R1,R1,#0x2000
   \   00000100   0x....             LDR.N    R2,??DataTable5_6  ;; 0x40048038
   \   00000102   0x6011             STR      R1,[R2, #+0]
   \   00000104   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000106   0x00A1             LSLS     R1,R4,#+2
   \   00000108   0xF101 0x4180      ADD      R1,R1,#+1073741824
   \   0000010C   0xF511 0x219A      ADDS     R1,R1,#+315392
   \   00000110   0x2200             MOVS     R2,#+0
   \   00000112   0x61CA             STR      R2,[R1, #+28]
   \   00000114   0xE7A6             B.N      ??LPLD_ADC_Channel_Init_12
   \                     ??LPLD_ADC_Channel_Init_10:
   \   00000116   0xE7A5             B.N      ??LPLD_ADC_Channel_Init_12
   \                     ??LPLD_ADC_Channel_Init_11:
   \   00000118   0x2000             MOVS     R0,#+0
   \   0000011A   0xE0A3             B.N      ??LPLD_ADC_Channel_Init_1
   \                     ??LPLD_ADC_Channel_Init_2:
   \   0000011C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000011E   0x2801             CMP      R0,#+1
   \   00000120   0xD172             BNE.N    ??LPLD_ADC_Channel_Init_15
   \   00000122   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000124   0x0021             MOVS     R1,R4
   \   00000126   0x2900             CMP      R1,#+0
   \   00000128   0x2903             CMP      R1,#+3
   \   0000012A   0xD91B             BLS.N    ??LPLD_ADC_Channel_Init_16
   \   0000012C   0x1F09             SUBS     R1,R1,#+4
   \   0000012E   0x2903             CMP      R1,#+3
   \   00000130   0xD919             BLS.N    ??LPLD_ADC_Channel_Init_17
   \   00000132   0x1F09             SUBS     R1,R1,#+4
   \   00000134   0x2901             CMP      R1,#+1
   \   00000136   0xD926             BLS.N    ??LPLD_ADC_Channel_Init_18
   \   00000138   0x1E89             SUBS     R1,R1,#+2
   \   0000013A   0x2903             CMP      R1,#+3
   \   0000013C   0xD933             BLS.N    ??LPLD_ADC_Channel_Init_19
   \   0000013E   0x1F09             SUBS     R1,R1,#+4
   \   00000140   0x2901             CMP      R1,#+1
   \   00000142   0xD940             BLS.N    ??LPLD_ADC_Channel_Init_20
   \   00000144   0x1E89             SUBS     R1,R1,#+2
   \   00000146   0xD04E             BEQ.N    ??LPLD_ADC_Channel_Init_21
   \   00000148   0x1E49             SUBS     R1,R1,#+1
   \   0000014A   0xD04D             BEQ.N    ??LPLD_ADC_Channel_Init_22
   \   0000014C   0x1E49             SUBS     R1,R1,#+1
   \   0000014E   0x2902             CMP      R1,#+2
   \   00000150   0xD957             BLS.N    ??LPLD_ADC_Channel_Init_23
   \   00000152   0x1F49             SUBS     R1,R1,#+5
   \   00000154   0xD055             BEQ.N    ??LPLD_ADC_Channel_Init_23
   \   00000156   0x1EC9             SUBS     R1,R1,#+3
   \   00000158   0x2901             CMP      R1,#+1
   \   0000015A   0xD952             BLS.N    ??LPLD_ADC_Channel_Init_23
   \   0000015C   0x1EC9             SUBS     R1,R1,#+3
   \   0000015E   0x2901             CMP      R1,#+1
   \   00000160   0xD94F             BLS.N    ??LPLD_ADC_Channel_Init_23
   \   00000162   0xE04F             B.N      ??LPLD_ADC_Channel_Init_24
   \                     ??LPLD_ADC_Channel_Init_16:
   \   00000164   0xE77E             B.N      ??LPLD_ADC_Channel_Init_12
   \                     ??LPLD_ADC_Channel_Init_17:
   \   00000166   0x....             LDR.N    R1,??DataTable5_6  ;; 0x40048038
   \   00000168   0x6809             LDR      R1,[R1, #+0]
   \   0000016A   0xF451 0x5100      ORRS     R1,R1,#0x2000
   \   0000016E   0x....             LDR.N    R2,??DataTable5_6  ;; 0x40048038
   \   00000170   0x6011             STR      R1,[R2, #+0]
   \   00000172   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000174   0x00A1             LSLS     R1,R4,#+2
   \   00000176   0xF101 0x4180      ADD      R1,R1,#+1073741824
   \   0000017A   0xF511 0x219A      ADDS     R1,R1,#+315392
   \   0000017E   0x2200             MOVS     R2,#+0
   \   00000180   0xF841 0x2C10      STR      R2,[R1, #-16]
   \   00000184   0xE76E             B.N      ??LPLD_ADC_Channel_Init_12
   \                     ??LPLD_ADC_Channel_Init_18:
   \   00000186   0x....             LDR.N    R1,??DataTable5_6  ;; 0x40048038
   \   00000188   0x6809             LDR      R1,[R1, #+0]
   \   0000018A   0xF451 0x6180      ORRS     R1,R1,#0x400
   \   0000018E   0x....             LDR.N    R2,??DataTable5_6  ;; 0x40048038
   \   00000190   0x6011             STR      R1,[R2, #+0]
   \   00000192   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000194   0x00A1             LSLS     R1,R4,#+2
   \   00000196   0xF101 0x4180      ADD      R1,R1,#+1073741824
   \   0000019A   0xF511 0x2194      ADDS     R1,R1,#+303104
   \   0000019E   0x2200             MOVS     R2,#+0
   \   000001A0   0xF841 0x2C20      STR      R2,[R1, #-32]
   \   000001A4   0xE75E             B.N      ??LPLD_ADC_Channel_Init_12
   \                     ??LPLD_ADC_Channel_Init_19:
   \   000001A6   0x....             LDR.N    R1,??DataTable5_6  ;; 0x40048038
   \   000001A8   0x6809             LDR      R1,[R1, #+0]
   \   000001AA   0xF451 0x6180      ORRS     R1,R1,#0x400
   \   000001AE   0x....             LDR.N    R2,??DataTable5_6  ;; 0x40048038
   \   000001B0   0x6011             STR      R1,[R2, #+0]
   \   000001B2   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001B4   0x00A1             LSLS     R1,R4,#+2
   \   000001B6   0xF101 0x4180      ADD      R1,R1,#+1073741824
   \   000001BA   0xF511 0x2194      ADDS     R1,R1,#+303104
   \   000001BE   0x2200             MOVS     R2,#+0
   \   000001C0   0xF841 0x2C18      STR      R2,[R1, #-24]
   \   000001C4   0xE74E             B.N      ??LPLD_ADC_Channel_Init_12
   \                     ??LPLD_ADC_Channel_Init_20:
   \   000001C6   0x....             LDR.N    R1,??DataTable5_6  ;; 0x40048038
   \   000001C8   0x6809             LDR      R1,[R1, #+0]
   \   000001CA   0xF451 0x6180      ORRS     R1,R1,#0x400
   \   000001CE   0x....             LDR.N    R2,??DataTable5_6  ;; 0x40048038
   \   000001D0   0x6011             STR      R1,[R2, #+0]
   \   000001D2   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001D4   0x00A1             LSLS     R1,R4,#+2
   \   000001D6   0xF101 0x4180      ADD      R1,R1,#+1073741824
   \   000001DA   0xF511 0x2194      ADDS     R1,R1,#+303104
   \   000001DE   0x2200             MOVS     R2,#+0
   \   000001E0   0xF841 0x2C10      STR      R2,[R1, #-16]
   \   000001E4   0xE73E             B.N      ??LPLD_ADC_Channel_Init_12
   \                     ??LPLD_ADC_Channel_Init_21:
   \   000001E6   0xE73D             B.N      ??LPLD_ADC_Channel_Init_12
   \                     ??LPLD_ADC_Channel_Init_22:
   \   000001E8   0x....             LDR.N    R1,??DataTable5_6  ;; 0x40048038
   \   000001EA   0x6809             LDR      R1,[R1, #+0]
   \   000001EC   0xF44F 0x7200      MOV      R2,#+512
   \   000001F0   0x4311             ORRS     R1,R2,R1
   \   000001F2   0x....             LDR.N    R2,??DataTable5_6  ;; 0x40048038
   \   000001F4   0x6011             STR      R1,[R2, #+0]
   \   000001F6   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000001F8   0x....             LDR.N    R1,??DataTable5_7  ;; 0x40049000
   \   000001FA   0x2200             MOVS     R2,#+0
   \   000001FC   0xF841 0x2024      STR      R2,[R1, R4, LSL #+2]
   \   00000200   0xE730             B.N      ??LPLD_ADC_Channel_Init_12
   \                     ??LPLD_ADC_Channel_Init_23:
   \   00000202   0xE72F             B.N      ??LPLD_ADC_Channel_Init_12
   \                     ??LPLD_ADC_Channel_Init_24:
   \   00000204   0x2000             MOVS     R0,#+0
   \   00000206   0xE02D             B.N      ??LPLD_ADC_Channel_Init_1
   \                     ??LPLD_ADC_Channel_Init_15:
   \   00000208   0x2000             MOVS     R0,#+0
   \   0000020A   0xE02B             B.N      ??LPLD_ADC_Channel_Init_1
    534            else if(ad_event & ADC_INT_ENABLE)
   \                     ??LPLD_ADC_Channel_Init_13:
   \   0000020C   0x07A9             LSLS     R1,R5,#+30
   \   0000020E   0xD511             BPL.N    ??LPLD_ADC_Channel_Init_14
    535            {
    536              ADC_SC1_REG(adcptr,0) |= ADC_SC1_AIEN_MASK;   //使能中断
   \   00000210   0x6831             LDR      R1,[R6, #+0]
   \   00000212   0xF051 0x0140      ORRS     R1,R1,#0x40
   \   00000216   0x6031             STR      R1,[R6, #+0]
    537              if(adcx == ADC0)
   \   00000218   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000021A   0x2800             CMP      R0,#+0
   \   0000021C   0xD105             BNE.N    ??LPLD_ADC_Channel_Init_25
    538              {
    539                enable_irq(57);      //使能ADC0 NVIC中断
   \   0000021E   0x2039             MOVS     R0,#+57
   \   00000220   0x.... 0x....      BL       enable_irq
    540                ADC_ISR[ADC0] = isr; //添加中断路径 
   \   00000224   0x....             LDR.N    R0,??DataTable5_8
   \   00000226   0x6007             STR      R7,[R0, #+0]
   \   00000228   0xE004             B.N      ??LPLD_ADC_Channel_Init_14
    541              }
    542              else
    543              {
    544                enable_irq(58);      //使能ADC1 NVIC中断
   \                     ??LPLD_ADC_Channel_Init_25:
   \   0000022A   0x203A             MOVS     R0,#+58
   \   0000022C   0x.... 0x....      BL       enable_irq
    545                ADC_ISR[ADC1] = isr; //添加中断路径 
   \   00000230   0x....             LDR.N    R0,??DataTable5_8
   \   00000232   0x6047             STR      R7,[R0, #+4]
    546              }
    547            }
    548            if(ad_event & ADC_DMA_DISABLE)
   \                     ??LPLD_ADC_Channel_Init_14:
   \   00000234   0x0768             LSLS     R0,R5,#+29
   \   00000236   0xD504             BPL.N    ??LPLD_ADC_Channel_Init_26
    549            {
    550              ADC_SC2_REG(adcptr)  &= ~( ADC_SC2_DMAEN_MASK ); //禁止DMA
   \   00000238   0x6A30             LDR      R0,[R6, #+32]
   \   0000023A   0xF030 0x0004      BICS     R0,R0,#0x4
   \   0000023E   0x6230             STR      R0,[R6, #+32]
   \   00000240   0xE005             B.N      ??LPLD_ADC_Channel_Init_27
    551            }
    552            else if(ad_event & ADC_DMA_ENABLE)
   \                     ??LPLD_ADC_Channel_Init_26:
   \   00000242   0x0728             LSLS     R0,R5,#+28
   \   00000244   0xD503             BPL.N    ??LPLD_ADC_Channel_Init_27
    553            {
    554              ADC_SC2_REG(adcptr)  |= ADC_SC2_DMAEN_MASK;     //使能DMA
   \   00000246   0x6A30             LDR      R0,[R6, #+32]
   \   00000248   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   0000024C   0x6230             STR      R0,[R6, #+32]
    555            }
    556            ADC_SC1_REG(adcptr,0) &= ~(ADC_SC1_ADCH_MASK);   
   \                     ??LPLD_ADC_Channel_Init_27:
   \   0000024E   0x6830             LDR      R0,[R6, #+0]
   \   00000250   0x0940             LSRS     R0,R0,#+5
   \   00000252   0x0140             LSLS     R0,R0,#+5
   \   00000254   0x6030             STR      R0,[R6, #+0]
    557            ADC_SC1_REG(adcptr,0) |= ADC_SC1_ADCH(channel);   //设置通道
   \   00000256   0x6830             LDR      R0,[R6, #+0]
   \   00000258   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000025A   0xF014 0x011F      ANDS     R1,R4,#0x1F
   \   0000025E   0x4308             ORRS     R0,R1,R0
   \   00000260   0x6030             STR      R0,[R6, #+0]
    558            
    559            return 1;
   \   00000262   0x2001             MOVS     R0,#+1
   \                     ??LPLD_ADC_Channel_Init_1:
   \   00000264   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    560          }
    561          /*
    562           * LPLD_ADC_SetHWTrg
    563           * 设置ADC为硬件触发方式
    564           * 
    565           * 参数:
    566           *    adcx--ADC模块号
    567           *      |__ADC0         -ADC0模块
    568           *      |__ADC1         -ADC0模块
    569           *
    570           * 输出:
    571           *    无
    572           */

   \                                 In section .text, align 2, keep-with-next
    573          void LPLD_ADC_SetHWTrg(ADCx adcx)
    574          {
    575            ADC_MemMapPtr adcptr = ADCx_Ptr[adcx];
   \                     LPLD_ADC_SetHWTrg:
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0x....             LDR.N    R1,??DataTable5_2
   \   00000004   0xF851 0x0020      LDR      R0,[R1, R0, LSL #+2]
    576            //选择ADC为硬件触发方式
    577            ADC_SC2_REG(adcptr)  |= ADC_SC2_ADTRG_MASK;
   \   00000008   0x6A01             LDR      R1,[R0, #+32]
   \   0000000A   0xF051 0x0140      ORRS     R1,R1,#0x40
   \   0000000E   0x6201             STR      R1,[R0, #+32]
    578          }
   \   00000010   0x4770             BX       LR               ;; return
    579          
    580          /*
    581           * LPLD_ADC_Isr
    582           * ADC中断服务函数
    583           */

   \                                 In section .text, align 2, keep-with-next
    584          void LPLD_ADC_Isr(void)
    585          {
   \                     LPLD_ADC_Isr:
   \   00000000   0xB510             PUSH     {R4,LR}
    586            #define ADC_VECTORNUM   (*(volatile uint8*)(0xE000ED04))
    587            uint8 adc_ch = ADC_VECTORNUM - 73;
   \   00000002   0x....             LDR.N    R0,??DataTable5_9  ;; 0xe000ed04
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0xF1B0 0x0449      SUBS     R4,R0,#+73
    588              
    589            //调用用户自定义中断服务
    590            if(ADC_ISR[adc_ch] != (ADC_ISR_CALLBACK)0)
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x....             LDR.N    R0,??DataTable5_8
   \   0000000E   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD004             BEQ.N    ??LPLD_ADC_Isr_0
    591              ADC_ISR[adc_ch](); 
   \   00000016   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000018   0x....             LDR.N    R0,??DataTable5_8
   \   0000001A   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000001E   0x4780             BLX      R0
    592            if(!adc_ch)
   \                     ??LPLD_ADC_Isr_0:
   \   00000020   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000022   0x2C00             CMP      R4,#+0
   \   00000024   0xD106             BNE.N    ??LPLD_ADC_Isr_1
    593              ADC_SC1_REG(ADC0_BASE_PTR,0) |= ADC_SC1_COCO_MASK;
   \   00000026   0x....             LDR.N    R0,??DataTable5_5  ;; 0x4003b000
   \   00000028   0x6800             LDR      R0,[R0, #+0]
   \   0000002A   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   0000002E   0x....             LDR.N    R1,??DataTable5_5  ;; 0x4003b000
   \   00000030   0x6008             STR      R0,[R1, #+0]
   \   00000032   0xE005             B.N      ??LPLD_ADC_Isr_2
    594            else
    595              ADC_SC1_REG(ADC1_BASE_PTR,0) |= ADC_SC1_COCO_MASK;
   \                     ??LPLD_ADC_Isr_1:
   \   00000034   0x....             LDR.N    R0,??DataTable5_10  ;; 0x400bb000
   \   00000036   0x6800             LDR      R0,[R0, #+0]
   \   00000038   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   0000003C   0x....             LDR.N    R1,??DataTable5_10  ;; 0x400bb000
   \   0000003E   0x6008             STR      R0,[R1, #+0]
    596          }
   \                     ??LPLD_ADC_Isr_2:
   \   00000040   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x4004803C         DC32     0x4004803c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x........         DC32     Adc0_Config

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x........         DC32     ADCx_Ptr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x40048030         DC32     0x40048030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x........         DC32     Adc1_Config

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x4003B000         DC32     0x4003b000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x40048038         DC32     0x40048038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x40049000         DC32     0x40049000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0x........         DC32     ADC_ISR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   0xE000ED04         DC32     0xe000ed04

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_10:
   \   00000000   0x400BB000         DC32     0x400bb000

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  ADC_Init
              8 -> ADC_Cal
              8 -> ADC_Config_Alt
              8 -> enable_irq
       24  LPLD_ADC_Channel_Init
             24 -> enable_irq
       16  LPLD_ADC_Init
             16 -> ADC_Cal
             16 -> ADC_Config_Alt
        8  LPLD_ADC_Isr
              8 -- Indirect call
        0  LPLD_ADC_SE_Get
        0  LPLD_ADC_SetHWTrg


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
       8  ADC_ISR
     136  ADC_Init
       8  ADCx_Ptr
      16  Adc0_Config
      16  Adc1_Config
     614  LPLD_ADC_Channel_Init
     230  LPLD_ADC_Init
      66  LPLD_ADC_Isr
     568  LPLD_ADC_SE_Get
      18  LPLD_ADC_SetHWTrg

 
    40 bytes in section .bss
     8 bytes in section .data
 1 676 bytes in section .text
 
 1 676 bytes of CODE memory
    48 bytes of DATA memory

Errors: none
Warnings: none
