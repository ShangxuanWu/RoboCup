###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     25/Sep/2013  21:07:11 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\中国机器人大赛\robot_project\lib\LPLD\HAL_PIT.c       #
#    Command line =  D:\中国机器人大赛\robot_project\lib\LPLD\HAL_PIT.c -D    #
#                    IAR -D LPLD_K60 -lCN D:\中国机器人大赛\robot_project\pro #
#                    ject\LPLD_Template\iar\RAM\List\ -lB                     #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\RAM\List\ -o D:\中国机器人大赛\robot_project\project\L #
#                    PLD_Template\iar\RAM\Obj\ --no_cse --no_unroll           #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "D:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I D:\中国机器人大赛\robot_project\project\LPLD_T #
#                    emplate\iar\..\app\ -I D:\中国机器人大赛\robot_project\p #
#                    roject\LPLD_Template\iar\..\..\..\lib\common\ -I         #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\cpu\ -I D:\中国机器人大赛\robot_project\p #
#                    roject\LPLD_Template\iar\..\..\..\lib\cpu\headers\ -I    #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\drivers\adc16\ -I                         #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\drivers\enet\ -I                          #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\drivers\lptmr\ -I                         #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\drivers\mcg\ -I                           #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\drivers\pmc\ -I                           #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\drivers\rtc\ -I                           #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\drivers\uart\ -I                          #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\drivers\wdog\ -I                          #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\platforms\ -I                             #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\LPLD\ -I D:\中国机器人大赛\robot_project\ #
#                    project\LPLD_Template\iar\..\..\..\lib\LPLD\FatFs\ -I    #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\LPLD\USB\ -I                              #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\iar_config_files\ -Ol                     #
#    List file    =  D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\RAM\List\HAL_PIT.lst                                   #
#    Object file  =  D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\RAM\Obj\HAL_PIT.o                                      #
#                                                                             #
#                                                                             #
###############################################################################

D:\中国机器人大赛\robot_project\lib\LPLD\HAL_PIT.c
      1          /*
      2           * --------------"拉普兰德K60底层库"-----------------
      3           *
      4           * 测试硬件平台:LPLD_K60 Card
      5           * 版权所有:北京拉普兰德电子技术有限公司
      6           * 网络销售:http://laplenden.taobao.com
      7           * 公司门户:http://www.lpld.cn
      8           *
      9           * 文件名: HAL_PIT.c
     10           * 用途: PIT底层模块相关函数
     11           * 最后修改日期: 20120321
     12           *
     13           * 开发者使用协议:
     14           *  本代码面向所有使用者开放源代码，开发者可以随意修改源代码。但本段及以上注释应
     15           *  予以保留，不得更改或删除原版权所有者姓名。二次开发者可以加注二次版权所有者，
     16           *  但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     17           */
     18          
     19          /*
     20           *******需用到定时中断，请在isr.h中粘贴一下代码:*********
     21          
     22          //PIT模块中断服务定义
     23          #undef  VECTOR_084
     24          #define VECTOR_084 LPLD_PIT_Isr
     25          #undef  VECTOR_085
     26          #define VECTOR_085 LPLD_PIT_Isr
     27          #undef  VECTOR_086
     28          #define VECTOR_086 LPLD_PIT_Isr
     29          #undef  VECTOR_087
     30          #define VECTOR_087 LPLD_PIT_Isr
     31          //以下函数在LPLD_Kinetis底层包，不必修改
     32          extern void LPLD_PIT_Isr(void);
     33          
     34           ***********************代码结束*************************
     35          */
     36          
     37          #include "common.h"
     38          #include "HAL_PIT.h"
     39          
     40          
     41          //引用总线时钟频率，该值在sysinit.c文件中取得
     42          extern int periph_clk_khz;
     43          
     44          //用户自定义中断服务函数数组

   \                                 In section .bss, align 4
     45          PIT_ISR_CALLBACK PIT_ISR[4];
   \                     PIT_ISR:
   \   00000000                      DS8 16
     46          
     47          /*
     48           * LPLD_PIT_Init
     49           * PIT通用初始化函数
     50           * 
     51           * 参数:
     52           *    pitx--PIT模块号
     53           *      |__PIT0        --周期中断定时器0
     54           *      |__PIT1        --周期中断定时器0
     55           *      |__PIT2        --周期中断定时器0
     56           *      |__PIT3        --周期中断定时器0
     57           *    period_us--中断周期
     58           *      |__单位为微妙
     59           *    isr_func--用户中断程序入口地址
     60           *      |__用户在工程文件下定义的中断函数名，函数必须为:无返回值,无参数(eg. void isr(void);)
     61           *
     62           * 输出:
     63           *    0--配置错误
     64           *    1--配置成功
     65           */

   \                                 In section .text, align 2, keep-with-next
     66          uint8 LPLD_PIT_Init(PITx pitx, uint32 period_us, PIT_ISR_CALLBACK isr_func)
     67          { 
   \                     LPLD_PIT_Init:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000E             MOVS     R6,R1
   \   00000006   0x0015             MOVS     R5,R2
     68            uint32 ldval;
     69            uint32 periph_clk_mhz;
     70            
     71            //参数检查
     72            ASSERT( pitx <= PIT3);                  //判断模块号
   \   00000008   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000A   0x2C04             CMP      R4,#+4
   \   0000000C   0xD303             BCC.N    ??LPLD_PIT_Init_0
   \   0000000E   0x2148             MOVS     R1,#+72
   \   00000010   0x....             LDR.N    R0,??DataTable3
   \   00000012   0x.... 0x....      BL       assert_failed
     73            
     74            //计算定时加载值
     75            periph_clk_mhz = periph_clk_khz/1000;
   \                     ??LPLD_PIT_Init_0:
   \   00000016   0x....             LDR.N    R0,??DataTable3_1
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0xF44F 0x717A      MOV      R1,#+1000
   \   0000001E   0xFB90 0xF0F1      SDIV     R0,R0,R1
     76            ldval = period_us*periph_clk_mhz;
   \   00000022   0x4346             MULS     R6,R0,R6
     77            
     78            ASSERT( ldval > 0);                    
   \   00000024   0x2E00             CMP      R6,#+0
   \   00000026   0xD103             BNE.N    ??LPLD_PIT_Init_1
   \   00000028   0x214E             MOVS     R1,#+78
   \   0000002A   0x....             LDR.N    R0,??DataTable3
   \   0000002C   0x.... 0x....      BL       assert_failed
     79            
     80            //开启定时模块时钟
     81            SIM_SCGC6 |= SIM_SCGC6_PIT_MASK;
   \                     ??LPLD_PIT_Init_1:
   \   00000030   0x....             LDR.N    R0,??DataTable3_2  ;; 0x4004803c
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   \   00000034   0xF450 0x0000      ORRS     R0,R0,#0x800000
   \   00000038   0x....             LDR.N    R1,??DataTable3_2  ;; 0x4004803c
   \   0000003A   0x6008             STR      R0,[R1, #+0]
     82            
     83            // 开启 PIT
     84            PIT_MCR = 0x00;
   \   0000003C   0x....             LDR.N    R0,??DataTable3_3  ;; 0x40037000
   \   0000003E   0x2100             MOVS     R1,#+0
   \   00000040   0x6001             STR      R1,[R0, #+0]
     85           
     86            if(isr_func!=NULL){
   \   00000042   0x0028             MOVS     R0,R5
   \   00000044   0x2800             CMP      R0,#+0
   \   00000046   0xD008             BEQ.N    ??LPLD_PIT_Init_2
     87              PIT_ISR[pitx] = isr_func;
   \   00000048   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000004A   0x....             LDR.N    R0,??DataTable3_4
   \   0000004C   0xF840 0x5024      STR      R5,[R0, R4, LSL #+2]
     88              //在NVIC中使能PIT中断
     89              enable_irq(68+pitx); 
   \   00000050   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000052   0xF114 0x0044      ADDS     R0,R4,#+68
   \   00000056   0x.... 0x....      BL       enable_irq
     90            }
     91            
     92            //period = (period_ns/bus_period_ns)-1
     93            PIT_LDVAL_REG(PIT_BASE_PTR,pitx) = ldval-1;
   \                     ??LPLD_PIT_Init_2:
   \   0000005A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000005C   0x0120             LSLS     R0,R4,#+4
   \   0000005E   0x....             LDR.N    R1,??DataTable3_5  ;; 0x40037100
   \   00000060   0x1E72             SUBS     R2,R6,#+1
   \   00000062   0x5042             STR      R2,[R0, R1]
     94            
     95            //使能中断
     96            PIT_TCTRL_REG(PIT_BASE_PTR,pitx) = PIT_TCTRL_TIE_MASK;
   \   00000064   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000066   0x....             LDR.N    R0,??DataTable3_5  ;; 0x40037100
   \   00000068   0xEB10 0x1004      ADDS     R0,R0,R4, LSL #+4
   \   0000006C   0x2102             MOVS     R1,#+2
   \   0000006E   0x6081             STR      R1,[R0, #+8]
     97            //开始定时
     98            PIT_TCTRL_REG(PIT_BASE_PTR,pitx) |= PIT_TCTRL_TEN_MASK;
   \   00000070   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000072   0x....             LDR.N    R0,??DataTable3_5  ;; 0x40037100
   \   00000074   0xEB10 0x1004      ADDS     R0,R0,R4, LSL #+4
   \   00000078   0x6880             LDR      R0,[R0, #+8]
   \   0000007A   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000007E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000080   0x....             LDR.N    R1,??DataTable3_5  ;; 0x40037100
   \   00000082   0xEB11 0x1104      ADDS     R1,R1,R4, LSL #+4
   \   00000086   0x6088             STR      R0,[R1, #+8]
     99            
    100            return 1;
   \   00000088   0x2001             MOVS     R0,#+1
   \   0000008A   0xBD70             POP      {R4-R6,PC}       ;; return
    101          }
    102          
    103          /*
    104           * LPLD_PIT_SetIsr
    105           * 设置PIT通道用户定义的中断服务函数，并使能中断
    106           * 
    107           * 参数:
    108           *    pitx--PIT模块号
    109           *      |__PIT0        --周期中断定时器0
    110           *      |__PIT1        --周期中断定时器0
    111           *      |__PIT2        --周期中断定时器0
    112           *      |__PIT3        --周期中断定时器0
    113           *    isr_func--用户中断程序入口地址
    114           *      |__用户在工程文件下定义的中断函数名，函数必须为:无返回值,无参数(eg. void isr(void);)
    115           *
    116           * 输出:
    117           *    0--配置错误
    118           *    1--配置成功
    119           *
    120           */

   \                                 In section .text, align 2, keep-with-next
    121          uint8 LPLD_PIT_SetIsr(PITx pitx, PIT_ISR_CALLBACK isr_func)
    122          {
   \                     LPLD_PIT_SetIsr:
   \   00000000   0xB580             PUSH     {R7,LR}
    123            PIT_ISR[pitx] = isr_func;
   \   00000002   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000004   0x....             LDR.N    R2,??DataTable3_4
   \   00000006   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
    124            enable_irq(68+pitx); 
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0x3044             ADDS     R0,R0,#+68
   \   0000000E   0x.... 0x....      BL       enable_irq
    125            
    126            return 1;
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0xBD02             POP      {R1,PC}          ;; return
    127          }
    128          
    129          /*
    130           * LPLD_PIT_ClearIsr
    131           * 清除PIT通道用户定义的中断服务函数，并禁用中断
    132           * 
    133           * 参数:
    134           *    pitx--PIT模块号
    135           *      |__PIT0        --周期中断定时器0
    136           *      |__PIT1        --周期中断定时器0
    137           *      |__PIT2        --周期中断定时器0
    138           *      |__PIT3        --周期中断定时器0
    139           *
    140           * 输出:
    141           *    0--配置错误
    142           *    1--配置成功
    143           *
    144           */

   \                                 In section .text, align 2, keep-with-next
    145          uint8 LPLD_PIT_ClearIsr(PITx pitx)
    146          {
   \                     LPLD_PIT_ClearIsr:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    147            disable_irq(68+pitx); 
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0xF114 0x0044      ADDS     R0,R4,#+68
   \   0000000A   0x.... 0x....      BL       disable_irq
    148            PIT_ISR[pitx] = NULL;
   \   0000000E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000010   0x....             LDR.N    R0,??DataTable3_4
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0xF840 0x1024      STR      R1,[R0, R4, LSL #+2]
    149            
    150            return 1;
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0xBD10             POP      {R4,PC}          ;; return
    151          }
    152          
    153          
    154          /*
    155           * LPLD_PIT_Isr
    156           * PIT通用中断底层入口函数
    157           * 
    158           * 用户无需修改，程序自动进入对应通道中断函数
    159           */

   \                                 In section .text, align 2, keep-with-next
    160          void LPLD_PIT_Isr(void)
    161          {
   \                     LPLD_PIT_Isr:
   \   00000000   0xB510             PUSH     {R4,LR}
    162            #define PIT_VECTORNUM   (*(volatile uint8*)(0xE000ED04))
    163            uint8 pit_ch = PIT_VECTORNUM - 84;
   \   00000002   0x....             LDR.N    R0,??DataTable3_6  ;; 0xe000ed04
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0xF1B0 0x0454      SUBS     R4,R0,#+84
    164              
    165            //调用用户自定义中断服务
    166            PIT_ISR[pit_ch]();  
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x....             LDR.N    R0,??DataTable3_4
   \   0000000E   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000012   0x4780             BLX      R0
    167            //清除中断标志位
    168            PIT_TFLG_REG(PIT_BASE_PTR,pit_ch) |= PIT_TFLG_TIF_MASK;
   \   00000014   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000016   0x....             LDR.N    R0,??DataTable3_5  ;; 0x40037100
   \   00000018   0xEB10 0x1004      ADDS     R0,R0,R4, LSL #+4
   \   0000001C   0x68C0             LDR      R0,[R0, #+12]
   \   0000001E   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000022   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000024   0x....             LDR.N    R1,??DataTable3_5  ;; 0x40037100
   \   00000026   0xEB11 0x1104      ADDS     R1,R1,R4, LSL #+4
   \   0000002A   0x60C8             STR      R0,[R1, #+12]
    169          }
   \   0000002C   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     `?<Constant "D:\\\\\\326\\320\\271\\372\\273\\372\\306\\3`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     periph_clk_khz

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x4004803C         DC32     0x4004803c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x40037000         DC32     0x40037000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x........         DC32     PIT_ISR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x40037100         DC32     0x40037100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0xE000ED04         DC32     0xe000ed04

   \                                 In section .rodata, align 4
   \                     `?<Constant "D:\\\\\\326\\320\\271\\372\\273\\372\\306\\3`:
   \   00000000   0x44 0x3A          DC8 44H, 3AH, 5CH, 0D6H, 0D0H, 0B9H, 0FAH, 0BBH
   \              0x5C 0xD6    
   \              0xD0 0xB9    
   \              0xFA 0xBB    
   \   00000008   0xFA 0xC6          DC8 0FAH, 0C6H, 0F7H, 0C8H, 0CBH, 0B4H, 0F3H, 0C8H
   \              0xF7 0xC8    
   \              0xCB 0xB4    
   \              0xF3 0xC8    
   \   00000010   0xFC 0x5C          DC8 0FCH, 5CH, 72H, 6FH, 62H, 6FH, 74H, 5FH
   \              0x72 0x6F    
   \              0x62 0x6F    
   \              0x74 0x5F    
   \   00000018   0x70 0x72          DC8 70H, 72H, 6FH, 6AH, 65H, 63H, 74H, 5CH
   \              0x6F 0x6A    
   \              0x65 0x63    
   \              0x74 0x5C    
   \   00000020   0x6C 0x69          DC8 6CH, 69H, 62H, 5CH, 4CH, 50H, 4CH, 44H
   \              0x62 0x5C    
   \              0x4C 0x50    
   \              0x4C 0x44    
   \   00000028   0x5C 0x48          DC8 5CH, 48H, 41H, 4CH, 5FH, 50H, 49H, 54H
   \              0x41 0x4C    
   \              0x5F 0x50    
   \              0x49 0x54    
   \   00000030   0x2E 0x63          DC8 2EH, 63H, 0
   \              0x00         
   \   00000033   0x00               DC8 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  LPLD_PIT_ClearIsr
              8 -> disable_irq
       16  LPLD_PIT_Init
             16 -> assert_failed
             16 -> enable_irq
        8  LPLD_PIT_Isr
              8 -- Indirect call
        8  LPLD_PIT_SetIsr
              8 -> enable_irq


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      52  ?<Constant "D:\\\326\320\271\372\273\372\306\3
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
      28  LPLD_PIT_ClearIsr
     140  LPLD_PIT_Init
      46  LPLD_PIT_Isr
      22  LPLD_PIT_SetIsr
      16  PIT_ISR

 
  16 bytes in section .bss
  52 bytes in section .rodata
 264 bytes in section .text
 
 264 bytes of CODE  memory
  52 bytes of CONST memory
  16 bytes of DATA  memory

Errors: none
Warnings: none
