###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     25/Sep/2013  21:07:04 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\中国机器人大赛\robot_project\lib\LPLD\HAL_LPTMR.c     #
#    Command line =  D:\中国机器人大赛\robot_project\lib\LPLD\HAL_LPTMR.c -D  #
#                    IAR -D LPLD_K60 -lCN D:\中国机器人大赛\robot_project\pro #
#                    ject\LPLD_Template\iar\RAM\List\ -lB                     #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\RAM\List\ -o D:\中国机器人大赛\robot_project\project\L #
#                    PLD_Template\iar\RAM\Obj\ --no_cse --no_unroll           #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "D:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I D:\中国机器人大赛\robot_project\project\LPLD_T #
#                    emplate\iar\..\app\ -I D:\中国机器人大赛\robot_project\p #
#                    roject\LPLD_Template\iar\..\..\..\lib\common\ -I         #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\cpu\ -I D:\中国机器人大赛\robot_project\p #
#                    roject\LPLD_Template\iar\..\..\..\lib\cpu\headers\ -I    #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\drivers\adc16\ -I                         #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\drivers\enet\ -I                          #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\drivers\lptmr\ -I                         #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\drivers\mcg\ -I                           #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\drivers\pmc\ -I                           #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\drivers\rtc\ -I                           #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\drivers\uart\ -I                          #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\drivers\wdog\ -I                          #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\platforms\ -I                             #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\LPLD\ -I D:\中国机器人大赛\robot_project\ #
#                    project\LPLD_Template\iar\..\..\..\lib\LPLD\FatFs\ -I    #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\LPLD\USB\ -I                              #
#                    D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\..\..\..\lib\iar_config_files\ -Ol                     #
#    List file    =  D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\RAM\List\HAL_LPTMR.lst                                 #
#    Object file  =  D:\中国机器人大赛\robot_project\project\LPLD_Template\ia #
#                    r\RAM\Obj\HAL_LPTMR.o                                    #
#                                                                             #
#                                                                             #
###############################################################################

D:\中国机器人大赛\robot_project\lib\LPLD\HAL_LPTMR.c
      1          /*
      2           * --------------"拉普兰德K60底层库"-----------------
      3           *
      4           * 测试硬件平台:LPLD_K60 Card
      5           * 版权所有:北京拉普兰德电子技术有限公司
      6           * 网络销售:http://laplenden.taobao.com
      7           * 公司门户:http://www.lpld.cn
      8           *
      9           * 文件名: HAL_LPTMR.c
     10           * 用途: LPTMR底层模块相关函数
     11           * 最后修改日期: 20120326
     12           *
     13           * 开发者使用协议:
     14           *  本代码面向所有使用者开放源代码，开发者可以随意修改源代码。但本段及以上注释应
     15           *  予以保留，不得更改或删除原版权所有者姓名。二次开发者可以加注二次版权所有者，
     16           *  但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     17           */
     18          /*
     19           *******需用到LPTMR中断，请在isr.h中粘贴一下代码:*********
     20          
     21          //LPTMR模块中断服务定义
     22          #undef  VECTOR_101
     23          #define VECTOR_101 LPLD_LPTMR_Isr
     24          //以下函数在LPLD_Kinetis底层包，不必修改
     25          extern void LPLD_LPTMR_Isr(void);
     26          
     27           ***********************代码结束*************************
     28          */
     29          
     30          #include "common.h"
     31          #include "HAL_LPTMR.h"
     32          

   \                                 In section .bss, align 4
     33          LPTMR_ISR_CALLBACK LPTMR_ISR;
   \                     LPTMR_ISR:
   \   00000000                      DS8 4
     34          
     35          /*
     36           * LPLD_LPTMR_Init
     37           * LPTMR初始化函数
     38           * 
     39           * 参数:
     40           *    mode--选择LPTMR模式
     41           *      |__MODE_LPTMR           --低功耗定时器模式
     42           *      |__MODE_PLACC           --脉冲累加模式
     43           *    period_ms--设定定时器的定时值 单位ms
     44           *      |__0                    --设置脉冲累加模式时选择为0
     45           *      |__1~65535              --1ms<= 定时周期  <=65535ms 
     46           *    channel--选择累加输入通道
     47           *      |__0                    --设置为定时器时选择为0
     48           *      |__LPTMR_ALT1           --设置LPTMR_ALT1, PTA19为脉冲累加输入
     49           *      |__LPTMR_ALT2           --设置LPTMR_ALT2, PTC5 为脉冲累加输入
     50           *    irq_en--输入中断
     51           *      |__IRQ_DISABLE          --不使能中断
     52           *      |__IRQ_ENABLE           --使能中断
     53           *    isr_func
     54           *      |__低功耗定时器中断回调函数
     55           *  
     56           * 输出:
     57           *    0--配置错误
     58           *    1--配置成功
     59           */
     60          

   \                                 In section .text, align 2, keep-with-next
     61          uint8 LPLD_LPTMR_Init(uint8 mode, uint16 period_ms, uint8 channel, uint8 irq_en, LPTMR_ISR_CALLBACK isr_func)
     62          {
   \                     LPLD_LPTMR_Init:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x001C             MOVS     R4,R3
   \   00000004   0x9B04             LDR      R3,[SP, #+16]
     63            SIM_SCGC5|=SIM_SCGC5_LPTIMER_MASK;//初始化LPTMR时钟
   \   00000006   0x....             LDR.N    R5,??DataTable6  ;; 0x40048038
   \   00000008   0x682D             LDR      R5,[R5, #+0]
   \   0000000A   0xF055 0x0501      ORRS     R5,R5,#0x1
   \   0000000E   0x....             LDR.N    R6,??DataTable6  ;; 0x40048038
   \   00000010   0x6035             STR      R5,[R6, #+0]
     64             
     65            LPTMR0_CSR=0x00;  //清空寄存器
   \   00000012   0x....             LDR.N    R5,??DataTable6_1  ;; 0x40040000
   \   00000014   0x2600             MOVS     R6,#+0
   \   00000016   0x602E             STR      R6,[R5, #+0]
     66            LPTMR0_PSR=0x00;
   \   00000018   0x....             LDR.N    R5,??DataTable6_2  ;; 0x40040004
   \   0000001A   0x2600             MOVS     R6,#+0
   \   0000001C   0x602E             STR      R6,[R5, #+0]
     67            LPTMR0_CMR=0x00;
   \   0000001E   0x....             LDR.N    R5,??DataTable6_3  ;; 0x40040008
   \   00000020   0x2600             MOVS     R6,#+0
   \   00000022   0x602E             STR      R6,[R5, #+0]
     68             
     69            if(mode==MODE_LPTMR)// 配置成低功耗定时器功能
   \   00000024   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD11E             BNE.N    ??LPLD_LPTMR_Init_0
     70            {
     71                
     72              /* 配置LPTMR */
     73              // LPO 1Khz
     74              //设置比较的值
     75              //使用内部时钟 分频系数Prescale为 2^(X+1)
     76              //定时器的一个计数周期=时钟源(Clk_Src)/ 预分频值(Prescale)
     77              //定时器的定时值=设置的比较值(compare_value)/定时器的一个计数周期
     78              LPTMR0_CMR=LPTMR_CMR_COMPARE(period_ms);                 //设置比较值
   \   0000002A   0x....             LDR.N    R0,??DataTable6_3  ;; 0x40040008
   \   0000002C   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000002E   0x6001             STR      R1,[R0, #+0]
     79              LPTMR0_PSR=LPTMR_PSR_PCS(0x1)|LPTMR_PSR_PBYP_MASK;  //采用LPO时钟旁路使能
   \   00000030   0x....             LDR.N    R0,??DataTable6_2  ;; 0x40040004
   \   00000032   0x2105             MOVS     R1,#+5
   \   00000034   0x6001             STR      R1,[R0, #+0]
     80                  
     81            }
     82            else if(mode==MODE_PLACC)               //配置成脉冲捕获模式
     83            {
     84              if(channel==LPTMR_ALT1)               //LPTMR_ALT1
     85              {
     86                SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK; 
     87                PORTA_PCR19=PORT_PCR_MUX(0x6);      //设置PTA19为脉冲累加
     88              }
     89              else if(channel==LPTMR_ALT2)          //LPTMR_ALT2
     90              {
     91                SIM_SCGC5 |= SIM_SCGC5_PORTC_MASK;  //设置PTC5为脉冲累加
     92                PORTC_PCR5=PORT_PCR_MUX(0x4);      
     93              }
     94              else
     95              {
     96                return 0;
     97              }
     98              
     99              //与所用的内部时钟无关
    100              //外部输入的信号作为计数时钟
    101              LPTMR0_PSR =LPTMR_PSR_PCS(0x1)|LPTMR_PSR_PBYP_MASK; 
    102              LPTMR0_CSR =LPTMR_CSR_TPS(channel);
    103              LPTMR0_CSR|=LPTMR_CSR_TMS_MASK; //捕获模式
    104              LPTMR0_CSR|=LPTMR_CSR_TFC_MASK; //自由计数模式
    105            }
    106            else
    107            {
    108              return 0;
    109            }
    110            
    111            if(isr_func!=NULL)
   \                     ??LPLD_LPTMR_Init_1:
   \   00000036   0x0018             MOVS     R0,R3
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD004             BEQ.N    ??LPLD_LPTMR_Init_2
    112            {
    113              LPTMR_ISR=isr_func;
   \   0000003C   0x....             LDR.N    R0,??DataTable6_4
   \   0000003E   0x6003             STR      R3,[R0, #+0]
    114              enable_irq(85);
   \   00000040   0x2055             MOVS     R0,#+85
   \   00000042   0x.... 0x....      BL       enable_irq
    115            }
    116            
    117            if(irq_en==1)
   \                     ??LPLD_LPTMR_Init_2:
   \   00000046   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000048   0x2C01             CMP      R4,#+1
   \   0000004A   0xD146             BNE.N    ??LPLD_LPTMR_Init_3
    118            {
    119              LPTMR0_CSR|=LPTMR_CSR_TIE_MASK;
   \   0000004C   0x....             LDR.N    R0,??DataTable6_1  ;; 0x40040000
   \   0000004E   0x6800             LDR      R0,[R0, #+0]
   \   00000050   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   00000054   0x....             LDR.N    R1,??DataTable6_1  ;; 0x40040000
   \   00000056   0x6008             STR      R0,[R1, #+0]
    120            }
    121            else if(irq_en==0)
    122            {
    123              LPTMR0_CSR&=~LPTMR_CSR_TIE_MASK;
    124            }
    125            else
    126            {
    127              return 0;
    128            }
    129            
    130            LPTMR0_CSR|=LPTMR_CSR_TEN_MASK; //开启LPTMR
   \                     ??LPLD_LPTMR_Init_4:
   \   00000058   0x....             LDR.N    R0,??DataTable6_1  ;; 0x40040000
   \   0000005A   0x6800             LDR      R0,[R0, #+0]
   \   0000005C   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000060   0x....             LDR.N    R1,??DataTable6_1  ;; 0x40040000
   \   00000062   0x6008             STR      R0,[R1, #+0]
    131            return 1;
   \   00000064   0x2001             MOVS     R0,#+1
   \                     ??LPLD_LPTMR_Init_5:
   \   00000066   0xBD70             POP      {R4-R6,PC}       ;; return
   \                     ??LPLD_LPTMR_Init_0:
   \   00000068   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006A   0x2801             CMP      R0,#+1
   \   0000006C   0xD133             BNE.N    ??LPLD_LPTMR_Init_6
   \   0000006E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000070   0x2A01             CMP      R2,#+1
   \   00000072   0xD120             BNE.N    ??LPLD_LPTMR_Init_7
   \   00000074   0x....             LDR.N    R0,??DataTable6  ;; 0x40048038
   \   00000076   0x6800             LDR      R0,[R0, #+0]
   \   00000078   0xF44F 0x7100      MOV      R1,#+512
   \   0000007C   0x4308             ORRS     R0,R1,R0
   \   0000007E   0x....             LDR.N    R1,??DataTable6  ;; 0x40048038
   \   00000080   0x6008             STR      R0,[R1, #+0]
   \   00000082   0x....             LDR.N    R0,??DataTable6_5  ;; 0x4004904c
   \   00000084   0xF44F 0x61C0      MOV      R1,#+1536
   \   00000088   0x6001             STR      R1,[R0, #+0]
   \                     ??LPLD_LPTMR_Init_8:
   \   0000008A   0x....             LDR.N    R0,??DataTable6_2  ;; 0x40040004
   \   0000008C   0x2105             MOVS     R1,#+5
   \   0000008E   0x6001             STR      R1,[R0, #+0]
   \   00000090   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000092   0x0110             LSLS     R0,R2,#+4
   \   00000094   0xF010 0x0030      ANDS     R0,R0,#0x30
   \   00000098   0x....             LDR.N    R1,??DataTable6_1  ;; 0x40040000
   \   0000009A   0x6008             STR      R0,[R1, #+0]
   \   0000009C   0x....             LDR.N    R0,??DataTable6_1  ;; 0x40040000
   \   0000009E   0x6800             LDR      R0,[R0, #+0]
   \   000000A0   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   000000A4   0x....             LDR.N    R1,??DataTable6_1  ;; 0x40040000
   \   000000A6   0x6008             STR      R0,[R1, #+0]
   \   000000A8   0x....             LDR.N    R0,??DataTable6_1  ;; 0x40040000
   \   000000AA   0x6800             LDR      R0,[R0, #+0]
   \   000000AC   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   000000B0   0x....             LDR.N    R1,??DataTable6_1  ;; 0x40040000
   \   000000B2   0x6008             STR      R0,[R1, #+0]
   \   000000B4   0xE7BF             B.N      ??LPLD_LPTMR_Init_1
   \                     ??LPLD_LPTMR_Init_7:
   \   000000B6   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000B8   0x2A02             CMP      R2,#+2
   \   000000BA   0xD10A             BNE.N    ??LPLD_LPTMR_Init_9
   \   000000BC   0x....             LDR.N    R0,??DataTable6  ;; 0x40048038
   \   000000BE   0x6800             LDR      R0,[R0, #+0]
   \   000000C0   0xF450 0x6000      ORRS     R0,R0,#0x800
   \   000000C4   0x....             LDR.N    R1,??DataTable6  ;; 0x40048038
   \   000000C6   0x6008             STR      R0,[R1, #+0]
   \   000000C8   0x....             LDR.N    R0,??DataTable6_6  ;; 0x4004b014
   \   000000CA   0xF44F 0x6180      MOV      R1,#+1024
   \   000000CE   0x6001             STR      R1,[R0, #+0]
   \   000000D0   0xE7DB             B.N      ??LPLD_LPTMR_Init_8
   \                     ??LPLD_LPTMR_Init_9:
   \   000000D2   0x2000             MOVS     R0,#+0
   \   000000D4   0xE7C7             B.N      ??LPLD_LPTMR_Init_5
   \                     ??LPLD_LPTMR_Init_6:
   \   000000D6   0x2000             MOVS     R0,#+0
   \   000000D8   0xE7C5             B.N      ??LPLD_LPTMR_Init_5
   \                     ??LPLD_LPTMR_Init_3:
   \   000000DA   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000DC   0x2C00             CMP      R4,#+0
   \   000000DE   0xD106             BNE.N    ??LPLD_LPTMR_Init_10
   \   000000E0   0x....             LDR.N    R0,??DataTable6_1  ;; 0x40040000
   \   000000E2   0x6800             LDR      R0,[R0, #+0]
   \   000000E4   0xF030 0x0040      BICS     R0,R0,#0x40
   \   000000E8   0x....             LDR.N    R1,??DataTable6_1  ;; 0x40040000
   \   000000EA   0x6008             STR      R0,[R1, #+0]
   \   000000EC   0xE7B4             B.N      ??LPLD_LPTMR_Init_4
   \                     ??LPLD_LPTMR_Init_10:
   \   000000EE   0x2000             MOVS     R0,#+0
   \   000000F0   0xE7B9             B.N      ??LPLD_LPTMR_Init_5
    132          }
    133          
    134          
    135          /*
    136           * LPLD_LPTMR_SetIsr
    137           * 设置LPTMR通道用户定义的中断服务函数，并使能中断
    138           * 
    139           * 参数:
    140           *    isr_func--用户中断程序入口地址
    141           *      |__用户在工程文件下定义的中断函数名，函数必须为:无返回值,无参数(eg. void isr(void);)
    142           *
    143           * 输出:
    144           *    0--配置错误
    145           *    1--配置成功
    146           *
    147           */

   \                                 In section .text, align 2, keep-with-next
    148          uint8 LPLD_LPTMR_SetIsr(LPTMR_ISR_CALLBACK isr_func)
    149          {
   \                     LPLD_LPTMR_SetIsr:
   \   00000000   0xB580             PUSH     {R7,LR}
    150            LPTMR_ISR=isr_func;
   \   00000002   0x....             LDR.N    R1,??DataTable6_4
   \   00000004   0x6008             STR      R0,[R1, #+0]
    151            LPTMR0_CSR|=LPTMR_CSR_TIE_MASK;
   \   00000006   0x....             LDR.N    R0,??DataTable6_1  ;; 0x40040000
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   0000000E   0x....             LDR.N    R1,??DataTable6_1  ;; 0x40040000
   \   00000010   0x6008             STR      R0,[R1, #+0]
    152            enable_irq(85);
   \   00000012   0x2055             MOVS     R0,#+85
   \   00000014   0x.... 0x....      BL       enable_irq
    153            
    154            return 1;
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0xBD02             POP      {R1,PC}          ;; return
    155          }
    156          
    157          /*
    158           * LPLD_LPTMR_ClearIsr
    159           * 清除LPTMR通道用户定义的中断服务函数，并禁用中断
    160           * 
    161           * 参数:
    162           *    isr_func--用户中断程序入口地址
    163           *      |__用户在工程文件下定义的中断函数名，函数必须为:无返回值,无参数(eg. void isr(void);)
    164           *
    165           * 输出:
    166           *    0--配置错误
    167           *    1--配置成功
    168           *
    169           */

   \                                 In section .text, align 2, keep-with-next
    170          uint8 LPLD_LPTMR_ClearIsr(void)
    171          {
   \                     LPLD_LPTMR_ClearIsr:
   \   00000000   0xB580             PUSH     {R7,LR}
    172            LPTMR0_CSR&=~LPTMR_CSR_TIE_MASK;
   \   00000002   0x....             LDR.N    R0,??DataTable6_1  ;; 0x40040000
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF030 0x0040      BICS     R0,R0,#0x40
   \   0000000A   0x....             LDR.N    R1,??DataTable6_1  ;; 0x40040000
   \   0000000C   0x6008             STR      R0,[R1, #+0]
    173            disable_irq(85);
   \   0000000E   0x2055             MOVS     R0,#+85
   \   00000010   0x.... 0x....      BL       disable_irq
    174            LPTMR_ISR=NULL;
   \   00000014   0x....             LDR.N    R0,??DataTable6_4
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0x6001             STR      R1,[R0, #+0]
    175            
    176            return 1;
   \   0000001A   0x2001             MOVS     R0,#+1
   \   0000001C   0xBD02             POP      {R1,PC}          ;; return
    177          }
    178          
    179          /*
    180           *  LPLD_LPTMR_Reset
    181           *  低功耗定时器复位，复位以后清空低功耗定时器Counter
    182           * 
    183           *  参数:
    184           *      无
    185           *  返回值:
    186           *      无
    187           */

   \                                 In section .text, align 2, keep-with-next
    188          void LPLD_LPTMR_Reset(void)
    189          {
    190            LPTMR0_CSR&=(~LPTMR_CSR_TEN_MASK);       //Reset LPTMR0 
   \                     LPLD_LPTMR_Reset:
   \   00000000   0x....             LDR.N    R0,??DataTable6_1  ;; 0x40040000
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x0840             LSRS     R0,R0,#+1
   \   00000006   0x0040             LSLS     R0,R0,#+1
   \   00000008   0x....             LDR.N    R1,??DataTable6_1  ;; 0x40040000
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    191          }
   \   0000000C   0x4770             BX       LR               ;; return
    192          
    193          
    194          /*
    195           *  LPLD_LPTMR_GetPulseAcc
    196           *  得到脉冲累加的值
    197           * 
    198           *  参数:
    199           *      无
    200           *  返回值:
    201           *      脉冲累加值
    202           */

   \                                 In section .text, align 2, keep-with-next
    203          uint16 LPLD_LPTMR_GetPulseAcc(void)
    204          {
    205             return (uint16)LPTMR0_CNR;
   \                     LPLD_LPTMR_GetPulseAcc:
   \   00000000   0x....             LDR.N    R0,??DataTable6_7  ;; 0x4004000c
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000006   0x4770             BX       LR               ;; return
    206          }
    207          
    208          /*
    209           *  LPLD_LPTMR_DelayMs
    210           *  低功耗定时器延时n个ms
    211           * 
    212           * 参数:
    213           *    period_ms--设定定时器的定时值 单位ms
    214           *    最大65535ms
    215           *
    216           *  返回值:
    217           *      无
    218           */

   \                                 In section .text, align 2, keep-with-next
    219          void LPLD_LPTMR_DelayMs(uint16 period_ms)
    220          {
    221            if(!period_ms)
   \                     LPLD_LPTMR_DelayMs:
   \   00000000   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xD01B             BEQ.N    ??LPLD_LPTMR_DelayMs_0
    222              return;
    223            
    224            /* 开启LPTMR时钟 */
    225            SIM_SCGC5|=SIM_SCGC5_LPTIMER_MASK; 
   \                     ??LPLD_LPTMR_DelayMs_1:
   \   00000006   0x....             LDR.N    R1,??DataTable6  ;; 0x40048038
   \   00000008   0x6809             LDR      R1,[R1, #+0]
   \   0000000A   0xF051 0x0101      ORRS     R1,R1,#0x1
   \   0000000E   0x....             LDR.N    R2,??DataTable6  ;; 0x40048038
   \   00000010   0x6011             STR      R1,[R2, #+0]
    226            
    227            /* 设置毫秒延时计数 */
    228            LPTMR0_CMR = period_ms; 
   \   00000012   0x....             LDR.N    R1,??DataTable6_3  ;; 0x40040008
   \   00000014   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000016   0x6008             STR      R0,[R1, #+0]
    229            
    230            /* 设置LPTMR不分频采用1kHz LPO为时钟源 */
    231            LPTMR0_PSR = LPTMR_PSR_PCS(1)|LPTMR_PSR_PBYP_MASK; 
   \   00000018   0x....             LDR.N    R0,??DataTable6_2  ;; 0x40040004
   \   0000001A   0x2105             MOVS     R1,#+5
   \   0000001C   0x6001             STR      R1,[R0, #+0]
    232            
    233            /* 开启定时器 */
    234            LPTMR0_CSR |= LPTMR_CSR_TEN_MASK; 
   \   0000001E   0x....             LDR.N    R0,??DataTable6_1  ;; 0x40040000
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000026   0x....             LDR.N    R1,??DataTable6_1  ;; 0x40040000
   \   00000028   0x6008             STR      R0,[R1, #+0]
    235          
    236            /* 等待计数达到设定值 */
    237            while (!(LPTMR0_CSR & LPTMR_CSR_TCF_MASK));
   \                     ??LPLD_LPTMR_DelayMs_2:
   \   0000002A   0x....             LDR.N    R0,??DataTable6_1  ;; 0x40040000
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
   \   0000002E   0x0600             LSLS     R0,R0,#+24
   \   00000030   0xD5FB             BPL.N    ??LPLD_LPTMR_DelayMs_2
    238            
    239            /*清除定值比较标志 */
    240            LPTMR0_CSR &= ~LPTMR_CSR_TEN_MASK;
   \   00000032   0x....             LDR.N    R0,??DataTable6_1  ;; 0x40040000
   \   00000034   0x6800             LDR      R0,[R0, #+0]
   \   00000036   0x0840             LSRS     R0,R0,#+1
   \   00000038   0x0040             LSLS     R0,R0,#+1
   \   0000003A   0x....             LDR.N    R1,??DataTable6_1  ;; 0x40040000
   \   0000003C   0x6008             STR      R0,[R1, #+0]
    241            
    242            return;
   \                     ??LPLD_LPTMR_DelayMs_0:
   \   0000003E   0x4770             BX       LR               ;; return
    243          }
    244          
    245          
    246          /*
    247           *  LPLD_LPTMR_Isr
    248           *  低功耗定时器中断服务子程序
    249           * 
    250           *  参数:
    251           *      无
    252           *
    253           *  返回值:
    254           *      无
    255           */

   \                                 In section .text, align 2, keep-with-next
    256          void LPLD_LPTMR_Isr(void)
    257          {
   \                     LPLD_LPTMR_Isr:
   \   00000000   0xB580             PUSH     {R7,LR}
    258            LPTMR0_CSR|=LPTMR_CSR_TCF_MASK;  //清除LPT比较标志
   \   00000002   0x....             LDR.N    R0,??DataTable6_1  ;; 0x40040000
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   0000000A   0x....             LDR.N    R1,??DataTable6_1  ;; 0x40040000
   \   0000000C   0x6008             STR      R0,[R1, #+0]
    259            LPTMR_ISR();
   \   0000000E   0x....             LDR.N    R0,??DataTable6_4
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x4780             BLX      R0
    260          }
   \   00000014   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x40048038         DC32     0x40048038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x40040000         DC32     0x40040000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x40040004         DC32     0x40040004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x40040008         DC32     0x40040008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0x........         DC32     LPTMR_ISR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   0x4004904C         DC32     0x4004904c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   0x4004B014         DC32     0x4004b014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \   00000000   0x4004000C         DC32     0x4004000c

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  LPLD_LPTMR_ClearIsr
              8 -> disable_irq
        0  LPLD_LPTMR_DelayMs
        0  LPLD_LPTMR_GetPulseAcc
       16  LPLD_LPTMR_Init
             16 -> enable_irq
        8  LPLD_LPTMR_Isr
              8 -- Indirect call
        0  LPLD_LPTMR_Reset
        8  LPLD_LPTMR_SetIsr
              8 -> enable_irq


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
      30  LPLD_LPTMR_ClearIsr
      64  LPLD_LPTMR_DelayMs
       8  LPLD_LPTMR_GetPulseAcc
     242  LPLD_LPTMR_Init
      22  LPLD_LPTMR_Isr
      14  LPLD_LPTMR_Reset
      28  LPLD_LPTMR_SetIsr
       4  LPTMR_ISR

 
   4 bytes in section .bss
 440 bytes in section .text
 
 440 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: none
