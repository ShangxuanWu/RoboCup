###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     23/Jul/2014  21:57:12 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\robot\project\robot_car_com\app\motor.c               #
#    Command line =  D:\robot\project\robot_car_com\app\motor.c -D IAR -D     #
#                    LPLD_K60 -lCN D:\robot\project\robot_car_com\iar\FLASH\L #
#                    ist\ -lB D:\robot\project\robot_car_com\iar\FLASH\List\  #
#                    -o D:\robot\project\robot_car_com\iar\FLASH\Obj\         #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M4 -e --fpu=None            #
#                    --dlib_config D:\IAR\arm\INC\c\DLib_Config_Normal.h -I   #
#                    D:\robot\project\robot_car_com\iar\..\app\ -I            #
#                    D:\robot\project\robot_car_com\iar\..\..\..\lib\common\  #
#                    -I D:\robot\project\robot_car_com\iar\..\..\..\lib\cpu\  #
#                    -I D:\robot\project\robot_car_com\iar\..\..\..\lib\cpu\h #
#                    eaders\ -I D:\robot\project\robot_car_com\iar\..\..\..\l #
#                    ib\drivers\adc16\ -I D:\robot\project\robot_car_com\iar\ #
#                    ..\..\..\lib\drivers\enet\ -I                            #
#                    D:\robot\project\robot_car_com\iar\..\..\..\lib\drivers\ #
#                    lptmr\ -I D:\robot\project\robot_car_com\iar\..\..\..\li #
#                    b\drivers\mcg\ -I D:\robot\project\robot_car_com\iar\..\ #
#                    ..\..\lib\drivers\pmc\ -I D:\robot\project\robot_car_com #
#                    \iar\..\..\..\lib\drivers\rtc\ -I                        #
#                    D:\robot\project\robot_car_com\iar\..\..\..\lib\drivers\ #
#                    uart\ -I D:\robot\project\robot_car_com\iar\..\..\..\lib #
#                    \drivers\wdog\ -I D:\robot\project\robot_car_com\iar\..\ #
#                    ..\..\lib\platforms\ -I D:\robot\project\robot_car_com\i #
#                    ar\..\..\..\lib\LPLD\ -I D:\robot\project\robot_car_com\ #
#                    iar\..\..\..\lib\LPLD\FatFs\ -I                          #
#                    D:\robot\project\robot_car_com\iar\..\..\..\lib\LPLD\USB #
#                    \ -I D:\robot\project\robot_car_com\iar\..\..\..\lib\iar #
#                    _config_files\ -Ol                                       #
#    List file    =  D:\robot\project\robot_car_com\iar\FLASH\List\motor.lst  #
#    Object file  =  D:\robot\project\robot_car_com\iar\FLASH\Obj\motor.o     #
#                                                                             #
#                                                                             #
###############################################################################

D:\robot\project\robot_car_com\app\motor.c
      1          #include "motor.h"
      2          #include "common.h"
      3          #include "HAL_GPIO.h"
      4          #include "HAL_FTM.h"
      5          
      6          
      7          
      8          
      9          

   \                                 In section .bss, align 4
     10          int motor_left_speed = 0;
   \                     motor_left_speed:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     11          int motor_right_speed =0;
   \                     motor_right_speed:
   \   00000000                      DS8 4
     12          

   \                                 In section .text, align 2, keep-with-next
     13          void motor_init()
     14          {
   \                     motor_init:
   \   00000000   0xB580             PUSH     {R7,LR}
     15          	 //设置FTM0模块PWM频率为10kHz
     16            LPLD_FTM0_PWM_Init(10000);
   \   00000002   0xF242 0x7010      MOVW     R0,#+10000
   \   00000006   0x.... 0x....      BL       LPLD_FTM0_PWM_Init
     17            
     18            LPLD_FTM0_PWM_Open(4, 0);  //PTD4 左侧马达前进
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x2004             MOVS     R0,#+4
   \   0000000E   0x.... 0x....      BL       LPLD_FTM0_PWM_Open
     19            LPLD_FTM0_PWM_Open(5, 0);  //PTD5 左侧马达后退
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x2005             MOVS     R0,#+5
   \   00000016   0x.... 0x....      BL       LPLD_FTM0_PWM_Open
     20          
     21            LPLD_FTM0_PWM_Open(7, 0);  //PTD6 右侧马达前进
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0x2007             MOVS     R0,#+7
   \   0000001E   0x.... 0x....      BL       LPLD_FTM0_PWM_Open
     22            LPLD_FTM0_PWM_Open(6, 0);  //PTD7 右侧马达后退
   \   00000022   0x2100             MOVS     R1,#+0
   \   00000024   0x2006             MOVS     R0,#+6
   \   00000026   0x.... 0x....      BL       LPLD_FTM0_PWM_Open
     23          }
   \   0000002A   0xBD01             POP      {R0,PC}          ;; return
     24          

   \                                 In section .text, align 2, keep-with-next
     25          void motor_set_left_speed(int speed)
     26          {
   \                     motor_set_left_speed:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     27            motor_left_speed=speed;
   \   00000004   0x....             LDR.N    R0,??DataTable3
   \   00000006   0x6004             STR      R4,[R0, #+0]
     28            if((int)speed>=0)
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD408             BMI.N    ??motor_set_left_speed_0
     29            {
     30              LPLD_FTM0_PWM_ChangeDuty(4,speed);
   \   0000000C   0x0021             MOVS     R1,R4
   \   0000000E   0x2004             MOVS     R0,#+4
   \   00000010   0x.... 0x....      BL       LPLD_FTM0_PWM_ChangeDuty
     31              LPLD_FTM0_PWM_ChangeDuty(5,0);
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x2005             MOVS     R0,#+5
   \   00000018   0x.... 0x....      BL       LPLD_FTM0_PWM_ChangeDuty
   \   0000001C   0xE007             B.N      ??motor_set_left_speed_1
     32            }
     33            else
     34            {
     35              LPLD_FTM0_PWM_ChangeDuty(4,0);
   \                     ??motor_set_left_speed_0:
   \   0000001E   0x2100             MOVS     R1,#+0
   \   00000020   0x2004             MOVS     R0,#+4
   \   00000022   0x.... 0x....      BL       LPLD_FTM0_PWM_ChangeDuty
     36              LPLD_FTM0_PWM_ChangeDuty(5,-speed);
   \   00000026   0x4261             RSBS     R1,R4,#+0
   \   00000028   0x2005             MOVS     R0,#+5
   \   0000002A   0x.... 0x....      BL       LPLD_FTM0_PWM_ChangeDuty
     37            }
     38          }
   \                     ??motor_set_left_speed_1:
   \   0000002E   0xBD10             POP      {R4,PC}          ;; return
     39          
     40          

   \                                 In section .text, align 2, keep-with-next
     41          void motor_set_right_speed(int speed)
     42          {
   \                     motor_set_right_speed:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     43            motor_right_speed=speed;
   \   00000004   0x....             LDR.N    R0,??DataTable3_1
   \   00000006   0x6004             STR      R4,[R0, #+0]
     44            if((int)speed>=0)
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD408             BMI.N    ??motor_set_right_speed_0
     45            {
     46              LPLD_FTM0_PWM_ChangeDuty(7,speed);
   \   0000000C   0x0021             MOVS     R1,R4
   \   0000000E   0x2007             MOVS     R0,#+7
   \   00000010   0x.... 0x....      BL       LPLD_FTM0_PWM_ChangeDuty
     47              LPLD_FTM0_PWM_ChangeDuty(6,0);
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x2006             MOVS     R0,#+6
   \   00000018   0x.... 0x....      BL       LPLD_FTM0_PWM_ChangeDuty
   \   0000001C   0xE007             B.N      ??motor_set_right_speed_1
     48            }
     49            else
     50            {
     51              LPLD_FTM0_PWM_ChangeDuty(7,0);
   \                     ??motor_set_right_speed_0:
   \   0000001E   0x2100             MOVS     R1,#+0
   \   00000020   0x2007             MOVS     R0,#+7
   \   00000022   0x.... 0x....      BL       LPLD_FTM0_PWM_ChangeDuty
     52              LPLD_FTM0_PWM_ChangeDuty(6,-speed);
   \   00000026   0x4261             RSBS     R1,R4,#+0
   \   00000028   0x2006             MOVS     R0,#+6
   \   0000002A   0x.... 0x....      BL       LPLD_FTM0_PWM_ChangeDuty
     53            }
     54          }
   \                     ??motor_set_right_speed_1:
   \   0000002E   0xBD10             POP      {R4,PC}          ;; return
     55          

   \                                 In section .text, align 2, keep-with-next
     56          int motor_get_right_speed()
     57          {
     58          	return motor_right_speed;
   \                     motor_get_right_speed:
   \   00000000   0x....             LDR.N    R0,??DataTable3_1
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
     59          }
     60          

   \                                 In section .text, align 2, keep-with-next
     61          int motor_get_left_speed()
     62          {
     63          	return motor_left_speed;
   \                     motor_get_left_speed:
   \   00000000   0x....             LDR.N    R0,??DataTable3
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
     64          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     motor_left_speed

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     motor_right_speed

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  motor_get_left_speed
        0  motor_get_right_speed
        8  motor_init
             8 -> LPLD_FTM0_PWM_Init
             8 -> LPLD_FTM0_PWM_Open
        8  motor_set_left_speed
             8 -> LPLD_FTM0_PWM_ChangeDuty
        8  motor_set_right_speed
             8 -> LPLD_FTM0_PWM_ChangeDuty


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       6  motor_get_left_speed
       6  motor_get_right_speed
      44  motor_init
       4  motor_left_speed
       4  motor_right_speed
      48  motor_set_left_speed
      48  motor_set_right_speed

 
   8 bytes in section .bss
 160 bytes in section .text
 
 160 bytes of CODE memory
   8 bytes of DATA memory

Errors: none
Warnings: none
