###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     06/Jul/2014  14:14:02 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  F:\robot _init\robot\lib\common\assert.c                 #
#    Command line =  "F:\robot _init\robot\lib\common\assert.c" -D IAR -D     #
#                    LPLD_K60 -lCN "F:\robot _init\robot\project\robot_car_co #
#                    m\iar\FLASH\List\" -lB "F:\robot                         #
#                    _init\robot\project\robot_car_com\iar\FLASH\List\" -o    #
#                    "F:\robot _init\robot\project\robot_car_com\iar\FLASH\Ob #
#                    j\" --no_cse --no_unroll --no_inline --no_code_motion    #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M4 -e --fpu=None            #
#                    --dlib_config "D:\IAR Systems\Embedded Workbench         #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I "F:\robot         #
#                    _init\robot\project\robot_car_com\iar\..\app\" -I        #
#                    "F:\robot _init\robot\project\robot_car_com\iar\..\..\.. #
#                    \lib\common\" -I "F:\robot _init\robot\project\robot_car #
#                    _com\iar\..\..\..\lib\cpu\" -I "F:\robot                 #
#                    _init\robot\project\robot_car_com\iar\..\..\..\lib\cpu\h #
#                    eaders\" -I "F:\robot _init\robot\project\robot_car_com\ #
#                    iar\..\..\..\lib\drivers\adc16\" -I "F:\robot            #
#                    _init\robot\project\robot_car_com\iar\..\..\..\lib\drive #
#                    rs\enet\" -I "F:\robot _init\robot\project\robot_car_com #
#                    \iar\..\..\..\lib\drivers\lptmr\" -I "F:\robot           #
#                    _init\robot\project\robot_car_com\iar\..\..\..\lib\drive #
#                    rs\mcg\" -I "F:\robot _init\robot\project\robot_car_com\ #
#                    iar\..\..\..\lib\drivers\pmc\" -I "F:\robot              #
#                    _init\robot\project\robot_car_com\iar\..\..\..\lib\drive #
#                    rs\rtc\" -I "F:\robot _init\robot\project\robot_car_com\ #
#                    iar\..\..\..\lib\drivers\uart\" -I "F:\robot             #
#                    _init\robot\project\robot_car_com\iar\..\..\..\lib\drive #
#                    rs\wdog\" -I "F:\robot _init\robot\project\robot_car_com #
#                    \iar\..\..\..\lib\platforms\" -I "F:\robot               #
#                    _init\robot\project\robot_car_com\iar\..\..\..\lib\LPLD\ #
#                    " -I "F:\robot _init\robot\project\robot_car_com\iar\..\ #
#                    ..\..\lib\LPLD\FatFs\" -I "F:\robot                      #
#                    _init\robot\project\robot_car_com\iar\..\..\..\lib\LPLD\ #
#                    USB\" -I "F:\robot _init\robot\project\robot_car_com\iar #
#                    \..\..\..\lib\iar_config_files\" -Ol                     #
#    List file    =  F:\robot _init\robot\project\robot_car_com\iar\FLASH\Lis #
#                    t\assert.lst                                             #
#    Object file  =  F:\robot _init\robot\project\robot_car_com\iar\FLASH\Obj #
#                    \assert.o                                                #
#                                                                             #
#                                                                             #
###############################################################################

F:\robot _init\robot\lib\common\assert.c
      1          /*
      2           * File:        assert.c
      3           * Purpose:     Provide macro for software assertions
      4           *
      5           * Notes:       ASSERT macro defined in assert.h calls assert_failed()
      6           */
      7          
      8          #include "common.h"
      9          

   \                                 In section .rodata, align 4
     10          const char ASSERT_FAILED_STR[] = "Assertion failed in %s at line %d\n";
   \                     ASSERT_FAILED_STR:
   \   00000000   0x41 0x73          DC8 "Assertion failed in %s at line %d\012"
   \              0x73 0x65    
   \              0x72 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x66 0x61    
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x20 0x69    
   \              0x6E 0x20    
   \              0x25 0x73    
   \              0x20 0x61    
   \              0x74 0x20    
   \              0x6C 0x69    
   \              0x6E 0x65    
   \              0x20 0x25    
   \              0x64 0x0A    
   \              0x00         
   \   00000023   0x00               DC8 0
     11          
     12          /********************************************************************/

   \                                 In section .text, align 4, keep-with-next
     13          void
     14          assert_failed(char *file, int line)
     15          {
     16              int i;
     17              
     18              printf(ASSERT_FAILED_STR, file, line);
   \                     assert_failed:
   \   00000000   0x000A             MOVS     R2,R1
   \   00000002   0x0001             MOVS     R1,R0
   \   00000004   0x4806             LDR.N    R0,??assert_failed_0
   \   00000006   0x.... 0x....      BL       printf
     19          
     20              while (1)
     21              {
     22          //        platform_led_display(0xFF);
     23                  for (i = 100000; i; i--) ;
   \                     ??assert_failed_1:
   \   0000000A   0x4806             LDR.N    R0,??assert_failed_0+0x4  ;; 0x186a0
   \   0000000C   0xE000             B.N      ??assert_failed_2
   \                     ??assert_failed_3:
   \   0000000E   0x1E40             SUBS     R0,R0,#+1
   \                     ??assert_failed_2:
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD1FC             BNE.N    ??assert_failed_3
     24          //        platform_led_display(0x00);
     25                  for (i = 100000; i; i--) ;
   \   00000014   0x4803             LDR.N    R0,??assert_failed_0+0x4  ;; 0x186a0
   \                     ??assert_failed_4:
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD0F7             BEQ.N    ??assert_failed_1
   \   0000001A   0x1E40             SUBS     R0,R0,#+1
   \   0000001C   0xE7FB             B.N      ??assert_failed_4
   \   0000001E   0xBF00             Nop      
   \                     ??assert_failed_0:
   \   00000020   0x........         DC32     ASSERT_FAILED_STR
   \   00000024   0x000186A0         DC32     0x186a0
     26              }
     27          }
     28          /********************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  assert_failed
             0 -> printf


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      36  ASSERT_FAILED_STR
      40  assert_failed

 
 36 bytes in section .rodata
 40 bytes in section .text
 
 40 bytes of CODE  memory
 36 bytes of CONST memory

Errors: none
Warnings: none
