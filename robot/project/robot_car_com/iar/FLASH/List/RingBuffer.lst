###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     06/Jul/2014  14:14:00 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  F:\robot _init\robot\lib\LPLD\USB\RingBuffer.c           #
#    Command line =  "F:\robot _init\robot\lib\LPLD\USB\RingBuffer.c" -D IAR  #
#                    -D LPLD_K60 -lCN "F:\robot _init\robot\project\robot_car #
#                    _com\iar\FLASH\List\" -lB "F:\robot                      #
#                    _init\robot\project\robot_car_com\iar\FLASH\List\" -o    #
#                    "F:\robot _init\robot\project\robot_car_com\iar\FLASH\Ob #
#                    j\" --no_cse --no_unroll --no_inline --no_code_motion    #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M4 -e --fpu=None            #
#                    --dlib_config "D:\IAR Systems\Embedded Workbench         #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I "F:\robot         #
#                    _init\robot\project\robot_car_com\iar\..\app\" -I        #
#                    "F:\robot _init\robot\project\robot_car_com\iar\..\..\.. #
#                    \lib\common\" -I "F:\robot _init\robot\project\robot_car #
#                    _com\iar\..\..\..\lib\cpu\" -I "F:\robot                 #
#                    _init\robot\project\robot_car_com\iar\..\..\..\lib\cpu\h #
#                    eaders\" -I "F:\robot _init\robot\project\robot_car_com\ #
#                    iar\..\..\..\lib\drivers\adc16\" -I "F:\robot            #
#                    _init\robot\project\robot_car_com\iar\..\..\..\lib\drive #
#                    rs\enet\" -I "F:\robot _init\robot\project\robot_car_com #
#                    \iar\..\..\..\lib\drivers\lptmr\" -I "F:\robot           #
#                    _init\robot\project\robot_car_com\iar\..\..\..\lib\drive #
#                    rs\mcg\" -I "F:\robot _init\robot\project\robot_car_com\ #
#                    iar\..\..\..\lib\drivers\pmc\" -I "F:\robot              #
#                    _init\robot\project\robot_car_com\iar\..\..\..\lib\drive #
#                    rs\rtc\" -I "F:\robot _init\robot\project\robot_car_com\ #
#                    iar\..\..\..\lib\drivers\uart\" -I "F:\robot             #
#                    _init\robot\project\robot_car_com\iar\..\..\..\lib\drive #
#                    rs\wdog\" -I "F:\robot _init\robot\project\robot_car_com #
#                    \iar\..\..\..\lib\platforms\" -I "F:\robot               #
#                    _init\robot\project\robot_car_com\iar\..\..\..\lib\LPLD\ #
#                    " -I "F:\robot _init\robot\project\robot_car_com\iar\..\ #
#                    ..\..\lib\LPLD\FatFs\" -I "F:\robot                      #
#                    _init\robot\project\robot_car_com\iar\..\..\..\lib\LPLD\ #
#                    USB\" -I "F:\robot _init\robot\project\robot_car_com\iar #
#                    \..\..\..\lib\iar_config_files\" -Ol                     #
#    List file    =  F:\robot _init\robot\project\robot_car_com\iar\FLASH\Lis #
#                    t\RingBuffer.lst                                         #
#    Object file  =  F:\robot _init\robot\project\robot_car_com\iar\FLASH\Obj #
#                    \RingBuffer.o                                            #
#                                                                             #
#                                                                             #
###############################################################################

F:\robot _init\robot\lib\LPLD\USB\RingBuffer.c
      1          /*
      2           * 文件名: RingBuffer.c
      3           * 用途:  定义缓冲区配置函数
      4           * 最后修改日期: 20121204
      5           *
      6           *
      7           * 说明:本页代码基于Freescale官方示例代码修改，源代码文件为 RingBuffer.c
      8           *    本文件未经修改
      9           */
     10          #include "RingBuffer.h"
     11          
     12          /* Pointers */

   \                                 In section .bss, align 4
     13          volatile UINT8 *OUT_StartAddress;
   \                     OUT_StartAddress:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     14          volatile UINT8 *OUT_EndAddress;
   \                     OUT_EndAddress:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     15          volatile UINT8 *OUT_UsbPointer;
   \                     OUT_UsbPointer:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     16          volatile UINT8 *OUT_SciPointer;
   \                     OUT_SciPointer:
   \   00000000                      DS8 4
     17          
     18          /* Variables */

   \                                 In section .bss, align 1
     19          volatile UINT8 gu8BufferMaxSize;
   \                     gu8BufferMaxSize:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     20          volatile UINT8 gu8BufferOverFlow;
   \                     gu8BufferOverFlow:
   \   00000000                      DS8 1
     21          
     22          
     23          /*
     24          * Buffer_Init
     25          *   USB 缓冲区初始化函数
     26          *
     27          */

   \                                 In section .text, align 2, keep-with-next
     28          void Buffer_Init(UINT8* pu8BufferPointer ,UINT8 u8MaxSize)
     29          {
     30              /* Buffer Initialization */
     31              OUT_EndAddress=pu8BufferPointer+u8MaxSize-1;
   \                     Buffer_Init:
   \   00000000   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000002   0x180A             ADDS     R2,R1,R0
   \   00000004   0x1E52             SUBS     R2,R2,#+1
   \   00000006   0x....             LDR.N    R3,??DataTable1
   \   00000008   0x601A             STR      R2,[R3, #+0]
     32              OUT_StartAddress=pu8BufferPointer;
   \   0000000A   0x....             LDR.N    R2,??DataTable1_1
   \   0000000C   0x6010             STR      R0,[R2, #+0]
     33              gu8BufferMaxSize=u8MaxSize;
   \   0000000E   0x....             LDR.N    R2,??DataTable1_2
   \   00000010   0x7011             STRB     R1,[R2, #+0]
     34              OUT_UsbPointer=pu8BufferPointer;
   \   00000012   0x....             LDR.N    R1,??DataTable1_3
   \   00000014   0x6008             STR      R0,[R1, #+0]
     35              OUT_SciPointer=pu8BufferPointer;
   \   00000016   0x....             LDR.N    R1,??DataTable1_4
   \   00000018   0x6008             STR      R0,[R1, #+0]
     36              gu8BufferOverFlow=0;
   \   0000001A   0x....             LDR.N    R0,??DataTable1_5
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0x7001             STRB     R1,[R0, #+0]
     37          }
   \   00000020   0x4770             BX       LR               ;; return
     38          
     39          
     40          /********************************************************/

   \                                 In section .text, align 2, keep-with-next
     41          UINT8 Buffer_Request(UINT8* pu8DataPointer ,UINT16 u8RequestSize)
     42          {
   \                     Buffer_Request:
   \   00000000   0xB410             PUSH     {R4}
     43              UINT8 u8FreeSpace; 
     44              // Check for OverFlow
     45            
     46              if(gu8BufferOverFlow)
   \   00000002   0x....             LDR.N    R2,??DataTable1_5
   \   00000004   0x7812             LDRB     R2,[R2, #+0]
   \   00000006   0x2A00             CMP      R2,#+0
   \   00000008   0xD001             BEQ.N    ??Buffer_Request_0
     47                  return(NOT_ENOUGH_SPACE);
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0xE03E             B.N      ??Buffer_Request_1
     48              
     49              
     50              // Calculate Free Space
     51              if(OUT_UsbPointer < OUT_SciPointer)
   \                     ??Buffer_Request_0:
   \   0000000E   0x....             LDR.N    R2,??DataTable1_3
   \   00000010   0x6812             LDR      R2,[R2, #+0]
   \   00000012   0x....             LDR.N    R3,??DataTable1_4
   \   00000014   0x681B             LDR      R3,[R3, #+0]
   \   00000016   0x429A             CMP      R2,R3
   \   00000018   0xD205             BCS.N    ??Buffer_Request_2
     52                  u8FreeSpace=(UINT8)(OUT_SciPointer-OUT_UsbPointer);
   \   0000001A   0x....             LDR.N    R2,??DataTable1_4
   \   0000001C   0x6812             LDR      R2,[R2, #+0]
   \   0000001E   0x....             LDR.N    R3,??DataTable1_3
   \   00000020   0x681B             LDR      R3,[R3, #+0]
   \   00000022   0x1AD2             SUBS     R2,R2,R3
   \   00000024   0xE007             B.N      ??Buffer_Request_3
     53              
     54              else
     55                  u8FreeSpace=gu8BufferMaxSize-(OUT_UsbPointer-OUT_SciPointer);
   \                     ??Buffer_Request_2:
   \   00000026   0x....             LDR.N    R2,??DataTable1_2
   \   00000028   0x7812             LDRB     R2,[R2, #+0]
   \   0000002A   0x....             LDR.N    R3,??DataTable1_3
   \   0000002C   0x681B             LDR      R3,[R3, #+0]
   \   0000002E   0x....             LDR.N    R4,??DataTable1_4
   \   00000030   0x6824             LDR      R4,[R4, #+0]
   \   00000032   0x1B1B             SUBS     R3,R3,R4
   \   00000034   0x1AD2             SUBS     R2,R2,R3
     56              
     57              // Validate requested size
     58              if(u8FreeSpace<u8RequestSize)
   \                     ??Buffer_Request_3:
   \   00000036   0x0013             MOVS     R3,R2
   \   00000038   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000003A   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000003C   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000003E   0x428B             CMP      R3,R1
   \   00000040   0xD201             BCS.N    ??Buffer_Request_4
     59                  return(NOT_ENOUGH_SPACE);
   \   00000042   0x2001             MOVS     R0,#+1
   \   00000044   0xE022             B.N      ??Buffer_Request_1
     60                
     61              if(u8FreeSpace==u8RequestSize)
   \                     ??Buffer_Request_4:
   \   00000046   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000048   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000004A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000004C   0x428A             CMP      R2,R1
   \   0000004E   0xD117             BNE.N    ??Buffer_Request_5
     62                  gu8BufferOverFlow=1; 
   \   00000050   0x....             LDR.N    R2,??DataTable1_5
   \   00000052   0x2301             MOVS     R3,#+1
   \   00000054   0x7013             STRB     R3,[R2, #+0]
   \   00000056   0xE013             B.N      ??Buffer_Request_5
     63              // Buffer Copy
     64              while(u8RequestSize--)
     65              {
     66                  *OUT_UsbPointer=*pu8DataPointer;
   \                     ??Buffer_Request_6:
   \   00000058   0x....             LDR.N    R2,??DataTable1_3
   \   0000005A   0x6812             LDR      R2,[R2, #+0]
   \   0000005C   0x7803             LDRB     R3,[R0, #+0]
   \   0000005E   0x7013             STRB     R3,[R2, #+0]
     67                  OUT_UsbPointer++;
   \   00000060   0x....             LDR.N    R2,??DataTable1_3
   \   00000062   0x6812             LDR      R2,[R2, #+0]
   \   00000064   0x1C52             ADDS     R2,R2,#+1
   \   00000066   0x....             LDR.N    R3,??DataTable1_3
   \   00000068   0x601A             STR      R2,[R3, #+0]
     68                  pu8DataPointer++;
   \   0000006A   0x1C40             ADDS     R0,R0,#+1
     69                  if(OUT_UsbPointer > OUT_EndAddress)
   \   0000006C   0x....             LDR.N    R2,??DataTable1
   \   0000006E   0x6812             LDR      R2,[R2, #+0]
   \   00000070   0x....             LDR.N    R3,??DataTable1_3
   \   00000072   0x681B             LDR      R3,[R3, #+0]
   \   00000074   0x429A             CMP      R2,R3
   \   00000076   0xD203             BCS.N    ??Buffer_Request_5
     70                  {
     71                      OUT_UsbPointer=OUT_StartAddress;
   \   00000078   0x....             LDR.N    R2,??DataTable1_3
   \   0000007A   0x....             LDR.N    R3,??DataTable1_1
   \   0000007C   0x681B             LDR      R3,[R3, #+0]
   \   0000007E   0x6013             STR      R3,[R2, #+0]
     72                  }
     73              }
   \                     ??Buffer_Request_5:
   \   00000080   0x000A             MOVS     R2,R1
   \   00000082   0x1E51             SUBS     R1,R2,#+1
   \   00000084   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000086   0x2A00             CMP      R2,#+0
   \   00000088   0xD1E6             BNE.N    ??Buffer_Request_6
     74              return(OK);
   \   0000008A   0x2000             MOVS     R0,#+0
   \                     ??Buffer_Request_1:
   \   0000008C   0xBC10             POP      {R4}
   \   0000008E   0x4770             BX       LR               ;; return
     75          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     OUT_EndAddress

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     OUT_StartAddress

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x........         DC32     gu8BufferMaxSize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x........         DC32     OUT_UsbPointer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x........         DC32     OUT_SciPointer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0x........         DC32     gu8BufferOverFlow

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  Buffer_Init
        4  Buffer_Request


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
      34  Buffer_Init
     144  Buffer_Request
       4  OUT_EndAddress
       4  OUT_SciPointer
       4  OUT_StartAddress
       4  OUT_UsbPointer
       1  gu8BufferMaxSize
       1  gu8BufferOverFlow

 
  18 bytes in section .bss
 202 bytes in section .text
 
 202 bytes of CODE memory
  18 bytes of DATA memory

Errors: none
Warnings: none
