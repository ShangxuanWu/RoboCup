###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     06/Jul/2014  14:13:51 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  F:\robot _init\robot\lib\LPLD\USB\USB_CDC.c              #
#    Command line =  "F:\robot _init\robot\lib\LPLD\USB\USB_CDC.c" -D IAR -D  #
#                    LPLD_K60 -lCN "F:\robot _init\robot\project\robot_car_co #
#                    m\iar\FLASH\List\" -lB "F:\robot                         #
#                    _init\robot\project\robot_car_com\iar\FLASH\List\" -o    #
#                    "F:\robot _init\robot\project\robot_car_com\iar\FLASH\Ob #
#                    j\" --no_cse --no_unroll --no_inline --no_code_motion    #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M4 -e --fpu=None            #
#                    --dlib_config "D:\IAR Systems\Embedded Workbench         #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I "F:\robot         #
#                    _init\robot\project\robot_car_com\iar\..\app\" -I        #
#                    "F:\robot _init\robot\project\robot_car_com\iar\..\..\.. #
#                    \lib\common\" -I "F:\robot _init\robot\project\robot_car #
#                    _com\iar\..\..\..\lib\cpu\" -I "F:\robot                 #
#                    _init\robot\project\robot_car_com\iar\..\..\..\lib\cpu\h #
#                    eaders\" -I "F:\robot _init\robot\project\robot_car_com\ #
#                    iar\..\..\..\lib\drivers\adc16\" -I "F:\robot            #
#                    _init\robot\project\robot_car_com\iar\..\..\..\lib\drive #
#                    rs\enet\" -I "F:\robot _init\robot\project\robot_car_com #
#                    \iar\..\..\..\lib\drivers\lptmr\" -I "F:\robot           #
#                    _init\robot\project\robot_car_com\iar\..\..\..\lib\drive #
#                    rs\mcg\" -I "F:\robot _init\robot\project\robot_car_com\ #
#                    iar\..\..\..\lib\drivers\pmc\" -I "F:\robot              #
#                    _init\robot\project\robot_car_com\iar\..\..\..\lib\drive #
#                    rs\rtc\" -I "F:\robot _init\robot\project\robot_car_com\ #
#                    iar\..\..\..\lib\drivers\uart\" -I "F:\robot             #
#                    _init\robot\project\robot_car_com\iar\..\..\..\lib\drive #
#                    rs\wdog\" -I "F:\robot _init\robot\project\robot_car_com #
#                    \iar\..\..\..\lib\platforms\" -I "F:\robot               #
#                    _init\robot\project\robot_car_com\iar\..\..\..\lib\LPLD\ #
#                    " -I "F:\robot _init\robot\project\robot_car_com\iar\..\ #
#                    ..\..\lib\LPLD\FatFs\" -I "F:\robot                      #
#                    _init\robot\project\robot_car_com\iar\..\..\..\lib\LPLD\ #
#                    USB\" -I "F:\robot _init\robot\project\robot_car_com\iar #
#                    \..\..\..\lib\iar_config_files\" -Ol                     #
#    List file    =  F:\robot _init\robot\project\robot_car_com\iar\FLASH\Lis #
#                    t\USB_CDC.lst                                            #
#    Object file  =  F:\robot _init\robot\project\robot_car_com\iar\FLASH\Obj #
#                    \USB_CDC.o                                               #
#                                                                             #
#                                                                             #
###############################################################################

F:\robot _init\robot\lib\LPLD\USB\USB_CDC.c
      1          /*
      2           *
      3           * 文件名: USB_CDC.c
      4           * 用途: 在该文件中定义了USB CDC类的应用函数
      5           *
      6           * 说明:本页代码基于Freescale官方示例代码修改，源代码文件为 USB_CDC.c
      7           *    在本文件中将CDC_engine函数删除
      8           *    修改了CDC_InterfaceReq_Handler函数中SET_LINE_CODING和SET_CONTROL_LINE_STATE处理过程
      9           */
     10          #include"USB_CDC.h"
     11          /* CDC Global Structures */

   \                                 In section .bss, align 4
     12          CDC_Line_Coding LineCoding;
   \                     LineCoding:
   \   00000000                      DS8 8

   \                                 In section .bss, align 4
     13          UINT8 CDC_OUT_Data[CDC_BUFFER_SIZE];
   \                     CDC_OUT_Data:
   \   00000000                      DS8 128
     14          
     15          /* USB Variables & Flags */
     16          extern UINT8 gu8USB_Flags; 
     17          extern UINT8 gu8USB_State;              
     18          extern tUSB_Setup *Setup_Pkt;
     19          extern UINT8 gu8EP2_IN_ODD_Buffer[];
     20          extern UINT8 gu8EP3_OUT_ODD_Buffer[];
     21          
     22          
     23          extern tBDT tBDTtable[];
     24          extern UINT8 gu8Interface;
     25          
     26          
     27          /*
     28          * LPLD_CDC_Init
     29          *   USB CDC类初始化函数
     30          *    设置CDC类的状态
     31          *    设置CDC类的通讯参数
     32          *    初始化CDC类的数据缓冲
     33          */
     34          

   \                                 In section .text, align 2, keep-with-next
     35          void CDC_Init(void)
     36          {
   \                     CDC_Init:
   \   00000000   0xB580             PUSH     {R7,LR}
     37            /*初始化CDC类通讯的参数*/
     38            LineCoding.DTERate=LWordSwap(120);
   \   00000002   0x2078             MOVS     R0,#+120
   \   00000004   0x.... 0x....      BL       LWordSwap
   \   00000008   0x....             LDR.N    R1,??DataTable1
   \   0000000A   0x6008             STR      R0,[R1, #+0]
     39            LineCoding.CharFormat=0;
   \   0000000C   0x....             LDR.N    R0,??DataTable1
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x7101             STRB     R1,[R0, #+4]
     40            LineCoding.ParityType=0;
   \   00000012   0x....             LDR.N    R0,??DataTable1
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x7141             STRB     R1,[R0, #+5]
     41            LineCoding.Databits=0x08;
   \   00000018   0x....             LDR.N    R0,??DataTable1
   \   0000001A   0x2108             MOVS     R1,#+8
   \   0000001C   0x7181             STRB     R1,[R0, #+6]
     42          
     43            /*初始化CDC类数据缓冲区*/
     44            Buffer_Init(CDC_OUT_Data,CDC_BUFFER_SIZE);
   \   0000001E   0x2180             MOVS     R1,#+128
   \   00000020   0x....             LDR.N    R0,??DataTable1_1
   \   00000022   0x.... 0x....      BL       Buffer_Init
     45          }
   \   00000026   0xBD01             POP      {R0,PC}          ;; return
     46          
     47          /*
     48          * CDC_InterfaceReq_Handler
     49          *   设置 CDC类接口函数
     50          *     将该函数添加到USB setup中断服务函数中去处理
     51          */

   \                                 In section .text, align 2, keep-with-next
     52          UINT8 CDC_InterfaceReq_Handler(void)
     53          {
   \                     CDC_InterfaceReq_Handler:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
     54              UINT8 u8State=uSETUP;
   \   00000002   0x2400             MOVS     R4,#+0
     55              
     56              switch(Setup_Pkt->bRequest)
   \   00000004   0x....             LDR.N    R0,??DataTable1_2
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x7840             LDRB     R0,[R0, #+1]
   \   0000000A   0x280A             CMP      R0,#+10
   \   0000000C   0xD008             BEQ.N    ??CDC_InterfaceReq_Handler_0
   \   0000000E   0x2820             CMP      R0,#+32
   \   00000010   0xD012             BEQ.N    ??CDC_InterfaceReq_Handler_1
   \   00000012   0x2821             CMP      R0,#+33
   \   00000014   0xD00A             BEQ.N    ??CDC_InterfaceReq_Handler_2
   \   00000016   0x2822             CMP      R0,#+34
   \   00000018   0xD024             BEQ.N    ??CDC_InterfaceReq_Handler_3
   \   0000001A   0x28AA             CMP      R0,#+170
   \   0000001C   0xD029             BEQ.N    ??CDC_InterfaceReq_Handler_4
   \   0000001E   0xE036             B.N      ??CDC_InterfaceReq_Handler_5
     57              {        
     58                  case GET_INTERFACE:
     59                      EP_IN_Transfer(EP0,&gu8Interface,1);
   \                     ??CDC_InterfaceReq_Handler_0:
   \   00000020   0x2201             MOVS     R2,#+1
   \   00000022   0x....             LDR.N    R1,??DataTable1_3
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x.... 0x....      BL       EP_IN_Transfer
     60                      break;
   \   0000002A   0xE030             B.N      ??CDC_InterfaceReq_Handler_6
     61          
     62                  case GET_LINE_CODING:
     63                      EP_IN_Transfer(EP0,(UINT8*)&LineCoding,7);
   \                     ??CDC_InterfaceReq_Handler_2:
   \   0000002C   0x2207             MOVS     R2,#+7
   \   0000002E   0x....             LDR.N    R1,??DataTable1
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x.... 0x....      BL       EP_IN_Transfer
     64                      break;
   \   00000036   0xE02A             B.N      ??CDC_InterfaceReq_Handler_6
     65          
     66                  case SET_LINE_CODING:
     67                      u8State=uDATA;
   \                     ??CDC_InterfaceReq_Handler_1:
   \   00000038   0x2401             MOVS     R4,#+1
     68                      if(FLAG_CHK(EP0,gu8USB_Flags))//
   \   0000003A   0x....             LDR.N    R0,??DataTable1_4
   \   0000003C   0x7800             LDRB     R0,[R0, #+0]
   \   0000003E   0x07C0             LSLS     R0,R0,#+31
   \   00000040   0xD50F             BPL.N    ??CDC_InterfaceReq_Handler_7
     69                      {
     70                        FLAG_CLR(EP0,gu8USB_Flags);
   \   00000042   0x....             LDR.N    R0,??DataTable1_4
   \   00000044   0x7800             LDRB     R0,[R0, #+0]
   \   00000046   0xF010 0x00FE      ANDS     R0,R0,#0xFE
   \   0000004A   0x....             LDR.N    R1,??DataTable1_4
   \   0000004C   0x7008             STRB     R0,[R1, #+0]
     71                        (void)EP_OUT_Transfer(EP0,(UINT8*)&LineCoding);
   \   0000004E   0x....             LDR.N    R1,??DataTable1
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0x.... 0x....      BL       EP_OUT_Transfer
   \   00000056   0x0005             MOVS     R5,R0
     72                        EP_IN_Transfer(EP0,0,0);       
   \   00000058   0x2200             MOVS     R2,#+0
   \   0000005A   0x2100             MOVS     R1,#+0
   \   0000005C   0x2000             MOVS     R0,#+0
   \   0000005E   0x.... 0x....      BL       EP_IN_Transfer
     73                      }//
     74                      break;
   \                     ??CDC_InterfaceReq_Handler_7:
   \   00000062   0xE014             B.N      ??CDC_InterfaceReq_Handler_6
     75          
     76                  case SET_CONTROL_LINE_STATE:
     77                      u8State=uSETUP;
   \                     ??CDC_InterfaceReq_Handler_3:
   \   00000064   0x2400             MOVS     R4,#+0
     78                      EP_IN_Transfer(EP0,0,0);//
   \   00000066   0x2200             MOVS     R2,#+0
   \   00000068   0x2100             MOVS     R1,#+0
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0x.... 0x....      BL       EP_IN_Transfer
     79                      break;
   \   00000070   0xE00D             B.N      ??CDC_InterfaceReq_Handler_6
     80          
     81                  case LOADER_MODE:
     82                      Buffer_Init(CDC_OUT_Data,CDC_BUFFER_SIZE);
   \                     ??CDC_InterfaceReq_Handler_4:
   \   00000072   0x2180             MOVS     R1,#+128
   \   00000074   0x....             LDR.N    R0,??DataTable1_1
   \   00000076   0x.... 0x....      BL       Buffer_Init
     83                      FLAG_SET(LOADER,gu8USB_Flags);
   \   0000007A   0x....             LDR.N    R0,??DataTable1_4
   \   0000007C   0x7800             LDRB     R0,[R0, #+0]
   \   0000007E   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   00000082   0x....             LDR.N    R1,??DataTable1_4
   \   00000084   0x7008             STRB     R0,[R1, #+0]
     84                      CDC_OUT_Data[0]=0xFF;
   \   00000086   0x....             LDR.N    R0,??DataTable1_1
   \   00000088   0x21FF             MOVS     R1,#+255
   \   0000008A   0x7001             STRB     R1,[R0, #+0]
     85                      break;
   \   0000008C   0xE7FF             B.N      ??CDC_InterfaceReq_Handler_6
     86                 default:break;
     87              }
     88              return(u8State);
   \                     ??CDC_InterfaceReq_Handler_5:
   \                     ??CDC_InterfaceReq_Handler_6:
   \   0000008E   0x0020             MOVS     R0,R4
   \   00000090   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000092   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     89          }
     90          
     91          
     92          /**********************************************************/

   \                                 In section .text, align 2, keep-with-next
     93          UINT32 LWordSwap(UINT32 u32DataSwap)
     94          {
     95              UINT32 u32Temp;
     96              u32Temp= (u32DataSwap & 0xFF000000) >> 24;
   \                     LWordSwap:
   \   00000000   0x0E01             LSRS     R1,R0,#+24
     97              u32Temp+=(u32DataSwap & 0xFF0000)   >> 8;
   \   00000002   0x0A02             LSRS     R2,R0,#+8
   \   00000004   0xF412 0x427F      ANDS     R2,R2,#0xFF00
   \   00000008   0x1851             ADDS     R1,R2,R1
     98              u32Temp+=(u32DataSwap & 0xFF00)     << 8;
   \   0000000A   0xF410 0x427F      ANDS     R2,R0,#0xFF00
   \   0000000E   0xEB11 0x2102      ADDS     R1,R1,R2, LSL #+8
     99              u32Temp+=(u32DataSwap & 0xFF)       << 24;
   \   00000012   0xEB11 0x6100      ADDS     R1,R1,R0, LSL #+24
    100              return(u32Temp);    
   \   00000016   0x0008             MOVS     R0,R1
   \   00000018   0x4770             BX       LR               ;; return
    101          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     LineCoding

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     CDC_OUT_Data

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x........         DC32     Setup_Pkt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x........         DC32     gu8Interface

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x........         DC32     gu8USB_Flags

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  CDC_Init
              8 -> Buffer_Init
              8 -> LWordSwap
       16  CDC_InterfaceReq_Handler
             16 -> Buffer_Init
             16 -> EP_IN_Transfer
             16 -> EP_OUT_Transfer
        0  LWordSwap


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
      40  CDC_Init
     148  CDC_InterfaceReq_Handler
     128  CDC_OUT_Data
      26  LWordSwap
       8  LineCoding

 
 136 bytes in section .bss
 234 bytes in section .text
 
 234 bytes of CODE memory
 136 bytes of DATA memory

Errors: none
Warnings: none
