###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     06/Jul/2014  14:13:56 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  F:\robot _init\robot\lib\LPLD\HAL_I2C.c                  #
#    Command line =  "F:\robot _init\robot\lib\LPLD\HAL_I2C.c" -D IAR -D      #
#                    LPLD_K60 -lCN "F:\robot _init\robot\project\robot_car_co #
#                    m\iar\FLASH\List\" -lB "F:\robot                         #
#                    _init\robot\project\robot_car_com\iar\FLASH\List\" -o    #
#                    "F:\robot _init\robot\project\robot_car_com\iar\FLASH\Ob #
#                    j\" --no_cse --no_unroll --no_inline --no_code_motion    #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M4 -e --fpu=None            #
#                    --dlib_config "D:\IAR Systems\Embedded Workbench         #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I "F:\robot         #
#                    _init\robot\project\robot_car_com\iar\..\app\" -I        #
#                    "F:\robot _init\robot\project\robot_car_com\iar\..\..\.. #
#                    \lib\common\" -I "F:\robot _init\robot\project\robot_car #
#                    _com\iar\..\..\..\lib\cpu\" -I "F:\robot                 #
#                    _init\robot\project\robot_car_com\iar\..\..\..\lib\cpu\h #
#                    eaders\" -I "F:\robot _init\robot\project\robot_car_com\ #
#                    iar\..\..\..\lib\drivers\adc16\" -I "F:\robot            #
#                    _init\robot\project\robot_car_com\iar\..\..\..\lib\drive #
#                    rs\enet\" -I "F:\robot _init\robot\project\robot_car_com #
#                    \iar\..\..\..\lib\drivers\lptmr\" -I "F:\robot           #
#                    _init\robot\project\robot_car_com\iar\..\..\..\lib\drive #
#                    rs\mcg\" -I "F:\robot _init\robot\project\robot_car_com\ #
#                    iar\..\..\..\lib\drivers\pmc\" -I "F:\robot              #
#                    _init\robot\project\robot_car_com\iar\..\..\..\lib\drive #
#                    rs\rtc\" -I "F:\robot _init\robot\project\robot_car_com\ #
#                    iar\..\..\..\lib\drivers\uart\" -I "F:\robot             #
#                    _init\robot\project\robot_car_com\iar\..\..\..\lib\drive #
#                    rs\wdog\" -I "F:\robot _init\robot\project\robot_car_com #
#                    \iar\..\..\..\lib\platforms\" -I "F:\robot               #
#                    _init\robot\project\robot_car_com\iar\..\..\..\lib\LPLD\ #
#                    " -I "F:\robot _init\robot\project\robot_car_com\iar\..\ #
#                    ..\..\lib\LPLD\FatFs\" -I "F:\robot                      #
#                    _init\robot\project\robot_car_com\iar\..\..\..\lib\LPLD\ #
#                    USB\" -I "F:\robot _init\robot\project\robot_car_com\iar #
#                    \..\..\..\lib\iar_config_files\" -Ol                     #
#    List file    =  F:\robot _init\robot\project\robot_car_com\iar\FLASH\Lis #
#                    t\HAL_I2C.lst                                            #
#    Object file  =  F:\robot _init\robot\project\robot_car_com\iar\FLASH\Obj #
#                    \HAL_I2C.o                                               #
#                                                                             #
#                                                                             #
###############################################################################

F:\robot _init\robot\lib\LPLD\HAL_I2C.c
      1          /*
      2           * --------------"拉普兰德K60底层库"-----------------
      3           *
      4           * 测试硬件平台:LPLD_K60 Card
      5           * 版权所有:北京拉普兰德电子技术有限公司
      6           * 网络销售:http://laplenden.taobao.com
      7           * 公司门户:http://www.lpld.cn
      8           *
      9           * 文件名: HAL_I2C.c
     10           * 用途: I2C底层模块相关函数
     11           * 最后修改日期: 20120402
     12           *
     13           * 开发者使用协议:
     14           *  本代码面向所有使用者开放源代码，开发者可以随意修改源代码。但本段及以上注释应
     15           *  予以保留，不得更改或删除原版权所有者姓名。二次开发者可以加注二次版权所有者，
     16           *  但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     17           */
     18          
     19          #include "common.h"
     20          #include "HAL_I2C.h"
     21          
     22          
     23          
     24          //I2C映射地址数组

   \                                 In section .data, align 4
     25          volatile I2C_MemMapPtr I2Cx_Ptr[2] = {I2C0_BASE_PTR, 
   \                     I2Cx_Ptr:
   \   00000000   0x40066000         DC32 40066000H, 40067000H
   \              0x40067000   
     26                                                I2C1_BASE_PTR};
     27          
     28          /*
     29           * LPLD_I2C_Init
     30           * I2C通用初始化函数
     31           * 
     32           * 参数:
     33           *    i2cx--选择I2C模块号
     34           *      |__I2C0           --I2C0号模块
     35           *      |__I2C1           --I2C1号模块
     36           *    port--通道端口位选择
     37           *      |__0              --I2C0(PTB2-I2C0_SCL PTB3-I2C0_SDA)
     38           *      |                 --I2C1(PTE0-I2C1_SDA PTE1-I2C1_SCL)
     39           *      |__1              --I2C0(PTD8-I2C0_SCL PTD9-I2C0_SDA)
     40           *      |                 --I2C1(PTC10-I2C1_SCL PTC11-I2C1_SDA)
     41           *    scl_frq--选择IIC SCL频率
     42           *      |__I2C_SCL_50KHZ  --50khz
     43           *      |__I2C_SCL_100KHZ --100khz
     44           *      |__I2C_SCL_150KHZ --150khz
     45           *      |__I2C_SCL_200KHZ --200khz
     46           *      |__I2C_SCL_250KHZ --250khz
     47           *      |__I2C_SCL_300KHZ --300khz
     48           * 输出:
     49           *    0--配置错误
     50           *    1--配置成功
     51           */

   \                                 In section .text, align 2, keep-with-next
     52          uint8 LPLD_I2C_Init(I2Cx i2cx, uint8 port, uint8 scl_frq)
     53          {
   \                     LPLD_I2C_Init:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
     54            uint8 ps; 
     55            
     56            //参数检查
     57            ASSERT( i2cx <= I2C1);                            //判断I2Cx模块号
   \   00000008   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000A   0x2C02             CMP      R4,#+2
   \   0000000C   0xD303             BCC.N    ??LPLD_I2C_Init_0
   \   0000000E   0x2139             MOVS     R1,#+57
   \   00000010   0x....             LDR.N    R0,??DataTable7
   \   00000012   0x.... 0x....      BL       assert_failed
     58            ASSERT( scl_frq <= I2C_SCL_300KHZ);               //判断SCL频率
   \                     ??LPLD_I2C_Init_0:
   \   00000016   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000018   0x2E06             CMP      R6,#+6
   \   0000001A   0xD303             BCC.N    ??LPLD_I2C_Init_1
   \   0000001C   0x213A             MOVS     R1,#+58
   \   0000001E   0x....             LDR.N    R0,??DataTable7
   \   00000020   0x.... 0x....      BL       assert_failed
     59            ASSERT( port <= 1);                               //判断端口选择
   \                     ??LPLD_I2C_Init_1:
   \   00000024   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000026   0x2D02             CMP      R5,#+2
   \   00000028   0xD303             BCC.N    ??LPLD_I2C_Init_2
   \   0000002A   0x213B             MOVS     R1,#+59
   \   0000002C   0x....             LDR.N    R0,??DataTable7
   \   0000002E   0x.... 0x....      BL       assert_failed
     60            
     61            //总线频率50mhz
     62            //scl_frq=50mhz/(mul * scl div)
     63            if(scl_frq == I2C_SCL_50KHZ)
   \                     ??LPLD_I2C_Init_2:
   \   00000032   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000034   0x2E00             CMP      R6,#+0
   \   00000036   0xD121             BNE.N    ??LPLD_I2C_Init_3
     64            {
     65              ps=0x33;
   \   00000038   0x2033             MOVS     R0,#+51
     66            }
     67            else if(scl_frq == I2C_SCL_100KHZ)
     68            {
     69              ps=0x2B;
     70            }
     71            else if(scl_frq == I2C_SCL_150KHZ)
     72            {
     73              ps=0x28;
     74            }
     75            else if(scl_frq == I2C_SCL_200KHZ)
     76            {
     77              ps=0x23;
     78            }
     79            else if(scl_frq == I2C_SCL_250KHZ)
     80            {
     81              ps=0x21;
     82            }
     83            else if(scl_frq == I2C_SCL_300KHZ)
     84            {
     85              ps=0x20;
     86            }
     87            else
     88              return 0;
     89          
     90            if(i2cx==I2C0)
   \                     ??LPLD_I2C_Init_4:
   \   0000003A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000003C   0x2C00             CMP      R4,#+0
   \   0000003E   0xD146             BNE.N    ??LPLD_I2C_Init_5
     91            {
     92              if(!port)
   \   00000040   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000042   0x2D00             CMP      R5,#+0
   \   00000044   0xD135             BNE.N    ??LPLD_I2C_Init_6
     93              {
     94                /* configure GPIO for I2C0 function */
     95                PORTB_PCR2 = PORT_PCR_MUX(2);
   \   00000046   0x....             LDR.N    R1,??DataTable7_1  ;; 0x4004a008
   \   00000048   0xF44F 0x7200      MOV      R2,#+512
   \   0000004C   0x600A             STR      R2,[R1, #+0]
     96                PORTB_PCR3 = PORT_PCR_MUX(2);   
   \   0000004E   0x....             LDR.N    R1,??DataTable7_2  ;; 0x4004a00c
   \   00000050   0xF44F 0x7200      MOV      R2,#+512
   \   00000054   0x600A             STR      R2,[R1, #+0]
     97              }
     98              else if(port==1)
     99              {
    100                /* configure GPIO for I2C0 function */
    101                PORTD_PCR8 = PORT_PCR_MUX(2);
    102                PORTD_PCR9 = PORT_PCR_MUX(2);   
    103              }
    104              else
    105                return 0;
    106              
    107              SIM_SCGC4 |= SIM_SCGC4_I2C0_MASK; //开启I2C0时钟
   \                     ??LPLD_I2C_Init_7:
   \   00000056   0x....             LDR.N    R1,??DataTable7_3  ;; 0x40048034
   \   00000058   0x6809             LDR      R1,[R1, #+0]
   \   0000005A   0xF051 0x0140      ORRS     R1,R1,#0x40
   \   0000005E   0x....             LDR.N    R2,??DataTable7_3  ;; 0x40048034
   \   00000060   0x6011             STR      R1,[R2, #+0]
    108            }
    109            else if(i2cx==I2C1)
    110            {
    111              if(!port)
    112              {
    113                /* configure GPIO for I2C0 function */
    114                PORTE_PCR0 = PORT_PCR_MUX(6);
    115                PORTE_PCR1 = PORT_PCR_MUX(6);   
    116              }
    117              else if(port==1)
    118              {
    119                /* configure GPIO for I2C0 function */
    120                PORTC_PCR10 = PORT_PCR_MUX(2);
    121                PORTC_PCR11 = PORT_PCR_MUX(2);   
    122              }
    123              else
    124                return 0;
    125              
    126              SIM_SCGC4 |= SIM_SCGC4_I2C1_MASK; //开启IIC1时钟
    127            }
    128            else
    129              return 0;
    130            
    131            I2C_F_REG(I2Cx_Ptr[i2cx]) = ps;
   \                     ??LPLD_I2C_Init_8:
   \   00000062   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000064   0x....             LDR.N    R1,??DataTable7_4
   \   00000066   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   0000006A   0x7048             STRB     R0,[R1, #+1]
    132            I2C_C1_REG(I2Cx_Ptr[i2cx]) = I2C_C1_IICEN_MASK;      //使能I2Cx
   \   0000006C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000006E   0x....             LDR.N    R0,??DataTable7_4
   \   00000070   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000074   0x2180             MOVS     R1,#+128
   \   00000076   0x7081             STRB     R1,[R0, #+2]
    133            
    134            return 1;
   \   00000078   0x2001             MOVS     R0,#+1
   \                     ??LPLD_I2C_Init_9:
   \   0000007A   0xBD70             POP      {R4-R6,PC}       ;; return
   \                     ??LPLD_I2C_Init_3:
   \   0000007C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000007E   0x2E01             CMP      R6,#+1
   \   00000080   0xD101             BNE.N    ??LPLD_I2C_Init_10
   \   00000082   0x202B             MOVS     R0,#+43
   \   00000084   0xE7D9             B.N      ??LPLD_I2C_Init_4
   \                     ??LPLD_I2C_Init_10:
   \   00000086   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000088   0x2E02             CMP      R6,#+2
   \   0000008A   0xD101             BNE.N    ??LPLD_I2C_Init_11
   \   0000008C   0x2028             MOVS     R0,#+40
   \   0000008E   0xE7D4             B.N      ??LPLD_I2C_Init_4
   \                     ??LPLD_I2C_Init_11:
   \   00000090   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000092   0x2E03             CMP      R6,#+3
   \   00000094   0xD101             BNE.N    ??LPLD_I2C_Init_12
   \   00000096   0x2023             MOVS     R0,#+35
   \   00000098   0xE7CF             B.N      ??LPLD_I2C_Init_4
   \                     ??LPLD_I2C_Init_12:
   \   0000009A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000009C   0x2E04             CMP      R6,#+4
   \   0000009E   0xD101             BNE.N    ??LPLD_I2C_Init_13
   \   000000A0   0x2021             MOVS     R0,#+33
   \   000000A2   0xE7CA             B.N      ??LPLD_I2C_Init_4
   \                     ??LPLD_I2C_Init_13:
   \   000000A4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000A6   0x2E05             CMP      R6,#+5
   \   000000A8   0xD101             BNE.N    ??LPLD_I2C_Init_14
   \   000000AA   0x2020             MOVS     R0,#+32
   \   000000AC   0xE7C5             B.N      ??LPLD_I2C_Init_4
   \                     ??LPLD_I2C_Init_14:
   \   000000AE   0x2000             MOVS     R0,#+0
   \   000000B0   0xE7E3             B.N      ??LPLD_I2C_Init_9
   \                     ??LPLD_I2C_Init_6:
   \   000000B2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000B4   0x2D01             CMP      R5,#+1
   \   000000B6   0xD108             BNE.N    ??LPLD_I2C_Init_15
   \   000000B8   0x....             LDR.N    R1,??DataTable7_5  ;; 0x4004c020
   \   000000BA   0xF44F 0x7200      MOV      R2,#+512
   \   000000BE   0x600A             STR      R2,[R1, #+0]
   \   000000C0   0x....             LDR.N    R1,??DataTable7_6  ;; 0x4004c024
   \   000000C2   0xF44F 0x7200      MOV      R2,#+512
   \   000000C6   0x600A             STR      R2,[R1, #+0]
   \   000000C8   0xE7C5             B.N      ??LPLD_I2C_Init_7
   \                     ??LPLD_I2C_Init_15:
   \   000000CA   0x2000             MOVS     R0,#+0
   \   000000CC   0xE7D5             B.N      ??LPLD_I2C_Init_9
   \                     ??LPLD_I2C_Init_5:
   \   000000CE   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000D0   0x2C01             CMP      R4,#+1
   \   000000D2   0xD11F             BNE.N    ??LPLD_I2C_Init_16
   \   000000D4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000D6   0x2D00             CMP      R5,#+0
   \   000000D8   0xD10E             BNE.N    ??LPLD_I2C_Init_17
   \   000000DA   0x....             LDR.N    R1,??DataTable7_7  ;; 0x4004d000
   \   000000DC   0xF44F 0x62C0      MOV      R2,#+1536
   \   000000E0   0x600A             STR      R2,[R1, #+0]
   \   000000E2   0x....             LDR.N    R1,??DataTable7_8  ;; 0x4004d004
   \   000000E4   0xF44F 0x62C0      MOV      R2,#+1536
   \   000000E8   0x600A             STR      R2,[R1, #+0]
   \                     ??LPLD_I2C_Init_18:
   \   000000EA   0x....             LDR.N    R1,??DataTable7_3  ;; 0x40048034
   \   000000EC   0x6809             LDR      R1,[R1, #+0]
   \   000000EE   0xF051 0x0180      ORRS     R1,R1,#0x80
   \   000000F2   0x....             LDR.N    R2,??DataTable7_3  ;; 0x40048034
   \   000000F4   0x6011             STR      R1,[R2, #+0]
   \   000000F6   0xE7B4             B.N      ??LPLD_I2C_Init_8
   \                     ??LPLD_I2C_Init_17:
   \   000000F8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000FA   0x2D01             CMP      R5,#+1
   \   000000FC   0xD108             BNE.N    ??LPLD_I2C_Init_19
   \   000000FE   0x....             LDR.N    R1,??DataTable7_9  ;; 0x4004b028
   \   00000100   0xF44F 0x7200      MOV      R2,#+512
   \   00000104   0x600A             STR      R2,[R1, #+0]
   \   00000106   0x....             LDR.N    R1,??DataTable7_10  ;; 0x4004b02c
   \   00000108   0xF44F 0x7200      MOV      R2,#+512
   \   0000010C   0x600A             STR      R2,[R1, #+0]
   \   0000010E   0xE7EC             B.N      ??LPLD_I2C_Init_18
   \                     ??LPLD_I2C_Init_19:
   \   00000110   0x2000             MOVS     R0,#+0
   \   00000112   0xE7B2             B.N      ??LPLD_I2C_Init_9
   \                     ??LPLD_I2C_Init_16:
   \   00000114   0x2000             MOVS     R0,#+0
   \   00000116   0xE7B0             B.N      ??LPLD_I2C_Init_9
    135          }
    136          
    137          
    138          /*
    139           * LPLD_I2C_Start
    140           * I2C开始信号产生
    141           * 
    142           * 参数:
    143           *    i2cx--选择I2C模块号
    144           *      |__I2C0           --I2C0号模块
    145           *      |__I2C1           --I2C1号模块
    146           */

   \                                 In section .text, align 2, keep-with-next
    147          void LPLD_I2C_Start(I2Cx i2cx)
    148          {
    149            I2C_MemMapPtr i2cptr = I2Cx_Ptr[i2cx];
   \                     LPLD_I2C_Start:
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0x....             LDR.N    R1,??DataTable7_4
   \   00000004   0xF851 0x0020      LDR      R0,[R1, R0, LSL #+2]
    150            I2C_C1_REG(i2cptr) |= I2C_C1_TX_MASK ;
   \   00000008   0x7881             LDRB     R1,[R0, #+2]
   \   0000000A   0xF051 0x0110      ORRS     R1,R1,#0x10
   \   0000000E   0x7081             STRB     R1,[R0, #+2]
    151            I2C_C1_REG(i2cptr) |= I2C_C1_MST_MASK ;
   \   00000010   0x7881             LDRB     R1,[R0, #+2]
   \   00000012   0xF051 0x0120      ORRS     R1,R1,#0x20
   \   00000016   0x7081             STRB     R1,[R0, #+2]
    152          }
   \   00000018   0x4770             BX       LR               ;; return
    153          
    154          
    155          /*
    156           * LPLD_ReStart
    157           * I2C再次产生开始信号
    158           * 
    159           * 参数:
    160           *    i2cx--选择I2C模块号
    161           *      |__I2C0           --I2C0号模块
    162           *      |__I2C1           --I2C1号模块
    163          */

   \                                 In section .text, align 2, keep-with-next
    164          void LPLD_I2C_ReStart(I2Cx i2cx)
    165          {
    166            I2C_MemMapPtr i2cptr = I2Cx_Ptr[i2cx];
   \                     LPLD_I2C_ReStart:
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0x....             LDR.N    R1,??DataTable7_4
   \   00000004   0xF851 0x0020      LDR      R0,[R1, R0, LSL #+2]
    167            I2C_C1_REG(i2cptr) |= I2C_C1_RSTA_MASK ;
   \   00000008   0x7881             LDRB     R1,[R0, #+2]
   \   0000000A   0xF051 0x0104      ORRS     R1,R1,#0x4
   \   0000000E   0x7081             STRB     R1,[R0, #+2]
    168          }
   \   00000010   0x4770             BX       LR               ;; return
    169          
    170          
    171          /*
    172           * LPLD_I2C_Stop
    173           * I2C停止信号产生
    174           * 
    175           * 参数:
    176           *    i2cx--选择I2C模块号
    177           *      |__I2C0           --I2C0号模块
    178           *      |__I2C1           --I2C1号模块
    179           */

   \                                 In section .text, align 2, keep-with-next
    180          void LPLD_I2C_Stop(I2Cx i2cx)
    181          {
    182            I2C_MemMapPtr i2cptr = I2Cx_Ptr[i2cx];
   \                     LPLD_I2C_Stop:
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0x....             LDR.N    R1,??DataTable7_4
   \   00000004   0xF851 0x0020      LDR      R0,[R1, R0, LSL #+2]
    183            I2C_C1_REG(i2cptr) &=(~I2C_C1_MST_MASK);
   \   00000008   0x7881             LDRB     R1,[R0, #+2]
   \   0000000A   0xF011 0x01DF      ANDS     R1,R1,#0xDF
   \   0000000E   0x7081             STRB     R1,[R0, #+2]
    184            I2C_C1_REG(i2cptr) &=(~I2C_C1_TX_MASK); 
   \   00000010   0x7881             LDRB     R1,[R0, #+2]
   \   00000012   0xF011 0x01EF      ANDS     R1,R1,#0xEF
   \   00000016   0x7081             STRB     R1,[R0, #+2]
    185          }
   \   00000018   0x4770             BX       LR               ;; return
    186          
    187          
    188          /*
    189           * LPLD_I2C_WaitAck
    190           * I2C设置等待应答信号，开启则等待，关闭则不等待
    191           * 
    192           * 参数:
    193           *    i2cx--选择I2C模块号
    194           *      |__I2C0           --I2C0号模块
    195           *      |__I2C1           --I2C1号模块
    196           *    is_wait--选择是否等待应答
    197           *      |__I2C_ACK_OFF    --关闭等待Ack
    198           *      |__I2C_ACK_ON     --开启等待Ack，并等待ACK信号
    199           */

   \                                 In section .text, align 2, keep-with-next
    200          void LPLD_I2C_WaitAck(I2Cx i2cx, uint8 is_wait)
    201          {
    202            I2C_MemMapPtr i2cptr = I2Cx_Ptr[i2cx];
   \                     LPLD_I2C_WaitAck:
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0x....             LDR.N    R2,??DataTable7_4
   \   00000004   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
    203            uint16 time_out;
    204            if(is_wait == I2C_ACK_ON)
   \   00000008   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000A   0x2901             CMP      R1,#+1
   \   0000000C   0xD005             BEQ.N    ??LPLD_I2C_WaitAck_0
    205            {
    206              while(!(I2C_S_REG(I2Cx_Ptr[i2cx]) & I2C_S_IICIF_MASK))
    207              {
    208                if(time_out>60000) //如果等待超时，强行退出
    209                  break;
    210                else time_out++;
    211              }
    212              I2C_S_REG(i2cptr) |= I2C_S_IICIF_MASK;
    213            }
    214            else
    215            {
    216              //关闭I2C的ACK
    217              I2C_C1_REG(i2cptr) |= I2C_C1_TXAK_MASK; 
   \   0000000E   0x7890             LDRB     R0,[R2, #+2]
   \   00000010   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   00000014   0x7090             STRB     R0,[R2, #+2]
    218            }
    219          }
   \                     ??LPLD_I2C_WaitAck_1:
   \   00000016   0x4770             BX       LR               ;; return
   \                     ??LPLD_I2C_WaitAck_2:
   \   00000018   0x1C5B             ADDS     R3,R3,#+1
   \                     ??LPLD_I2C_WaitAck_0:
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0x....             LDR.N    R1,??DataTable7_4
   \   0000001E   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   00000022   0x78C9             LDRB     R1,[R1, #+3]
   \   00000024   0x0789             LSLS     R1,R1,#+30
   \   00000026   0xD404             BMI.N    ??LPLD_I2C_WaitAck_3
   \   00000028   0xF64E 0x2161      MOVW     R1,#+60001
   \   0000002C   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000002E   0x428B             CMP      R3,R1
   \   00000030   0xD3F2             BCC.N    ??LPLD_I2C_WaitAck_2
   \                     ??LPLD_I2C_WaitAck_3:
   \   00000032   0x78D0             LDRB     R0,[R2, #+3]
   \   00000034   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000038   0x70D0             STRB     R0,[R2, #+3]
   \   0000003A   0xE7EC             B.N      ??LPLD_I2C_WaitAck_1
    220          
    221          
    222          /*
    223           * LPLD_I2C_Write
    224           * I2C发送一个字节数据给目的地址设备
    225           * 
    226           * 参数:
    227           *    i2cx--选择I2C模块号
    228           *      |__I2C0           --I2C0号模块
    229           *      |__I2C1           --I2C1号模块
    230           *    data8--要发送的字节数据
    231           *
    232           */

   \                                 In section .text, align 2, keep-with-next
    233          void LPLD_I2C_Write(I2Cx i2cx, uint8 data8)
    234          {
    235            I2C_D_REG(I2Cx_Ptr[i2cx]) = data8; 
   \                     LPLD_I2C_Write:
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0x....             LDR.N    R2,??DataTable7_4
   \   00000004   0xF852 0x0020      LDR      R0,[R2, R0, LSL #+2]
   \   00000008   0x7101             STRB     R1,[R0, #+4]
    236          }
   \   0000000A   0x4770             BX       LR               ;; return
    237          
    238          
    239          /*
    240           * LPLD_I2C_Read
    241           * I2C从外部设备读一个字节数据
    242           * 
    243           * 参数:
    244           *    i2cx--选择I2C模块号
    245           *      |__I2C0           --I2C0号模块
    246           *      |__I2C1           --I2C1号模块
    247           * 返回值:
    248           *    I2C读取的数据 
    249           */
    250          

   \                                 In section .text, align 2, keep-with-next
    251          uint8 LPLD_I2C_Read(I2Cx i2cx)
    252          {
    253            uint8 temp;
    254            temp = I2C_D_REG(I2Cx_Ptr[i2cx]); 
   \                     LPLD_I2C_Read:
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0x....             LDR.N    R1,??DataTable7_4
   \   00000004   0xF851 0x0020      LDR      R0,[R1, R0, LSL #+2]
   \   00000008   0x7900             LDRB     R0,[R0, #+4]
    255            return temp;
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0x4770             BX       LR               ;; return
    256          }
    257          
    258          /*
    259           * LPLD_I2C_SetMasterWR
    260           * I2C主机读写模式配置
    261           * 
    262           * 参数:
    263           *    IICx--选择I2C模块的通道
    264           *      |__0 I2C0
    265           *      |__1 I2C1
    266           *    mode--读写模式选择
    267           *      |__I2C_MWSR         --主机写
    268           *      |__I2C_MRSW         --主机读
    269           */
    270          

   \                                 In section .text, align 2, keep-with-next
    271          void LPLD_I2C_SetMasterWR(I2Cx i2cx, uint8 mode)
    272          {
    273            I2C_MemMapPtr i2cptr = I2Cx_Ptr[i2cx];
   \                     LPLD_I2C_SetMasterWR:
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0x....             LDR.N    R2,??DataTable7_4
   \   00000004   0xF852 0x0020      LDR      R0,[R2, R0, LSL #+2]
    274            if(mode==I2C_MRSW) 
   \   00000008   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000A   0x2901             CMP      R1,#+1
   \   0000000C   0xD104             BNE.N    ??LPLD_I2C_SetMasterWR_0
    275              I2C_C1_REG(i2cptr) &= (~I2C_C1_TX_MASK);
   \   0000000E   0x7881             LDRB     R1,[R0, #+2]
   \   00000010   0xF011 0x01EF      ANDS     R1,R1,#0xEF
   \   00000014   0x7081             STRB     R1,[R0, #+2]
   \   00000016   0xE003             B.N      ??LPLD_I2C_SetMasterWR_1
    276            else
    277              I2C_C1_REG(i2cptr) |= ( I2C_C1_TX_MASK);
   \                     ??LPLD_I2C_SetMasterWR_0:
   \   00000018   0x7881             LDRB     R1,[R0, #+2]
   \   0000001A   0xF051 0x0110      ORRS     R1,R1,#0x10
   \   0000001E   0x7081             STRB     R1,[R0, #+2]
    278          }
   \                     ??LPLD_I2C_SetMasterWR_1:
   \   00000020   0x4770             BX       LR               ;; return
    279          
    280          /*
    281           * LPLD_IIC_StartTrans
    282           * I2C开始传输函数，需要设置外围设备地址和读写模式
    283           * 
    284           * 参数:
    285           *    IICx--选择I2C模块的通道
    286           *      |__0 I2C0
    287           *      |__1 I2C1
    288           *    addr--外围设备地址     
    289           *    mode--读写模式选择
    290           *      |__I2C_MWSR         --主机写
    291           *      |__I2C_MRSW         --主机读
    292           */

   \                                 In section .text, align 2, keep-with-next
    293          void LPLD_I2C_StartTrans(I2Cx i2cx, uint8 addr, uint8 mode)
    294          {
   \                     LPLD_I2C_StartTrans:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    295            //I2C产生start信号
    296            LPLD_I2C_Start(i2cx);
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0x.... 0x....      BL       LPLD_I2C_Start
    297            //将从机地址和主机读写位合成一个字节写入
    298            LPLD_I2C_Write(i2cx, (addr<<1)|mode );
   \   00000010   0xEA56 0x0145      ORRS     R1,R6,R5, LSL #+1
   \   00000014   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000016   0x0020             MOVS     R0,R4
   \   00000018   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001A   0x.... 0x....      BL       LPLD_I2C_Write
    299          }
   \   0000001E   0xBD70             POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x........         DC32     `?<Constant "F:\\\\robot _init\\\\robot\\\\...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x4004A008         DC32     0x4004a008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x4004A00C         DC32     0x4004a00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x40048034         DC32     0x40048034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0x........         DC32     I2Cx_Ptr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   0x4004C020         DC32     0x4004c020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \   00000000   0x4004C024         DC32     0x4004c024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \   00000000   0x4004D000         DC32     0x4004d000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_8:
   \   00000000   0x4004D004         DC32     0x4004d004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_9:
   \   00000000   0x4004B028         DC32     0x4004b028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_10:
   \   00000000   0x4004B02C         DC32     0x4004b02c

   \                                 In section .rodata, align 4
   \                     `?<Constant "F:\\\\robot _init\\\\robot\\\\...">`:
   \   00000000   0x46 0x3A          DC8 "F:\\robot _init\\robot\\lib\\LPLD\\HAL_I2C.c"
   \              0x5C 0x72    
   \              0x6F 0x62    
   \              0x6F 0x74    
   \              0x20 0x5F    
   \              0x69 0x6E    
   \              0x69 0x74    
   \              0x5C 0x72    
   \              0x6F 0x62    
   \              0x6F 0x74    
   \              0x5C 0x6C    
   \              0x69 0x62    
   \              0x5C 0x4C    
   \              0x50 0x4C    
   \              0x44 0x5C    
   \              0x48 0x41    
   \              0x4C 0x5F    
   \              0x49 0x32    
   \              0x43 0x2E    
   \              0x63 0x00    
    300          
    301          
    302          
    303          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       16  LPLD_I2C_Init
             16 -> assert_failed
        0  LPLD_I2C_ReStart
        0  LPLD_I2C_Read
        0  LPLD_I2C_SetMasterWR
        0  LPLD_I2C_Start
       16  LPLD_I2C_StartTrans
             16 -> LPLD_I2C_Start
             16 -> LPLD_I2C_Write
        0  LPLD_I2C_Stop
        0  LPLD_I2C_WaitAck
        0  LPLD_I2C_Write


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      40  ?<Constant "F:\\robot _init\\robot\\...">
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_10
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
       8  I2Cx_Ptr
     280  LPLD_I2C_Init
      18  LPLD_I2C_ReStart
      14  LPLD_I2C_Read
      34  LPLD_I2C_SetMasterWR
      26  LPLD_I2C_Start
      32  LPLD_I2C_StartTrans
      26  LPLD_I2C_Stop
      60  LPLD_I2C_WaitAck
      12  LPLD_I2C_Write

 
   8 bytes in section .data
  40 bytes in section .rodata
 546 bytes in section .text
 
 546 bytes of CODE  memory
  40 bytes of CONST memory
   8 bytes of DATA  memory

Errors: none
Warnings: none
