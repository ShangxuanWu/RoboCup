###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     06/Jul/2014  14:13:55 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  F:\robot _init\robot\lib\LPLD\HAL_ENET.c                 #
#    Command line =  "F:\robot _init\robot\lib\LPLD\HAL_ENET.c" -D IAR -D     #
#                    LPLD_K60 -lCN "F:\robot _init\robot\project\robot_car_co #
#                    m\iar\FLASH\List\" -lB "F:\robot                         #
#                    _init\robot\project\robot_car_com\iar\FLASH\List\" -o    #
#                    "F:\robot _init\robot\project\robot_car_com\iar\FLASH\Ob #
#                    j\" --no_cse --no_unroll --no_inline --no_code_motion    #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M4 -e --fpu=None            #
#                    --dlib_config "D:\IAR Systems\Embedded Workbench         #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I "F:\robot         #
#                    _init\robot\project\robot_car_com\iar\..\app\" -I        #
#                    "F:\robot _init\robot\project\robot_car_com\iar\..\..\.. #
#                    \lib\common\" -I "F:\robot _init\robot\project\robot_car #
#                    _com\iar\..\..\..\lib\cpu\" -I "F:\robot                 #
#                    _init\robot\project\robot_car_com\iar\..\..\..\lib\cpu\h #
#                    eaders\" -I "F:\robot _init\robot\project\robot_car_com\ #
#                    iar\..\..\..\lib\drivers\adc16\" -I "F:\robot            #
#                    _init\robot\project\robot_car_com\iar\..\..\..\lib\drive #
#                    rs\enet\" -I "F:\robot _init\robot\project\robot_car_com #
#                    \iar\..\..\..\lib\drivers\lptmr\" -I "F:\robot           #
#                    _init\robot\project\robot_car_com\iar\..\..\..\lib\drive #
#                    rs\mcg\" -I "F:\robot _init\robot\project\robot_car_com\ #
#                    iar\..\..\..\lib\drivers\pmc\" -I "F:\robot              #
#                    _init\robot\project\robot_car_com\iar\..\..\..\lib\drive #
#                    rs\rtc\" -I "F:\robot _init\robot\project\robot_car_com\ #
#                    iar\..\..\..\lib\drivers\uart\" -I "F:\robot             #
#                    _init\robot\project\robot_car_com\iar\..\..\..\lib\drive #
#                    rs\wdog\" -I "F:\robot _init\robot\project\robot_car_com #
#                    \iar\..\..\..\lib\platforms\" -I "F:\robot               #
#                    _init\robot\project\robot_car_com\iar\..\..\..\lib\LPLD\ #
#                    " -I "F:\robot _init\robot\project\robot_car_com\iar\..\ #
#                    ..\..\lib\LPLD\FatFs\" -I "F:\robot                      #
#                    _init\robot\project\robot_car_com\iar\..\..\..\lib\LPLD\ #
#                    USB\" -I "F:\robot _init\robot\project\robot_car_com\iar #
#                    \..\..\..\lib\iar_config_files\" -Ol                     #
#    List file    =  F:\robot _init\robot\project\robot_car_com\iar\FLASH\Lis #
#                    t\HAL_ENET.lst                                           #
#    Object file  =  F:\robot _init\robot\project\robot_car_com\iar\FLASH\Obj #
#                    \HAL_ENET.o                                              #
#                                                                             #
#                                                                             #
###############################################################################

F:\robot _init\robot\lib\LPLD\HAL_ENET.c
      1          /*
      2           * --------------"拉普兰德K60底层库"-----------------
      3           *
      4           * 测试硬件平台:LPLD_K60 Card
      5           * 版权所有:北京拉普兰德电子技术有限公司
      6           * 网络销售:http://laplenden.taobao.com
      7           * 公司门户:http://www.lpld.cn
      8           *
      9           * 文件名: HAL_ENET.c
     10           * 用途: ENET底层模块相关函数
     11           * 最后修改日期: 20120920
     12           *
     13           * 开发者使用协议:
     14           *  本代码面向所有使用者开放源代码，开发者可以随意修改源代码。但本段及以上注释应
     15           *  予以保留，不得更改或删除原版权所有者姓名。二次开发者可以加注二次版权所有者，
     16           *  但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     17           */
     18          /*
     19           *******需用到ENET中断，请在isr.h中粘贴一下代码:*********
     20          
     21          //ENET模块中断服务定义
     22          #undef  VECTOR_092
     23          #define VECTOR_092 LPLD_ENET_TXF_Isr
     24          #undef  VECTOR_093
     25          #define VECTOR_093 LPLD_ENET_RXF_Isr
     26          //以下函数在LPLD_Kinetis底层包，不必修改
     27          extern void LPLD_ENET_TXF_Isr(void);
     28          extern void LPLD_ENET_RXF_Isr(void);
     29          
     30           ***********************代码结束*************************
     31          */
     32          #include "common.h"
     33          #include "HAL_ENET.h"

   \                                 In section .bss, align 4
   \   static __absolute unsigned char xENETTxDescriptors_unaligned[24U]
   \                     xENETTxDescriptors_unaligned:
   \   00000000                      DS8 24

   \                                 In section .bss, align 4
   \   static __absolute unsigned char xENETRxDescriptors_unaligned[80U]
   \                     xENETRxDescriptors_unaligned:
   \   00000000                      DS8 80

   \                                 In section .bss, align 4
   \   static __absolute unsigned char ucENETRxBuffers[2064]
   \                     ucENETRxBuffers:
   \   00000000                      DS8 2064

   \                                 In section .bss, align 4
   \   static __absolute NBUF *xENETTxDescriptors
   \                     xENETTxDescriptors:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \   static __absolute NBUF *xENETRxDescriptors
   \                     xENETRxDescriptors:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \   static __absolute unsigned long uxNextRxBuffer
   \                     uxNextRxBuffer:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \   static __absolute unsigned long uxNextTxBuffer
   \                     uxNextTxBuffer:
   \   00000000                      DS8 4
     34          
     35          //引用外部变量
     36          extern int periph_clk_khz;;
     37          
     38          //用户自定义中断服务函数数组

   \                                 In section .bss, align 4
     39          ENET_ISR_CALLBACK ENET_ISR[4]={NULL, NULL, NULL, NULL};
   \                     ENET_ISR:
   \   00000000                      DS8 16
     40          
     41          //内部函数声明
     42          static void LPLD_ENET_BDInit( void );
     43          static void LPLD_ENET_Delay(uint32 time);
     44          
     45          
     46          /*******************************************************************
     47           *
     48           *                ENET模块函数
     49           *
     50          *******************************************************************/
     51          
     52          /*
     53           * LPLD_ENET_Init
     54           * ENET模块初始化，包括PHY收发器初始化，MAC初始化，BD初始化
     55           * 
     56           * 参数:
     57           *    *MACAddress--MAC地址指针
     58           *
     59           * 输出:
     60           *    无
     61           */

   \                                 In section .text, align 4, keep-with-next
     62          void LPLD_ENET_Init(const uint8* MACAddress)
     63          {
   \                     LPLD_ENET_Init:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
     64           
     65            uint16 usData;
     66           
     67            //使能ENET时钟
     68            SIM_SCGC2 |= SIM_SCGC2_ENET_MASK;
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable11  ;; 0x4004802c
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable11  ;; 0x4004802c
   \   00000014   0x6008             STR      R0,[R1, #+0]
     69          
     70            //允许并发访问MPU控制器
     71            MPU_CESR = 0;         
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable11_1  ;; 0x4000d000
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0x6001             STR      R1,[R0, #+0]
     72                  
     73            //缓冲区描述符初始化
     74            LPLD_ENET_BDInit();
   \   0000001E   0x.... 0x....      BL       LPLD_ENET_BDInit
     75            
     76            //复位ENET
     77            ENET_ECR = ENET_ECR_RESET_MASK;
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable11_2  ;; 0x400c0024
   \   00000026   0x2101             MOVS     R1,#+1
   \   00000028   0x6001             STR      R1,[R0, #+0]
     78          
     79            //等待至少8个时钟周期
     80            for( usData = 0; usData < 10; usData++ )
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \   00000030   0xE005             B.N      ??LPLD_ENET_Init_0
     81            {
     82              asm( "NOP" );
   \                     ??LPLD_ENET_Init_1:
   \   00000032   0xBF00             NOP
     83            }
   \   00000034   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000038   0x1C40             ADDS     R0,R0,#+1
   \   0000003A   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \                     ??LPLD_ENET_Init_0:
   \   0000003E   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000042   0x280A             CMP      R0,#+10
   \   00000044   0xD3F5             BCC.N    ??LPLD_ENET_Init_1
     84              
     85            //初始化MII接口
     86            LPLD_ENET_MiiInit(periph_clk_khz/1000/*MHz*/);       
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable11_3
   \   0000004A   0x6800             LDR      R0,[R0, #+0]
   \   0000004C   0xF44F 0x717A      MOV      R1,#+1000
   \   00000050   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000054   0x.... 0x....      BL       LPLD_ENET_MiiInit
     87                  
     88            //使能中断并设置优先级
     89            set_irq_priority (76, 6);
   \   00000058   0x2106             MOVS     R1,#+6
   \   0000005A   0x204C             MOVS     R0,#+76
   \   0000005C   0x.... 0x....      BL       set_irq_priority
     90            enable_irq(76);           //ENET发送中断
   \   00000060   0x204C             MOVS     R0,#+76
   \   00000062   0x.... 0x....      BL       enable_irq
     91            set_irq_priority (77, 6);
   \   00000066   0x2106             MOVS     R1,#+6
   \   00000068   0x204D             MOVS     R0,#+77
   \   0000006A   0x.... 0x....      BL       set_irq_priority
     92            enable_irq(77);           //ENET接收中断
   \   0000006E   0x204D             MOVS     R0,#+77
   \   00000070   0x.... 0x....      BL       enable_irq
     93            //set_irq_priority (78, 6);
     94            //enable_irq(78);           //ENET错误及其他中断
     95          
     96            //使能GPIO引脚复用功能
     97            PORTB_PCR0  = PORT_PCR_MUX(4);  //GPIO;//RMII0_MDIO/MII0_MDIO
   \   00000074   0x.... 0x....      LDR.W    R0,??DataTable11_4  ;; 0x4004a000
   \   00000078   0xF44F 0x6180      MOV      R1,#+1024
   \   0000007C   0x6001             STR      R1,[R0, #+0]
     98            PORTB_PCR1  = PORT_PCR_MUX(4);  //GPIO;//RMII0_MDC/MII0_MDC    
   \   0000007E   0x.... 0x....      LDR.W    R0,??DataTable11_5  ;; 0x4004a004
   \   00000082   0xF44F 0x6180      MOV      R1,#+1024
   \   00000086   0x6001             STR      R1,[R0, #+0]
     99            PORTA_PCR14 = PORT_PCR_MUX(4);  //RMII0_CRS_DV/MII0_RXDV
   \   00000088   0x.... 0x....      LDR.W    R0,??DataTable11_6  ;; 0x40049038
   \   0000008C   0xF44F 0x6180      MOV      R1,#+1024
   \   00000090   0x6001             STR      R1,[R0, #+0]
    100            PORTA_PCR12 = PORT_PCR_MUX(4);  //RMII0_RXD1/MII0_RXD1
   \   00000092   0x.... 0x....      LDR.W    R0,??DataTable11_7  ;; 0x40049030
   \   00000096   0xF44F 0x6180      MOV      R1,#+1024
   \   0000009A   0x6001             STR      R1,[R0, #+0]
    101            PORTA_PCR13 = PORT_PCR_MUX(4);  //RMII0_RXD0/MII0_RXD0
   \   0000009C   0x.... 0x....      LDR.W    R0,??DataTable11_8  ;; 0x40049034
   \   000000A0   0xF44F 0x6180      MOV      R1,#+1024
   \   000000A4   0x6001             STR      R1,[R0, #+0]
    102            PORTA_PCR15 = PORT_PCR_MUX(4);  //RMII0_TXEN/MII0_TXEN
   \   000000A6   0x.... 0x....      LDR.W    R0,??DataTable11_9  ;; 0x4004903c
   \   000000AA   0xF44F 0x6180      MOV      R1,#+1024
   \   000000AE   0x6001             STR      R1,[R0, #+0]
    103            PORTA_PCR16 = PORT_PCR_MUX(4);  //RMII0_TXD0/MII0_TXD0
   \   000000B0   0x.... 0x....      LDR.W    R0,??DataTable11_10  ;; 0x40049040
   \   000000B4   0xF44F 0x6180      MOV      R1,#+1024
   \   000000B8   0x6001             STR      R1,[R0, #+0]
    104            PORTA_PCR17 = PORT_PCR_MUX(4);  //RMII0_TXD1/MII0_TXD1
   \   000000BA   0x.... 0x....      LDR.W    R0,??DataTable11_11  ;; 0x40049044
   \   000000BE   0xF44F 0x6180      MOV      R1,#+1024
   \   000000C2   0x6001             STR      R1,[R0, #+0]
    105            
    106              
    107            //等待PHY收发器复位完成
    108            do
    109            {
    110              LPLD_ENET_Delay( ENET_LINK_DELAY );
   \                     ??LPLD_ENET_Init_2:
   \   000000C4   0xF241 0x3088      MOVW     R0,#+5000
   \   000000C8   0x.... 0x....      BL       LPLD_ENET_Delay
    111              usData = 0xffff;
   \   000000CC   0xF64F 0x70FF      MOVW     R0,#+65535
   \   000000D0   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    112              LPLD_ENET_MiiRead(CFG_PHY_ADDRESS, PHY_PHYIDR1, &usData );
   \   000000D4   0xAA00             ADD      R2,SP,#+0
   \   000000D6   0x2102             MOVS     R1,#+2
   \   000000D8   0x2001             MOVS     R0,#+1
   \   000000DA   0x.... 0x....      BL       LPLD_ENET_MiiRead
    113                  
    114            } while( usData == 0xffff );
   \   000000DE   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   000000E2   0xF64F 0x71FF      MOVW     R1,#+65535
   \   000000E6   0x4288             CMP      R0,R1
   \   000000E8   0xD0EC             BEQ.N    ??LPLD_ENET_Init_2
    115          
    116          #ifdef PHY_PRINT_REG
    117            printf("PHY_PHYIDR1=0x%X\r\n",usData);
   \   000000EA   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   000000EE   0x.... 0x....      LDR.W    R0,??DataTable11_12
   \   000000F2   0x.... 0x....      BL       printf
    118            LPLD_ENET_MiiRead(CFG_PHY_ADDRESS, PHY_PHYIDR2, &usData );
   \   000000F6   0xAA00             ADD      R2,SP,#+0
   \   000000F8   0x2103             MOVS     R1,#+3
   \   000000FA   0x2001             MOVS     R0,#+1
   \   000000FC   0x.... 0x....      BL       LPLD_ENET_MiiRead
    119            printf("PHY_PHYIDR2=0x%X\r\n",usData); 
   \   00000100   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   00000104   0x.... 0x....      LDR.W    R0,??DataTable11_13
   \   00000108   0x.... 0x....      BL       printf
    120            LPLD_ENET_MiiRead(CFG_PHY_ADDRESS, PHY_ANLPAR, &usData );
   \   0000010C   0xAA00             ADD      R2,SP,#+0
   \   0000010E   0x2105             MOVS     R1,#+5
   \   00000110   0x2001             MOVS     R0,#+1
   \   00000112   0x.... 0x....      BL       LPLD_ENET_MiiRead
    121            printf("PHY_ANLPAR=0x%X\r\n",usData);
   \   00000116   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   0000011A   0x.... 0x....      LDR.W    R0,??DataTable11_14
   \   0000011E   0x.... 0x....      BL       printf
    122            LPLD_ENET_MiiRead(CFG_PHY_ADDRESS, PHY_ANLPARNP, &usData );
   \   00000122   0xAA00             ADD      R2,SP,#+0
   \   00000124   0x2105             MOVS     R1,#+5
   \   00000126   0x2001             MOVS     R0,#+1
   \   00000128   0x.... 0x....      BL       LPLD_ENET_MiiRead
    123            printf("PHY_ANLPARNP=0x%X\r\n",usData);
   \   0000012C   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   00000130   0x.... 0x....      LDR.W    R0,??DataTable11_15
   \   00000134   0x.... 0x....      BL       printf
    124            LPLD_ENET_MiiRead(CFG_PHY_ADDRESS, PHY_PHYSTS, &usData );
   \   00000138   0xAA00             ADD      R2,SP,#+0
   \   0000013A   0x2110             MOVS     R1,#+16
   \   0000013C   0x2001             MOVS     R0,#+1
   \   0000013E   0x.... 0x....      BL       LPLD_ENET_MiiRead
    125            printf("PHY_PHYSTS=0x%X\r\n",usData);
   \   00000142   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   00000146   0x.... 0x....      LDR.W    R0,??DataTable11_16
   \   0000014A   0x.... 0x....      BL       printf
    126            LPLD_ENET_MiiRead(CFG_PHY_ADDRESS, PHY_MICR, &usData );
   \   0000014E   0xAA00             ADD      R2,SP,#+0
   \   00000150   0x2111             MOVS     R1,#+17
   \   00000152   0x2001             MOVS     R0,#+1
   \   00000154   0x.... 0x....      BL       LPLD_ENET_MiiRead
    127            printf("PHY_MICR=0x%X\r\n",usData);
   \   00000158   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   0000015C   0x.... 0x....      LDR.W    R0,??DataTable11_17
   \   00000160   0x.... 0x....      BL       printf
    128            LPLD_ENET_MiiRead(CFG_PHY_ADDRESS, PHY_MISR, &usData );
   \   00000164   0xAA00             ADD      R2,SP,#+0
   \   00000166   0x2112             MOVS     R1,#+18
   \   00000168   0x2001             MOVS     R0,#+1
   \   0000016A   0x.... 0x....      BL       LPLD_ENET_MiiRead
    129            printf("PHY_MISR=0x%X\r\n",usData);
   \   0000016E   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   00000172   0x.... 0x....      LDR.W    R0,??DataTable11_18
   \   00000176   0x.... 0x....      BL       printf
    130          #endif 
    131            
    132            //开始自动协商
    133            LPLD_ENET_MiiWrite(CFG_PHY_ADDRESS, PHY_BMCR, ( PHY_BMCR_AN_RESTART | PHY_BMCR_AN_ENABLE ) );
   \   0000017A   0xF44F 0x5290      MOV      R2,#+4608
   \   0000017E   0x2100             MOVS     R1,#+0
   \   00000180   0x2001             MOVS     R0,#+1
   \   00000182   0x.... 0x....      BL       LPLD_ENET_MiiWrite
    134          
    135          #ifdef PHY_PRINT_REG
    136            LPLD_ENET_MiiRead(CFG_PHY_ADDRESS, PHY_BMCR, &usData );
   \   00000186   0xAA00             ADD      R2,SP,#+0
   \   00000188   0x2100             MOVS     R1,#+0
   \   0000018A   0x2001             MOVS     R0,#+1
   \   0000018C   0x.... 0x....      BL       LPLD_ENET_MiiRead
    137            printf("PHY_BMCR=0x%X\r\n",usData);
   \   00000190   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   00000194   0x.... 0x....      LDR.W    R0,??DataTable11_19
   \   00000198   0x.... 0x....      BL       printf
    138          #endif 
    139            
    140            //等待自动协商完成
    141            do
    142            {
    143              LPLD_ENET_Delay( ENET_LINK_DELAY );
   \                     ??LPLD_ENET_Init_3:
   \   0000019C   0xF241 0x3088      MOVW     R0,#+5000
   \   000001A0   0x.... 0x....      BL       LPLD_ENET_Delay
    144              LPLD_ENET_MiiRead(CFG_PHY_ADDRESS, PHY_BMSR, &usData );
   \   000001A4   0xAA00             ADD      R2,SP,#+0
   \   000001A6   0x2101             MOVS     R1,#+1
   \   000001A8   0x2001             MOVS     R0,#+1
   \   000001AA   0x.... 0x....      BL       LPLD_ENET_MiiRead
    145          
    146            } while( !( usData & PHY_BMSR_AN_COMPLETE ) );
   \   000001AE   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   000001B2   0x0680             LSLS     R0,R0,#+26
   \   000001B4   0xD5F2             BPL.N    ??LPLD_ENET_Init_3
    147          
    148          #ifdef PHY_PRINT_REG
    149              printf("PHY_BMSR=0x%X\r\n",usData);
   \   000001B6   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   000001BA   0x.... 0x....      LDR.W    R0,??DataTable11_20
   \   000001BE   0x.... 0x....      BL       printf
    150          #endif 
    151              
    152            //根据协商结果设置ENET模块
    153            LPLD_ENET_MiiRead(CFG_PHY_ADDRESS, PHY_STATUS, &usData );  
   \   000001C2   0xAA00             ADD      R2,SP,#+0
   \   000001C4   0x2110             MOVS     R1,#+16
   \   000001C6   0x2001             MOVS     R0,#+1
   \   000001C8   0x.... 0x....      BL       LPLD_ENET_MiiRead
    154          
    155          #ifdef PHY_PRINT_REG
    156            printf("PHY_STATUS=0x%X\r\n",usData);
   \   000001CC   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   000001D0   0x.... 0x....      LDR.W    R0,??DataTable11_21
   \   000001D4   0x.... 0x....      BL       printf
    157          #endif 
    158            
    159            //清除单独和组地址哈希寄存器
    160            ENET_IALR = 0;
   \   000001D8   0x.... 0x....      LDR.W    R0,??DataTable11_22  ;; 0x400c011c
   \   000001DC   0x2100             MOVS     R1,#+0
   \   000001DE   0x6001             STR      R1,[R0, #+0]
    161            ENET_IAUR = 0;
   \   000001E0   0x.... 0x....      LDR.W    R0,??DataTable11_23  ;; 0x400c0118
   \   000001E4   0x2100             MOVS     R1,#+0
   \   000001E6   0x6001             STR      R1,[R0, #+0]
    162            ENET_GALR = 0;
   \   000001E8   0x.... 0x....      LDR.W    R0,??DataTable11_24  ;; 0x400c0124
   \   000001EC   0x2100             MOVS     R1,#+0
   \   000001EE   0x6001             STR      R1,[R0, #+0]
    163            ENET_GAUR = 0;
   \   000001F0   0x.... 0x....      LDR.W    R0,??DataTable11_25  ;; 0x400c0120
   \   000001F4   0x2100             MOVS     R1,#+0
   \   000001F6   0x6001             STR      R1,[R0, #+0]
    164            
    165            //设置ENET模块MAC地址
    166            LPLD_ENET_SetAddress(MACAddress);
   \   000001F8   0x0020             MOVS     R0,R4
   \   000001FA   0x.... 0x....      BL       LPLD_ENET_SetAddress
    167              
    168            //设置接收控制寄存器，最大长度、RMII模式、接收CRC校验等
    169            ENET_RCR = ENET_RCR_MAX_FL(CFG_ENET_MAX_PACKET_SIZE) | ENET_RCR_MII_MODE_MASK | ENET_RCR_CRCFWD_MASK | ENET_RCR_RMII_MODE_MASK;
   \   000001FE   0x.... 0x....      LDR.W    R0,??DataTable11_26  ;; 0x400c0084
   \   00000202   0x.... 0x....      LDR.W    R1,??DataTable11_27  ;; 0x5f04104
   \   00000206   0x6001             STR      R1,[R0, #+0]
    170          
    171            //清除发送接收控制
    172            ENET_TCR = 0;
   \   00000208   0x.... 0x....      LDR.W    R0,??DataTable11_28  ;; 0x400c00c4
   \   0000020C   0x2100             MOVS     R1,#+0
   \   0000020E   0x6001             STR      R1,[R0, #+0]
    173                  
    174            //通讯方式设置
    175            if( usData & PHY_DUPLEX_STATUS )
   \   00000210   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000214   0x0740             LSLS     R0,R0,#+29
   \   00000216   0xD510             BPL.N    ??LPLD_ENET_Init_4
    176            {
    177              //全双工
    178              ENET_RCR &= (unsigned long)~ENET_RCR_DRT_MASK;
   \   00000218   0x.... 0x....      LDR.W    R0,??DataTable11_26  ;; 0x400c0084
   \   0000021C   0x6800             LDR      R0,[R0, #+0]
   \   0000021E   0xF030 0x0002      BICS     R0,R0,#0x2
   \   00000222   0x.... 0x....      LDR.W    R1,??DataTable11_26  ;; 0x400c0084
   \   00000226   0x6008             STR      R0,[R1, #+0]
    179              ENET_TCR |= ENET_TCR_FDEN_MASK;
   \   00000228   0x.... 0x....      LDR.W    R0,??DataTable11_28  ;; 0x400c00c4
   \   0000022C   0x6800             LDR      R0,[R0, #+0]
   \   0000022E   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   00000232   0x.... 0x....      LDR.W    R1,??DataTable11_28  ;; 0x400c00c4
   \   00000236   0x6008             STR      R0,[R1, #+0]
   \   00000238   0xE00F             B.N      ??LPLD_ENET_Init_5
    180            }
    181            else
    182            {
    183              //半双工
    184              ENET_RCR |= ENET_RCR_DRT_MASK;
   \                     ??LPLD_ENET_Init_4:
   \   0000023A   0x.... 0x....      LDR.W    R0,??DataTable11_26  ;; 0x400c0084
   \   0000023E   0x6800             LDR      R0,[R0, #+0]
   \   00000240   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000244   0x.... 0x....      LDR.W    R1,??DataTable11_26  ;; 0x400c0084
   \   00000248   0x6008             STR      R0,[R1, #+0]
    185              ENET_TCR &= (unsigned long)~ENET_TCR_FDEN_MASK;
   \   0000024A   0x.... 0x....      LDR.W    R0,??DataTable11_28  ;; 0x400c00c4
   \   0000024E   0x6800             LDR      R0,[R0, #+0]
   \   00000250   0xF030 0x0004      BICS     R0,R0,#0x4
   \   00000254   0x.... 0x....      LDR.W    R1,??DataTable11_28  ;; 0x400c00c4
   \   00000258   0x6008             STR      R0,[R1, #+0]
    186            }
    187            
    188            //通信速率设置
    189            if( usData & PHY_SPEED_STATUS )
   \                     ??LPLD_ENET_Init_5:
   \   0000025A   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   0000025E   0x0780             LSLS     R0,R0,#+30
   \   00000260   0xD507             BPL.N    ??LPLD_ENET_Init_6
    190            {
    191              //10Mbps
    192              ENET_RCR |= ENET_RCR_RMII_10T_MASK;
   \   00000262   0x.... 0x....      LDR.W    R0,??DataTable11_26  ;; 0x400c0084
   \   00000266   0x6800             LDR      R0,[R0, #+0]
   \   00000268   0xF450 0x7000      ORRS     R0,R0,#0x200
   \   0000026C   0x.... 0x....      LDR.W    R1,??DataTable11_26  ;; 0x400c0084
   \   00000270   0x6008             STR      R0,[R1, #+0]
    193            }
    194          
    195            //使用非增强型缓冲区描述符
    196            ENET_ECR = 0;
   \                     ??LPLD_ENET_Init_6:
   \   00000272   0x.... 0x....      LDR.W    R0,??DataTable11_2  ;; 0x400c0024
   \   00000276   0x2100             MOVS     R1,#+0
   \   00000278   0x6001             STR      R1,[R0, #+0]
    197            
    198            
    199            //设置接收缓冲区长度
    200            ENET_MRBR = (unsigned short) CFG_ENET_RX_BUFFER_SIZE;
   \   0000027A   0x.... 0x....      LDR.W    R0,??DataTable11_29  ;; 0x400c0188
   \   0000027E   0xF44F 0x7180      MOV      R1,#+256
   \   00000282   0x6001             STR      R1,[R0, #+0]
    201          
    202            //指向环形接收缓冲区描述符序列的头地址
    203            ENET_RDSR = ( unsigned long ) &( xENETRxDescriptors[ 0 ] );
   \   00000284   0x.... 0x....      LDR.W    R0,??DataTable11_30  ;; 0x400c0180
   \   00000288   0x.... 0x....      LDR.W    R1,??DataTable11_31
   \   0000028C   0x6809             LDR      R1,[R1, #+0]
   \   0000028E   0x6001             STR      R1,[R0, #+0]
    204          
    205            //指向环形发送缓冲区描述符序列的头地址
    206            ENET_TDSR = ( unsigned long ) xENETTxDescriptors;
   \   00000290   0x.... 0x....      LDR.W    R0,??DataTable11_32  ;; 0x400c0184
   \   00000294   0x.... 0x....      LDR.W    R1,??DataTable11_33
   \   00000298   0x6809             LDR      R1,[R1, #+0]
   \   0000029A   0x6001             STR      R1,[R0, #+0]
    207          
    208            //清除ENET中断事件
    209            ENET_EIR = ( unsigned long ) -1;
   \   0000029C   0x.... 0x....      LDR.W    R0,??DataTable11_34  ;; 0x400c0004
   \   000002A0   0xF05F 0x31FF      MOVS     R1,#-1
   \   000002A4   0x6001             STR      R1,[R0, #+0]
    210          
    211            //使能中断
    212            ENET_EIMR = 0 
    213                      | ENET_EIMR_RXF_MASK  //接收中断
    214                      | ENET_EIMR_TXF_MASK  //发送中断
    215                      //ENET中断
    216                      | ENET_EIMR_UN_MASK | ENET_EIMR_RL_MASK | ENET_EIMR_LC_MASK | ENET_EIMR_BABT_MASK | ENET_EIMR_BABR_MASK | ENET_EIMR_EBERR_MASK
    217                      | ENET_EIMR_RXB_MASK
    218                      ;
   \   000002A6   0x.... 0x....      LDR.W    R0,??DataTable11_35  ;; 0x400c0008
   \   000002AA   0x.... 0x....      LDR.W    R1,??DataTable11_36  ;; 0x6b780000
   \   000002AE   0x6001             STR      R1,[R0, #+0]
    219          
    220            //使能ENET模块
    221            ENET_ECR |= ENET_ECR_ETHEREN_MASK;
   \   000002B0   0x.... 0x....      LDR.W    R0,??DataTable11_2  ;; 0x400c0024
   \   000002B4   0x6800             LDR      R0,[R0, #+0]
   \   000002B6   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   000002BA   0x.... 0x....      LDR.W    R1,??DataTable11_2  ;; 0x400c0024
   \   000002BE   0x6008             STR      R0,[R1, #+0]
    222          
    223            //表明接收缓冲区为空
    224            ENET_RDAR = ENET_RDAR_RDAR_MASK;
   \   000002C0   0x.... 0x....      LDR.W    R0,??DataTable11_37  ;; 0x400c0010
   \   000002C4   0xF05F 0x7180      MOVS     R1,#+16777216
   \   000002C8   0x6001             STR      R1,[R0, #+0]
    225          }
   \   000002CA   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    226          
    227          
    228          /*
    229           * LPLD_ENET_SetIsr
    230           * ENET模块中断函数设置
    231           * 
    232           * 参数:
    233           *    type--中断类型
    234           *      |__ENET_RXF_ISR   -接收中断
    235           *      |__ENET_TXF_ISR   -发送中断
    236           *    isr_func--用户中断程序入口地址
    237           *      |__用户在工程文件下定义的中断函数名，函数必须为:无返回值,无参数(eg. void isr(void);)
    238           *
    239           * 输出:
    240           *    0--配置错误
    241           *    1--配置成功
    242           *
    243           */

   \                                 In section .text, align 2, keep-with-next
    244          uint8 LPLD_ENET_SetIsr(uint8 type, ENET_ISR_CALLBACK isr_func)
    245          {
    246            if(type>4)
   \                     LPLD_ENET_SetIsr:
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0x2805             CMP      R0,#+5
   \   00000004   0xD301             BCC.N    ??LPLD_ENET_SetIsr_0
    247              return 0;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0xE005             B.N      ??LPLD_ENET_SetIsr_1
    248            
    249            ENET_ISR[type] = isr_func;
   \                     ??LPLD_ENET_SetIsr_0:
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0x.... 0x....      LDR.W    R2,??DataTable11_38
   \   00000010   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
    250            return 1;
   \   00000014   0x2001             MOVS     R0,#+1
   \                     ??LPLD_ENET_SetIsr_1:
   \   00000016   0x4770             BX       LR               ;; return
    251          }
    252          
    253          
    254          /*
    255           * LPLD_ENET_RXF_Isr
    256           * ENET接收中断底层入口函数
    257           * 
    258           * 用户无需修改，程序自动进入对应通道中断函数
    259           */

   \                                 In section .text, align 2, keep-with-next
    260          void LPLD_ENET_RXF_Isr(void)
    261          {   
   \                     LPLD_ENET_RXF_Isr:
   \   00000000   0xB580             PUSH     {R7,LR}
    262            ENET_EIR |= ENET_EIMR_RXF_MASK; 
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable11_34  ;; 0x400c0004
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0xF050 0x7000      ORRS     R0,R0,#0x2000000
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable11_34  ;; 0x400c0004
   \   00000010   0x6008             STR      R0,[R1, #+0]
    263              
    264            //调用用户自定义中断服务
    265            if(ENET_ISR[ENET_RXF_ISR])
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable11_38
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD003             BEQ.N    ??LPLD_ENET_RXF_Isr_0
    266            {
    267              ENET_ISR[ENET_RXF_ISR]();  
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable11_38
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x4780             BLX      R0
    268            }
    269          }
   \                     ??LPLD_ENET_RXF_Isr_0:
   \   00000024   0xBD01             POP      {R0,PC}          ;; return
    270          
    271          
    272          /*
    273           * LPLD_ENET_TXF_Isr
    274           * ENET发送中断底层入口函数
    275           * 
    276           * 用户无需修改，程序自动进入对应通道中断函数
    277           */

   \                                 In section .text, align 2, keep-with-next
    278          void LPLD_ENET_TXF_Isr(void)
    279          {  
   \                     LPLD_ENET_TXF_Isr:
   \   00000000   0xB580             PUSH     {R7,LR}
    280            ENET_EIR |= ENET_EIMR_TXF_MASK; 
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable11_34  ;; 0x400c0004
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0xF050 0x6000      ORRS     R0,R0,#0x8000000
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable11_34  ;; 0x400c0004
   \   00000010   0x6008             STR      R0,[R1, #+0]
    281              
    282            //调用用户自定义中断服务
    283            if(ENET_ISR[ENET_TXF_ISR])
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable11_38
   \   00000016   0x6840             LDR      R0,[R0, #+4]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD003             BEQ.N    ??LPLD_ENET_TXF_Isr_0
    284            {
    285              ENET_ISR[ENET_TXF_ISR]();  
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable11_38
   \   00000020   0x6840             LDR      R0,[R0, #+4]
   \   00000022   0x4780             BLX      R0
    286            }
    287          }
   \                     ??LPLD_ENET_TXF_Isr_0:
   \   00000024   0xBD01             POP      {R0,PC}          ;; return
    288          
    289          /*
    290           * LPLD_ENET_Delay
    291           * ENET模块内部延时函数
    292           * 
    293           * 参数:
    294           *    time--延迟大小
    295           *
    296           * 输出:
    297           *    无
    298           */

   \                                 In section .text, align 2, keep-with-next
    299          static void LPLD_ENET_Delay(uint32 time)
    300          {
    301            uint32 i = 0,j = 0;
   \                     LPLD_ENET_Delay:
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x2200             MOVS     R2,#+0
    302            
    303            for(i = 0;i < time;i++)
   \   00000004   0x2300             MOVS     R3,#+0
   \   00000006   0x0019             MOVS     R1,R3
   \   00000008   0xE005             B.N      ??LPLD_ENET_Delay_0
    304            {
    305              for(j = 0;j < 50000;j++);
   \                     ??LPLD_ENET_Delay_1:
   \   0000000A   0x1C52             ADDS     R2,R2,#+1
   \                     ??LPLD_ENET_Delay_2:
   \   0000000C   0xF24C 0x3350      MOVW     R3,#+50000
   \   00000010   0x429A             CMP      R2,R3
   \   00000012   0xD3FA             BCC.N    ??LPLD_ENET_Delay_1
   \   00000014   0x1C49             ADDS     R1,R1,#+1
   \                     ??LPLD_ENET_Delay_0:
   \   00000016   0x4281             CMP      R1,R0
   \   00000018   0xD201             BCS.N    ??LPLD_ENET_Delay_3
   \   0000001A   0x2200             MOVS     R2,#+0
   \   0000001C   0xE7F6             B.N      ??LPLD_ENET_Delay_2
    306            }
    307          }
   \                     ??LPLD_ENET_Delay_3:
   \   0000001E   0x4770             BX       LR               ;; return
    308          
    309          
    310          /*
    311           * LPLD_ENET_BDInit
    312           * 缓冲区描述符初始化
    313           * 
    314           * 参数:
    315           *    无
    316           *
    317           * 输出:
    318           *    无
    319           */

   \                                 In section .text, align 2, keep-with-next
    320          static void LPLD_ENET_BDInit( void )
    321          {
    322            unsigned long ux;
    323            uint8 *pcBufPointer;
    324            
    325            //寻找<发送描述符数组空间>中的16字节对齐的地址，即低四位为0的起始地址
    326            pcBufPointer = &( xENETTxDescriptors_unaligned[ 0 ] );
   \                     LPLD_ENET_BDInit:
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable11_39
   \   00000004   0xE000             B.N      ??LPLD_ENET_BDInit_0
    327            while( ( ( unsigned long ) pcBufPointer & 0x0fUL ) != 0 )
    328            {
    329              pcBufPointer++;
   \                     ??LPLD_ENET_BDInit_1:
   \   00000006   0x1C49             ADDS     R1,R1,#+1
    330            }
   \                     ??LPLD_ENET_BDInit_0:
   \   00000008   0xF011 0x000F      ANDS     R0,R1,#0xF
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD1FA             BNE.N    ??LPLD_ENET_BDInit_1
    331            xENETTxDescriptors = ( NBUF * ) pcBufPointer;
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable11_33
   \   00000014   0x6001             STR      R1,[R0, #+0]
    332            
    333            //寻找<接收描述符数组空间>中的16字节对齐的地址
    334            pcBufPointer = &( xENETRxDescriptors_unaligned[ 0 ] );
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable11_40
   \   0000001A   0xE000             B.N      ??LPLD_ENET_BDInit_2
    335            while( ( ( unsigned long ) pcBufPointer & 0x0fUL ) != 0 )
    336            {
    337              pcBufPointer++;
   \                     ??LPLD_ENET_BDInit_3:
   \   0000001C   0x1C49             ADDS     R1,R1,#+1
    338            }
   \                     ??LPLD_ENET_BDInit_2:
   \   0000001E   0xF011 0x000F      ANDS     R0,R1,#0xF
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD1FA             BNE.N    ??LPLD_ENET_BDInit_3
    339            xENETRxDescriptors = ( NBUF * ) pcBufPointer;
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable11_31
   \   0000002A   0x6001             STR      R1,[R0, #+0]
    340            
    341            //发送缓冲区描述符初始化
    342            for( ux = 0; ux < CFG_NUM_ENET_TX_BUFFERS; ux++ )
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0xE014             B.N      ??LPLD_ENET_BDInit_4
    343            {
    344              xENETTxDescriptors[ ux ].status = 0;
   \                     ??LPLD_ENET_BDInit_5:
   \   00000030   0x.... 0x....      LDR.W    R1,??DataTable11_33
   \   00000034   0x6809             LDR      R1,[R1, #+0]
   \   00000036   0x2200             MOVS     R2,#+0
   \   00000038   0xF821 0x2030      STRH     R2,[R1, R0, LSL #+3]
    345              xENETTxDescriptors[ ux ].data = 0;
   \   0000003C   0x.... 0x....      LDR.W    R1,??DataTable11_33
   \   00000040   0x6809             LDR      R1,[R1, #+0]
   \   00000042   0xEB11 0x01C0      ADDS     R1,R1,R0, LSL #+3
   \   00000046   0x2200             MOVS     R2,#+0
   \   00000048   0x604A             STR      R2,[R1, #+4]
    346              xENETTxDescriptors[ ux ].length = 0;
   \   0000004A   0x.... 0x....      LDR.W    R1,??DataTable11_33
   \   0000004E   0x6809             LDR      R1,[R1, #+0]
   \   00000050   0xEB11 0x01C0      ADDS     R1,R1,R0, LSL #+3
   \   00000054   0x2200             MOVS     R2,#+0
   \   00000056   0x804A             STRH     R2,[R1, #+2]
    347            }
   \   00000058   0x1C40             ADDS     R0,R0,#+1
   \                     ??LPLD_ENET_BDInit_4:
   \   0000005A   0x2800             CMP      R0,#+0
   \   0000005C   0xD0E8             BEQ.N    ??LPLD_ENET_BDInit_5
    348            
    349            //寻找<接收缓冲区空间>中的16字节对齐的地址
    350            pcBufPointer = &( ucENETRxBuffers[ 0 ] );
   \   0000005E   0x.... 0x....      LDR.W    R1,??DataTable11_41
   \   00000062   0xE000             B.N      ??LPLD_ENET_BDInit_6
    351            while( ( ( unsigned long ) pcBufPointer & 0x0fUL ) != 0 )
    352            {
    353              pcBufPointer++;
   \                     ??LPLD_ENET_BDInit_7:
   \   00000064   0x1C49             ADDS     R1,R1,#+1
    354            }
   \                     ??LPLD_ENET_BDInit_6:
   \   00000066   0xF011 0x000F      ANDS     R0,R1,#0xF
   \   0000006A   0x2800             CMP      R0,#+0
   \   0000006C   0xD1FA             BNE.N    ??LPLD_ENET_BDInit_7
    355            
    356            //接收缓冲区描述符初始化
    357            for( ux = 0; ux < CFG_NUM_ENET_RX_BUFFERS; ux++ )
   \   0000006E   0x2000             MOVS     R0,#+0
   \   00000070   0xE013             B.N      ??LPLD_ENET_BDInit_8
    358            {
    359              xENETRxDescriptors[ ux ].status = RX_BD_E;
   \                     ??LPLD_ENET_BDInit_9:
   \   00000072   0x....             LDR.N    R2,??DataTable11_31
   \   00000074   0x6812             LDR      R2,[R2, #+0]
   \   00000076   0x2380             MOVS     R3,#+128
   \   00000078   0xF822 0x3030      STRH     R3,[R2, R0, LSL #+3]
    360              xENETRxDescriptors[ ux ].length = 0;
   \   0000007C   0x....             LDR.N    R2,??DataTable11_31
   \   0000007E   0x6812             LDR      R2,[R2, #+0]
   \   00000080   0xEB12 0x02C0      ADDS     R2,R2,R0, LSL #+3
   \   00000084   0x2300             MOVS     R3,#+0
   \   00000086   0x8053             STRH     R3,[R2, #+2]
    361              xENETRxDescriptors[ ux ].data = (uint8 *)__REV((uint32)pcBufPointer);
   \   00000088   0xBA0A             REV      R2,R1
   \   0000008A   0x....             LDR.N    R3,??DataTable11_31
   \   0000008C   0x681B             LDR      R3,[R3, #+0]
   \   0000008E   0xEB13 0x03C0      ADDS     R3,R3,R0, LSL #+3
   \   00000092   0x605A             STR      R2,[R3, #+4]
    362              pcBufPointer += CFG_ENET_RX_BUFFER_SIZE;
   \   00000094   0xF511 0x7180      ADDS     R1,R1,#+256
    363            
    364            }
   \   00000098   0x1C40             ADDS     R0,R0,#+1
   \                     ??LPLD_ENET_BDInit_8:
   \   0000009A   0x2808             CMP      R0,#+8
   \   0000009C   0xD3E9             BCC.N    ??LPLD_ENET_BDInit_9
    365            
    366            //设置缓冲区描述符环形序列中的最后一个状态位为Wrap
    367            xENETTxDescriptors[ CFG_NUM_ENET_TX_BUFFERS - 1 ].status |= TX_BD_W;
   \   0000009E   0x....             LDR.N    R0,??DataTable11_33
   \   000000A0   0x6800             LDR      R0,[R0, #+0]
   \   000000A2   0x8800             LDRH     R0,[R0, #+0]
   \   000000A4   0xF050 0x0020      ORRS     R0,R0,#0x20
   \   000000A8   0x....             LDR.N    R1,??DataTable11_33
   \   000000AA   0x6809             LDR      R1,[R1, #+0]
   \   000000AC   0x8008             STRH     R0,[R1, #+0]
    368            xENETRxDescriptors[ CFG_NUM_ENET_RX_BUFFERS - 1 ].status |= RX_BD_W;
   \   000000AE   0x....             LDR.N    R0,??DataTable11_31
   \   000000B0   0x6800             LDR      R0,[R0, #+0]
   \   000000B2   0x8F00             LDRH     R0,[R0, #+56]
   \   000000B4   0xF050 0x0020      ORRS     R0,R0,#0x20
   \   000000B8   0x....             LDR.N    R1,??DataTable11_31
   \   000000BA   0x6809             LDR      R1,[R1, #+0]
   \   000000BC   0x8708             STRH     R0,[R1, #+56]
    369            
    370            uxNextRxBuffer = 0;
   \   000000BE   0x....             LDR.N    R0,??DataTable11_42
   \   000000C0   0x2100             MOVS     R1,#+0
   \   000000C2   0x6001             STR      R1,[R0, #+0]
    371            uxNextTxBuffer = 0;
   \   000000C4   0x....             LDR.N    R0,??DataTable11_43
   \   000000C6   0x2100             MOVS     R1,#+0
   \   000000C8   0x6001             STR      R1,[R0, #+0]
    372          }
   \   000000CA   0x4770             BX       LR               ;; return
    373          
    374          /*
    375           * LPLD_ENET_MacSend
    376           * 以太帧发送函数
    377           * 
    378           * 参数:
    379           *    *ch--数据帧头地址，该数据帧为以太帧，必须包含目的地址、源地址、类型等。
    380           *    len--数据帧长度。
    381           *
    382           * 输出:
    383           *    无
    384           */

   \                                 In section .text, align 2, keep-with-next
    385          void LPLD_ENET_MacSend(uint8 *ch, uint16 len)
    386          {
    387            
    388            //检查当前发送缓冲区描述符是否可用
    389            while( xENETTxDescriptors[ uxNextTxBuffer ].status & TX_BD_R);
   \                     LPLD_ENET_MacSend:
   \                     ??LPLD_ENET_MacSend_0:
   \   00000000   0x....             LDR.N    R2,??DataTable11_43
   \   00000002   0x6812             LDR      R2,[R2, #+0]
   \   00000004   0x....             LDR.N    R3,??DataTable11_33
   \   00000006   0x681B             LDR      R3,[R3, #+0]
   \   00000008   0xF813 0x2032      LDRB     R2,[R3, R2, LSL #+3]
   \   0000000C   0x0612             LSLS     R2,R2,#+24
   \   0000000E   0xD4F7             BMI.N    ??LPLD_ENET_MacSend_0
    390            
    391            //设置发送缓冲区描述符
    392            xENETTxDescriptors[ uxNextTxBuffer ].data = (uint8 *)__REV((uint32)ch);
   \   00000010   0xBA00             REV      R0,R0
   \   00000012   0x....             LDR.N    R2,??DataTable11_43
   \   00000014   0x6812             LDR      R2,[R2, #+0]
   \   00000016   0x....             LDR.N    R3,??DataTable11_33
   \   00000018   0x681B             LDR      R3,[R3, #+0]
   \   0000001A   0xEB13 0x02C2      ADDS     R2,R3,R2, LSL #+3
   \   0000001E   0x6050             STR      R0,[R2, #+4]
    393            xENETTxDescriptors[ uxNextTxBuffer ].length = __REVSH(len);
   \   00000020   0xBAC8             REVSH    R0,R1
   \   00000022   0x....             LDR.N    R1,??DataTable11_43
   \   00000024   0x6809             LDR      R1,[R1, #+0]
   \   00000026   0x....             LDR.N    R2,??DataTable11_33
   \   00000028   0x6812             LDR      R2,[R2, #+0]
   \   0000002A   0xEB12 0x01C1      ADDS     R1,R2,R1, LSL #+3
   \   0000002E   0x8048             STRH     R0,[R1, #+2]
    394            xENETTxDescriptors[ uxNextTxBuffer ].status = ( TX_BD_R | TX_BD_L | TX_BD_TC | TX_BD_W );
   \   00000030   0x....             LDR.N    R0,??DataTable11_43
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   \   00000034   0x....             LDR.N    R1,??DataTable11_33
   \   00000036   0x6809             LDR      R1,[R1, #+0]
   \   00000038   0x22AC             MOVS     R2,#+172
   \   0000003A   0xF821 0x2030      STRH     R2,[R1, R0, LSL #+3]
    395            
    396            uxNextTxBuffer++;
   \   0000003E   0x....             LDR.N    R0,??DataTable11_43
   \   00000040   0x6800             LDR      R0,[R0, #+0]
   \   00000042   0x1C40             ADDS     R0,R0,#+1
   \   00000044   0x....             LDR.N    R1,??DataTable11_43
   \   00000046   0x6008             STR      R0,[R1, #+0]
    397            if( uxNextTxBuffer >= CFG_NUM_ENET_TX_BUFFERS )
   \   00000048   0x....             LDR.N    R0,??DataTable11_43
   \   0000004A   0x6800             LDR      R0,[R0, #+0]
   \   0000004C   0x2800             CMP      R0,#+0
   \   0000004E   0xD002             BEQ.N    ??LPLD_ENET_MacSend_1
    398            {
    399              uxNextTxBuffer = 0;
   \   00000050   0x....             LDR.N    R0,??DataTable11_43
   \   00000052   0x2100             MOVS     R1,#+0
   \   00000054   0x6001             STR      R1,[R0, #+0]
    400            }
    401            
    402            //使能发送
    403            ENET_TDAR = ENET_TDAR_TDAR_MASK;
   \                     ??LPLD_ENET_MacSend_1:
   \   00000056   0x....             LDR.N    R0,??DataTable11_44  ;; 0x400c0014
   \   00000058   0xF05F 0x7180      MOVS     R1,#+16777216
   \   0000005C   0x6001             STR      R1,[R0, #+0]
    404            
    405          }
   \   0000005E   0x4770             BX       LR               ;; return
    406          
    407          
    408          /*
    409           * LPLD_ENET_MacRecv
    410           * 以太帧接收函数
    411           * 
    412           * 参数:
    413           *    *ch--接收数据帧头地址。
    414           *    *len--数据帧长度地址。
    415           *
    416           * 输出:
    417           *    无
    418           */

   \                                 In section .text, align 2, keep-with-next
    419          uint8 LPLD_ENET_MacRecv(uint8 *ch, uint16 *len)
    420          {
   \                     LPLD_ENET_MacRecv:
   \   00000000   0xB580             PUSH     {R7,LR}
    421            uint8 *prvRxd;
    422            *len = 0;
   \   00000002   0x2200             MOVS     R2,#+0
   \   00000004   0x800A             STRH     R2,[R1, #+0]
    423            uxNextRxBuffer = 0; 
   \   00000006   0x....             LDR.N    R2,??DataTable11_42
   \   00000008   0x2300             MOVS     R3,#+0
   \   0000000A   0x6013             STR      R3,[R2, #+0]
    424            
    425            //寻找为非空的接收缓冲区描述符 
    426            while( (xENETRxDescriptors[ uxNextRxBuffer ].status & RX_BD_E)!=0 )
   \                     ??LPLD_ENET_MacRecv_0:
   \   0000000C   0x....             LDR.N    R2,??DataTable11_42
   \   0000000E   0x6812             LDR      R2,[R2, #+0]
   \   00000010   0x....             LDR.N    R3,??DataTable11_31
   \   00000012   0x681B             LDR      R3,[R3, #+0]
   \   00000014   0xF813 0x2032      LDRB     R2,[R3, R2, LSL #+3]
   \   00000018   0x0612             LSLS     R2,R2,#+24
   \   0000001A   0xD50D             BPL.N    ??LPLD_ENET_MacRecv_1
    427            {
    428              uxNextRxBuffer++; 
   \   0000001C   0x....             LDR.N    R2,??DataTable11_42
   \   0000001E   0x6812             LDR      R2,[R2, #+0]
   \   00000020   0x1C52             ADDS     R2,R2,#+1
   \   00000022   0x....             LDR.N    R3,??DataTable11_42
   \   00000024   0x601A             STR      R2,[R3, #+0]
    429              if( uxNextRxBuffer >= CFG_NUM_ENET_RX_BUFFERS )
   \   00000026   0x....             LDR.N    R2,??DataTable11_42
   \   00000028   0x6812             LDR      R2,[R2, #+0]
   \   0000002A   0x2A08             CMP      R2,#+8
   \   0000002C   0xD3EE             BCC.N    ??LPLD_ENET_MacRecv_0
    430              {
    431                uxNextRxBuffer = 0; 
   \   0000002E   0x....             LDR.N    R0,??DataTable11_42
   \   00000030   0x2100             MOVS     R1,#+0
   \   00000032   0x6001             STR      R1,[R0, #+0]
    432                return 1;
   \   00000034   0x2001             MOVS     R0,#+1
   \   00000036   0xE028             B.N      ??LPLD_ENET_MacRecv_2
    433              } 
    434              
    435            }
    436            
    437            //读取接收缓冲区描述符
    438            *len  =  __REVSH(xENETRxDescriptors[ uxNextRxBuffer ].length);
   \                     ??LPLD_ENET_MacRecv_1:
   \   00000038   0x....             LDR.N    R2,??DataTable11_42
   \   0000003A   0x6812             LDR      R2,[R2, #+0]
   \   0000003C   0x....             LDR.N    R3,??DataTable11_31
   \   0000003E   0x681B             LDR      R3,[R3, #+0]
   \   00000040   0xEB13 0x02C2      ADDS     R2,R3,R2, LSL #+3
   \   00000044   0xF9B2 0x2002      LDRSH    R2,[R2, #+2]
   \   00000048   0xBAD2             REVSH    R2,R2
   \   0000004A   0x800A             STRH     R2,[R1, #+0]
    439            prvRxd =  (uint8 *)__REV((uint32)xENETRxDescriptors[ uxNextRxBuffer ].data);      
   \   0000004C   0x....             LDR.N    R2,??DataTable11_42
   \   0000004E   0x6812             LDR      R2,[R2, #+0]
   \   00000050   0x....             LDR.N    R3,??DataTable11_31
   \   00000052   0x681B             LDR      R3,[R3, #+0]
   \   00000054   0xEB13 0x02C2      ADDS     R2,R3,R2, LSL #+3
   \   00000058   0x6852             LDR      R2,[R2, #+4]
   \   0000005A   0xBA13             REV      R3,R2
    440            memcpy((void *)ch, (void *)prvRxd, *len);      
   \   0000005C   0x880A             LDRH     R2,[R1, #+0]
   \   0000005E   0x0019             MOVS     R1,R3
   \   00000060   0x.... 0x....      BL       memcpy
    441            
    442            //清除接收缓冲区描述符状态标志Empty
    443            xENETRxDescriptors[ uxNextRxBuffer ].status |= RX_BD_E;
   \   00000064   0x....             LDR.N    R0,??DataTable11_42
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0x....             LDR.N    R1,??DataTable11_31
   \   0000006A   0x6809             LDR      R1,[R1, #+0]
   \   0000006C   0xF831 0x0030      LDRH     R0,[R1, R0, LSL #+3]
   \   00000070   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   00000074   0x....             LDR.N    R1,??DataTable11_42
   \   00000076   0x6809             LDR      R1,[R1, #+0]
   \   00000078   0x....             LDR.N    R2,??DataTable11_31
   \   0000007A   0x6812             LDR      R2,[R2, #+0]
   \   0000007C   0xF822 0x0031      STRH     R0,[R2, R1, LSL #+3]
    444            ENET_RDAR = ENET_RDAR_RDAR_MASK;	
   \   00000080   0x....             LDR.N    R0,??DataTable11_37  ;; 0x400c0010
   \   00000082   0xF05F 0x7180      MOVS     R1,#+16777216
   \   00000086   0x6001             STR      R1,[R0, #+0]
    445            return 0;
   \   00000088   0x2000             MOVS     R0,#+0
   \                     ??LPLD_ENET_MacRecv_2:
   \   0000008A   0xBD02             POP      {R1,PC}          ;; return
    446          }
    447          
    448          
    449          /*
    450           * LPLD_ENET_HashAddress
    451           * 生成给定的MAC地址的哈希表
    452           * 
    453           * 参数:
    454           *    *addr--6字节地址指针。
    455           *
    456           * 输出:
    457           *    32位CRC校验的高6位
    458           */

   \                                 In section .text, align 2, keep-with-next
    459          uint8 LPLD_ENET_HashAddress(const uint8* addr)
    460          {
   \                     LPLD_ENET_HashAddress:
   \   00000000   0xB470             PUSH     {R4-R6}
    461            uint32 crc;
    462            uint8 byte;
    463            int i, j;
    464            
    465            crc = 0xFFFFFFFF;
   \   00000002   0xF05F 0x31FF      MOVS     R1,#-1
    466            for(i=0; i<6; ++i)
   \   00000006   0x2300             MOVS     R3,#+0
   \   00000008   0xE000             B.N      ??LPLD_ENET_HashAddress_0
   \                     ??LPLD_ENET_HashAddress_1:
   \   0000000A   0x1C5B             ADDS     R3,R3,#+1
   \                     ??LPLD_ENET_HashAddress_0:
   \   0000000C   0x2B06             CMP      R3,#+6
   \   0000000E   0xDA14             BGE.N    ??LPLD_ENET_HashAddress_2
    467            {
    468              byte = addr[i];
   \   00000010   0x5C1A             LDRB     R2,[R3, R0]
    469              for(j=0; j<8; ++j)
   \   00000012   0x2400             MOVS     R4,#+0
   \   00000014   0xE003             B.N      ??LPLD_ENET_HashAddress_3
    470              {
    471                if((byte & 0x01)^(crc & 0x01))
    472                {
    473                  crc >>= 1;
    474                  crc = crc ^ 0xEDB88320;
    475                }
    476                else
    477                  crc >>= 1;
   \                     ??LPLD_ENET_HashAddress_4:
   \   00000016   0x0849             LSRS     R1,R1,#+1
    478                byte >>= 1;
   \                     ??LPLD_ENET_HashAddress_5:
   \   00000018   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000001A   0x0852             LSRS     R2,R2,#+1
   \   0000001C   0x1C64             ADDS     R4,R4,#+1
   \                     ??LPLD_ENET_HashAddress_3:
   \   0000001E   0x2C08             CMP      R4,#+8
   \   00000020   0xDAF3             BGE.N    ??LPLD_ENET_HashAddress_1
   \   00000022   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000024   0xF012 0x0501      ANDS     R5,R2,#0x1
   \   00000028   0xF011 0x0601      ANDS     R6,R1,#0x1
   \   0000002C   0xEA96 0x0F05      TEQ      R6,R5
   \   00000030   0xD0F1             BEQ.N    ??LPLD_ENET_HashAddress_4
   \   00000032   0x0849             LSRS     R1,R1,#+1
   \   00000034   0x....             LDR.N    R5,??DataTable11_45  ;; 0xedb88320
   \   00000036   0x4069             EORS     R1,R5,R1
   \   00000038   0xE7EE             B.N      ??LPLD_ENET_HashAddress_5
    479              }
    480            }
    481            return (uint8)(crc >> 26);
   \                     ??LPLD_ENET_HashAddress_2:
   \   0000003A   0x0E88             LSRS     R0,R1,#+26
   \   0000003C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003E   0xBC70             POP      {R4-R6}
   \   00000040   0x4770             BX       LR               ;; return
    482          }
    483          
    484          
    485          /*
    486           * LPLD_ENET_SetAddress
    487           * 设置MAC物理地址
    488           * 
    489           * 参数:
    490           *    *pa--6字节的物理地址指针。
    491           *
    492           * 输出:
    493           *    无
    494           */

   \                                 In section .text, align 2, keep-with-next
    495          void LPLD_ENET_SetAddress(const uint8 *pa)
    496          {
   \                     LPLD_ENET_SetAddress:
   \   00000000   0xB580             PUSH     {R7,LR}
    497            uint8 crc;
    498            
    499            //设置物理地址
    500            ENET_PALR = (uint32)((pa[0]<<24) | (pa[1]<<16) | (pa[2]<<8) | pa[3]);
   \   00000002   0x7801             LDRB     R1,[R0, #+0]
   \   00000004   0x7842             LDRB     R2,[R0, #+1]
   \   00000006   0x0412             LSLS     R2,R2,#+16
   \   00000008   0xEA52 0x6101      ORRS     R1,R2,R1, LSL #+24
   \   0000000C   0x7882             LDRB     R2,[R0, #+2]
   \   0000000E   0xEA51 0x2102      ORRS     R1,R1,R2, LSL #+8
   \   00000012   0x78C2             LDRB     R2,[R0, #+3]
   \   00000014   0x4311             ORRS     R1,R2,R1
   \   00000016   0x....             LDR.N    R2,??DataTable11_46  ;; 0x400c00e4
   \   00000018   0x6011             STR      R1,[R2, #+0]
    501            ENET_PAUR = (uint32)((pa[4]<<24) | (pa[5]<<16));
   \   0000001A   0x7901             LDRB     R1,[R0, #+4]
   \   0000001C   0x7942             LDRB     R2,[R0, #+5]
   \   0000001E   0x0412             LSLS     R2,R2,#+16
   \   00000020   0xEA52 0x6101      ORRS     R1,R2,R1, LSL #+24
   \   00000024   0x....             LDR.N    R2,??DataTable11_47  ;; 0x400c00e8
   \   00000026   0x6011             STR      R1,[R2, #+0]
    502            
    503            //根据物理地址计算并设置独立地址哈希寄存器的值
    504            crc = LPLD_ENET_HashAddress(pa);
   \   00000028   0x.... 0x....      BL       LPLD_ENET_HashAddress
    505            if(crc >= 32)
   \   0000002C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002E   0x2820             CMP      R0,#+32
   \   00000030   0xD309             BCC.N    ??LPLD_ENET_SetAddress_0
    506              ENET_IAUR |= (uint32)(1 << (crc - 32));
   \   00000032   0x....             LDR.N    R1,??DataTable11_23  ;; 0x400c0118
   \   00000034   0x6809             LDR      R1,[R1, #+0]
   \   00000036   0x2201             MOVS     R2,#+1
   \   00000038   0x3820             SUBS     R0,R0,#+32
   \   0000003A   0xFA12 0xF000      LSLS     R0,R2,R0
   \   0000003E   0x4308             ORRS     R0,R0,R1
   \   00000040   0x....             LDR.N    R1,??DataTable11_23  ;; 0x400c0118
   \   00000042   0x6008             STR      R0,[R1, #+0]
   \   00000044   0xE007             B.N      ??LPLD_ENET_SetAddress_1
    507            else
    508              ENET_IALR |= (uint32)(1 << crc);
   \                     ??LPLD_ENET_SetAddress_0:
   \   00000046   0x....             LDR.N    R1,??DataTable11_22  ;; 0x400c011c
   \   00000048   0x6809             LDR      R1,[R1, #+0]
   \   0000004A   0x2201             MOVS     R2,#+1
   \   0000004C   0xFA12 0xF000      LSLS     R0,R2,R0
   \   00000050   0x4308             ORRS     R0,R0,R1
   \   00000052   0x....             LDR.N    R1,??DataTable11_22  ;; 0x400c011c
   \   00000054   0x6008             STR      R0,[R1, #+0]
    509          }
   \                     ??LPLD_ENET_SetAddress_1:
   \   00000056   0xBD01             POP      {R0,PC}          ;; return
    510          
    511          
    512          
    513          /*******************************************************************
    514           *
    515           *                PHY设备MII接口函数
    516           *
    517          *******************************************************************/
    518          
    519          /*
    520           * LPLD_ENET_MiiInit
    521           * 设置ENET模块的MII接口时钟，期望频率为2.5MHz
    522           * MII_SPEED = 系统时钟 / (2.5MHz * 2)
    523           * 
    524           * 参数:
    525           *    sys_clk_mhz--系统主频
    526           *
    527           * 输出:
    528           *    无
    529           */

   \                                 In section .text, align 2, keep-with-next
    530          void LPLD_ENET_MiiInit(int sys_clk_mhz)
    531          {
    532            ENET_MSCR = 0 | ENET_MSCR_MII_SPEED((2*sys_clk_mhz/5)+1);
   \                     LPLD_ENET_MiiInit:
   \   00000000   0x0040             LSLS     R0,R0,#+1
   \   00000002   0x2105             MOVS     R1,#+5
   \   00000004   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000008   0x1C40             ADDS     R0,R0,#+1
   \   0000000A   0x0040             LSLS     R0,R0,#+1
   \   0000000C   0xF010 0x007E      ANDS     R0,R0,#0x7E
   \   00000010   0x....             LDR.N    R1,??DataTable11_48  ;; 0x400c0044
   \   00000012   0x6008             STR      R0,[R1, #+0]
    533          }
   \   00000014   0x4770             BX       LR               ;; return
    534          
    535          
    536          /*
    537           * LPLD_ENET_MiiWrite
    538           * MII接口写
    539           * 
    540           * 参数:
    541           *    phy_addr--物理收发器地址
    542           *    reg_addr--寄存器地址
    543           *    data--写入的数据
    544           *
    545           * 输出:
    546           *    1--写超时
    547           *    0--写入成功
    548           */

   \                                 In section .text, align 2, keep-with-next
    549          uint8 LPLD_ENET_MiiWrite(uint16 phy_addr, uint16 reg_addr, uint16 data)
    550          {
   \                     LPLD_ENET_MiiWrite:
   \   00000000   0xB410             PUSH     {R4}
    551            uint32 timeout;
    552            
    553            //清除MII中断事件
    554            ENET_EIR = ENET_EIR_MII_MASK;
   \   00000002   0x....             LDR.N    R3,??DataTable11_34  ;; 0x400c0004
   \   00000004   0xF45F 0x0400      MOVS     R4,#+8388608
   \   00000008   0x601C             STR      R4,[R3, #+0]
    555            
    556            //初始化MII管理帧寄存器
    557            ENET_MMFR = 0
    558                      | ENET_MMFR_ST(0x01)
    559                      | ENET_MMFR_OP(0x01)
    560                      | ENET_MMFR_PA(phy_addr)
    561                      | ENET_MMFR_RA(reg_addr)
    562                      | ENET_MMFR_TA(0x02)
    563                      | ENET_MMFR_DATA(data);
   \   0000000A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000C   0x05C0             LSLS     R0,R0,#+23
   \   0000000E   0xF010 0x6078      ANDS     R0,R0,#0xF800000
   \   00000012   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000014   0x0489             LSLS     R1,R1,#+18
   \   00000016   0xF411 0x01F8      ANDS     R1,R1,#0x7C0000
   \   0000001A   0x4308             ORRS     R0,R1,R0
   \   0000001C   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000001E   0x4310             ORRS     R0,R2,R0
   \   00000020   0x....             LDR.N    R1,??DataTable11_49  ;; 0x50020000
   \   00000022   0x4308             ORRS     R0,R1,R0
   \   00000024   0x....             LDR.N    R1,??DataTable11_50  ;; 0x400c0040
   \   00000026   0x6008             STR      R0,[R1, #+0]
    564            
    565            //等待MII传输完成中断事件
    566            for (timeout = 0; timeout < MII_TIMEOUT; timeout++)
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0xE000             B.N      ??LPLD_ENET_MiiWrite_0
   \                     ??LPLD_ENET_MiiWrite_1:
   \   0000002C   0x1C40             ADDS     R0,R0,#+1
   \                     ??LPLD_ENET_MiiWrite_0:
   \   0000002E   0x....             LDR.N    R1,??DataTable11_51  ;; 0x1ffff
   \   00000030   0x4288             CMP      R0,R1
   \   00000032   0xD203             BCS.N    ??LPLD_ENET_MiiWrite_2
    567            {
    568              if (ENET_EIR & ENET_EIR_MII_MASK)
   \   00000034   0x....             LDR.N    R1,??DataTable11_34  ;; 0x400c0004
   \   00000036   0x6809             LDR      R1,[R1, #+0]
   \   00000038   0x0209             LSLS     R1,R1,#+8
   \   0000003A   0xD5F7             BPL.N    ??LPLD_ENET_MiiWrite_1
    569                break;
    570            }
    571            
    572            if(timeout == MII_TIMEOUT) 
   \                     ??LPLD_ENET_MiiWrite_2:
   \   0000003C   0x....             LDR.N    R1,??DataTable11_51  ;; 0x1ffff
   \   0000003E   0x4288             CMP      R0,R1
   \   00000040   0xD101             BNE.N    ??LPLD_ENET_MiiWrite_3
    573              return 1;
   \   00000042   0x2001             MOVS     R0,#+1
   \   00000044   0xE004             B.N      ??LPLD_ENET_MiiWrite_4
    574            
    575            //清除MII中断事件
    576            ENET_EIR = ENET_EIR_MII_MASK;
   \                     ??LPLD_ENET_MiiWrite_3:
   \   00000046   0x....             LDR.N    R0,??DataTable11_34  ;; 0x400c0004
   \   00000048   0xF45F 0x0100      MOVS     R1,#+8388608
   \   0000004C   0x6001             STR      R1,[R0, #+0]
    577            
    578            return 0;
   \   0000004E   0x2000             MOVS     R0,#+0
   \                     ??LPLD_ENET_MiiWrite_4:
   \   00000050   0xBC10             POP      {R4}
   \   00000052   0x4770             BX       LR               ;; return
    579          }
    580          
    581          
    582          /*
    583           * LPLD_ENET_MiiRead
    584           * MII接口读
    585           * 
    586           * 参数:
    587           *    phy_addr--物理收发器地址
    588           *    reg_addr--寄存器地址
    589           *    *data--读出的数据地址指针
    590           *
    591           * 输出:
    592           *    1--读超时
    593           *    0--读取成功
    594           */

   \                                 In section .text, align 2, keep-with-next
    595          uint8 LPLD_ENET_MiiRead(uint16 phy_addr, uint16 reg_addr, uint16 *data)
    596          {
   \                     LPLD_ENET_MiiRead:
   \   00000000   0xB410             PUSH     {R4}
    597            uint32 timeout;
    598            
    599            //清除MII中断事件
    600            ENET_EIR = ENET_EIR_MII_MASK;
   \   00000002   0x....             LDR.N    R3,??DataTable11_34  ;; 0x400c0004
   \   00000004   0xF45F 0x0400      MOVS     R4,#+8388608
   \   00000008   0x601C             STR      R4,[R3, #+0]
    601            
    602            //初始化MII管理帧寄存器
    603            ENET_MMFR = 0
    604                      | ENET_MMFR_ST(0x01)
    605                      | ENET_MMFR_OP(0x2)
    606                      | ENET_MMFR_PA(phy_addr)
    607                      | ENET_MMFR_RA(reg_addr)
    608                      | ENET_MMFR_TA(0x02);
   \   0000000A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000C   0x05C0             LSLS     R0,R0,#+23
   \   0000000E   0xF010 0x6078      ANDS     R0,R0,#0xF800000
   \   00000012   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000014   0x0489             LSLS     R1,R1,#+18
   \   00000016   0xF411 0x01F8      ANDS     R1,R1,#0x7C0000
   \   0000001A   0x4308             ORRS     R0,R1,R0
   \   0000001C   0x....             LDR.N    R1,??DataTable11_52  ;; 0x60020000
   \   0000001E   0x4308             ORRS     R0,R1,R0
   \   00000020   0x....             LDR.N    R1,??DataTable11_50  ;; 0x400c0040
   \   00000022   0x6008             STR      R0,[R1, #+0]
    609            
    610            //等待MII传输完成中断事件
    611            for (timeout = 0; timeout < MII_TIMEOUT; timeout++)
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0xE000             B.N      ??LPLD_ENET_MiiRead_0
   \                     ??LPLD_ENET_MiiRead_1:
   \   00000028   0x1C40             ADDS     R0,R0,#+1
   \                     ??LPLD_ENET_MiiRead_0:
   \   0000002A   0x....             LDR.N    R1,??DataTable11_51  ;; 0x1ffff
   \   0000002C   0x4288             CMP      R0,R1
   \   0000002E   0xD203             BCS.N    ??LPLD_ENET_MiiRead_2
    612            {
    613              if (ENET_EIR & ENET_EIR_MII_MASK)
   \   00000030   0x....             LDR.N    R1,??DataTable11_34  ;; 0x400c0004
   \   00000032   0x6809             LDR      R1,[R1, #+0]
   \   00000034   0x0209             LSLS     R1,R1,#+8
   \   00000036   0xD5F7             BPL.N    ??LPLD_ENET_MiiRead_1
    614                break;
    615            }
    616            
    617            if(timeout == MII_TIMEOUT) 
   \                     ??LPLD_ENET_MiiRead_2:
   \   00000038   0x....             LDR.N    R1,??DataTable11_51  ;; 0x1ffff
   \   0000003A   0x4288             CMP      R0,R1
   \   0000003C   0xD101             BNE.N    ??LPLD_ENET_MiiRead_3
    618              return 1;
   \   0000003E   0x2001             MOVS     R0,#+1
   \   00000040   0xE007             B.N      ??LPLD_ENET_MiiRead_4
    619            
    620            //清除MII中断事件
    621            ENET_EIR = ENET_EIR_MII_MASK;
   \                     ??LPLD_ENET_MiiRead_3:
   \   00000042   0x....             LDR.N    R0,??DataTable11_34  ;; 0x400c0004
   \   00000044   0xF45F 0x0100      MOVS     R1,#+8388608
   \   00000048   0x6001             STR      R1,[R0, #+0]
    622            
    623            *data = ENET_MMFR & 0x0000FFFF;
   \   0000004A   0x....             LDR.N    R0,??DataTable11_50  ;; 0x400c0040
   \   0000004C   0x6800             LDR      R0,[R0, #+0]
   \   0000004E   0x8010             STRH     R0,[R2, #+0]
    624            
    625            return 0;
   \   00000050   0x2000             MOVS     R0,#+0
   \                     ??LPLD_ENET_MiiRead_4:
   \   00000052   0xBC10             POP      {R4}
   \   00000054   0x4770             BX       LR               ;; return
    626          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   0x4004802C         DC32     0x4004802c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_1:
   \   00000000   0x4000D000         DC32     0x4000d000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_2:
   \   00000000   0x400C0024         DC32     0x400c0024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_3:
   \   00000000   0x........         DC32     periph_clk_khz

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_4:
   \   00000000   0x4004A000         DC32     0x4004a000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_5:
   \   00000000   0x4004A004         DC32     0x4004a004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_6:
   \   00000000   0x40049038         DC32     0x40049038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_7:
   \   00000000   0x40049030         DC32     0x40049030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_8:
   \   00000000   0x40049034         DC32     0x40049034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_9:
   \   00000000   0x4004903C         DC32     0x4004903c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_10:
   \   00000000   0x40049040         DC32     0x40049040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_11:
   \   00000000   0x40049044         DC32     0x40049044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_12:
   \   00000000   0x........         DC32     `?<Constant "PHY_PHYIDR1=0x%X\\r\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_13:
   \   00000000   0x........         DC32     `?<Constant "PHY_PHYIDR2=0x%X\\r\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_14:
   \   00000000   0x........         DC32     `?<Constant "PHY_ANLPAR=0x%X\\r\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_15:
   \   00000000   0x........         DC32     `?<Constant "PHY_ANLPARNP=0x%X\\r\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_16:
   \   00000000   0x........         DC32     `?<Constant "PHY_PHYSTS=0x%X\\r\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_17:
   \   00000000   0x........         DC32     `?<Constant "PHY_MICR=0x%X\\r\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_18:
   \   00000000   0x........         DC32     `?<Constant "PHY_MISR=0x%X\\r\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_19:
   \   00000000   0x........         DC32     `?<Constant "PHY_BMCR=0x%X\\r\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_20:
   \   00000000   0x........         DC32     `?<Constant "PHY_BMSR=0x%X\\r\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_21:
   \   00000000   0x........         DC32     `?<Constant "PHY_STATUS=0x%X\\r\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_22:
   \   00000000   0x400C011C         DC32     0x400c011c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_23:
   \   00000000   0x400C0118         DC32     0x400c0118

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_24:
   \   00000000   0x400C0124         DC32     0x400c0124

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_25:
   \   00000000   0x400C0120         DC32     0x400c0120

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_26:
   \   00000000   0x400C0084         DC32     0x400c0084

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_27:
   \   00000000   0x05F04104         DC32     0x5f04104

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_28:
   \   00000000   0x400C00C4         DC32     0x400c00c4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_29:
   \   00000000   0x400C0188         DC32     0x400c0188

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_30:
   \   00000000   0x400C0180         DC32     0x400c0180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_31:
   \   00000000   0x........         DC32     xENETRxDescriptors

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_32:
   \   00000000   0x400C0184         DC32     0x400c0184

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_33:
   \   00000000   0x........         DC32     xENETTxDescriptors

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_34:
   \   00000000   0x400C0004         DC32     0x400c0004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_35:
   \   00000000   0x400C0008         DC32     0x400c0008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_36:
   \   00000000   0x6B780000         DC32     0x6b780000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_37:
   \   00000000   0x400C0010         DC32     0x400c0010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_38:
   \   00000000   0x........         DC32     ENET_ISR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_39:
   \   00000000   0x........         DC32     xENETTxDescriptors_unaligned

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_40:
   \   00000000   0x........         DC32     xENETRxDescriptors_unaligned

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_41:
   \   00000000   0x........         DC32     ucENETRxBuffers

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_42:
   \   00000000   0x........         DC32     uxNextRxBuffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_43:
   \   00000000   0x........         DC32     uxNextTxBuffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_44:
   \   00000000   0x400C0014         DC32     0x400c0014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_45:
   \   00000000   0xEDB88320         DC32     0xedb88320

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_46:
   \   00000000   0x400C00E4         DC32     0x400c00e4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_47:
   \   00000000   0x400C00E8         DC32     0x400c00e8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_48:
   \   00000000   0x400C0044         DC32     0x400c0044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_49:
   \   00000000   0x50020000         DC32     0x50020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_50:
   \   00000000   0x400C0040         DC32     0x400c0040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_51:
   \   00000000   0x0001FFFF         DC32     0x1ffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_52:
   \   00000000   0x60020000         DC32     0x60020000

   \                                 In section .rodata, align 4
   \                     `?<Constant "PHY_PHYIDR1=0x%X\\r\\n">`:
   \   00000000   0x50 0x48          DC8 "PHY_PHYIDR1=0x%X\015\012"
   \              0x59 0x5F    
   \              0x50 0x48    
   \              0x59 0x49    
   \              0x44 0x52    
   \              0x31 0x3D    
   \              0x30 0x78    
   \              0x25 0x58    
   \              0x0D 0x0A    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "PHY_PHYIDR2=0x%X\\r\\n">`:
   \   00000000   0x50 0x48          DC8 "PHY_PHYIDR2=0x%X\015\012"
   \              0x59 0x5F    
   \              0x50 0x48    
   \              0x59 0x49    
   \              0x44 0x52    
   \              0x32 0x3D    
   \              0x30 0x78    
   \              0x25 0x58    
   \              0x0D 0x0A    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "PHY_ANLPAR=0x%X\\r\\n">`:
   \   00000000   0x50 0x48          DC8 "PHY_ANLPAR=0x%X\015\012"
   \              0x59 0x5F    
   \              0x41 0x4E    
   \              0x4C 0x50    
   \              0x41 0x52    
   \              0x3D 0x30    
   \              0x78 0x25    
   \              0x58 0x0D    
   \              0x0A 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "PHY_ANLPARNP=0x%X\\r\\n">`:
   \   00000000   0x50 0x48          DC8 "PHY_ANLPARNP=0x%X\015\012"
   \              0x59 0x5F    
   \              0x41 0x4E    
   \              0x4C 0x50    
   \              0x41 0x52    
   \              0x4E 0x50    
   \              0x3D 0x30    
   \              0x78 0x25    
   \              0x58 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "PHY_PHYSTS=0x%X\\r\\n">`:
   \   00000000   0x50 0x48          DC8 "PHY_PHYSTS=0x%X\015\012"
   \              0x59 0x5F    
   \              0x50 0x48    
   \              0x59 0x53    
   \              0x54 0x53    
   \              0x3D 0x30    
   \              0x78 0x25    
   \              0x58 0x0D    
   \              0x0A 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "PHY_MICR=0x%X\\r\\n">`:
   \   00000000   0x50 0x48          DC8 "PHY_MICR=0x%X\015\012"
   \              0x59 0x5F    
   \              0x4D 0x49    
   \              0x43 0x52    
   \              0x3D 0x30    
   \              0x78 0x25    
   \              0x58 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "PHY_MISR=0x%X\\r\\n">`:
   \   00000000   0x50 0x48          DC8 "PHY_MISR=0x%X\015\012"
   \              0x59 0x5F    
   \              0x4D 0x49    
   \              0x53 0x52    
   \              0x3D 0x30    
   \              0x78 0x25    
   \              0x58 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "PHY_BMCR=0x%X\\r\\n">`:
   \   00000000   0x50 0x48          DC8 "PHY_BMCR=0x%X\015\012"
   \              0x59 0x5F    
   \              0x42 0x4D    
   \              0x43 0x52    
   \              0x3D 0x30    
   \              0x78 0x25    
   \              0x58 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "PHY_BMSR=0x%X\\r\\n">`:
   \   00000000   0x50 0x48          DC8 "PHY_BMSR=0x%X\015\012"
   \              0x59 0x5F    
   \              0x42 0x4D    
   \              0x53 0x52    
   \              0x3D 0x30    
   \              0x78 0x25    
   \              0x58 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "PHY_STATUS=0x%X\\r\\n">`:
   \   00000000   0x50 0x48          DC8 "PHY_STATUS=0x%X\015\012"
   \              0x59 0x5F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3D 0x30    
   \              0x78 0x25    
   \              0x58 0x0D    
   \              0x0A 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  LPLD_ENET_BDInit
        0  LPLD_ENET_Delay
       12  LPLD_ENET_HashAddress
       16  LPLD_ENET_Init
             16 -> LPLD_ENET_BDInit
             16 -> LPLD_ENET_Delay
             16 -> LPLD_ENET_MiiInit
             16 -> LPLD_ENET_MiiRead
             16 -> LPLD_ENET_MiiWrite
             16 -> LPLD_ENET_SetAddress
             16 -> enable_irq
             16 -> printf
             16 -> set_irq_priority
        8  LPLD_ENET_MacRecv
              8 -> memcpy
        0  LPLD_ENET_MacSend
        0  LPLD_ENET_MiiInit
        4  LPLD_ENET_MiiRead
        4  LPLD_ENET_MiiWrite
        8  LPLD_ENET_RXF_Isr
              8 -- Indirect call
        8  LPLD_ENET_SetAddress
              8 -> LPLD_ENET_HashAddress
        0  LPLD_ENET_SetIsr
        8  LPLD_ENET_TXF_Isr
              8 -- Indirect call


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      20  ?<Constant "PHY_ANLPAR=0x%X\r\n">
      20  ?<Constant "PHY_ANLPARNP=0x%X\r\n">
      16  ?<Constant "PHY_BMCR=0x%X\r\n">
      16  ?<Constant "PHY_BMSR=0x%X\r\n">
      16  ?<Constant "PHY_MICR=0x%X\r\n">
      16  ?<Constant "PHY_MISR=0x%X\r\n">
      20  ?<Constant "PHY_PHYIDR1=0x%X\r\n">
      20  ?<Constant "PHY_PHYIDR2=0x%X\r\n">
      20  ?<Constant "PHY_PHYSTS=0x%X\r\n">
      20  ?<Constant "PHY_STATUS=0x%X\r\n">
       4  ??DataTable11
       4  ??DataTable11_1
       4  ??DataTable11_10
       4  ??DataTable11_11
       4  ??DataTable11_12
       4  ??DataTable11_13
       4  ??DataTable11_14
       4  ??DataTable11_15
       4  ??DataTable11_16
       4  ??DataTable11_17
       4  ??DataTable11_18
       4  ??DataTable11_19
       4  ??DataTable11_2
       4  ??DataTable11_20
       4  ??DataTable11_21
       4  ??DataTable11_22
       4  ??DataTable11_23
       4  ??DataTable11_24
       4  ??DataTable11_25
       4  ??DataTable11_26
       4  ??DataTable11_27
       4  ??DataTable11_28
       4  ??DataTable11_29
       4  ??DataTable11_3
       4  ??DataTable11_30
       4  ??DataTable11_31
       4  ??DataTable11_32
       4  ??DataTable11_33
       4  ??DataTable11_34
       4  ??DataTable11_35
       4  ??DataTable11_36
       4  ??DataTable11_37
       4  ??DataTable11_38
       4  ??DataTable11_39
       4  ??DataTable11_4
       4  ??DataTable11_40
       4  ??DataTable11_41
       4  ??DataTable11_42
       4  ??DataTable11_43
       4  ??DataTable11_44
       4  ??DataTable11_45
       4  ??DataTable11_46
       4  ??DataTable11_47
       4  ??DataTable11_48
       4  ??DataTable11_49
       4  ??DataTable11_5
       4  ??DataTable11_50
       4  ??DataTable11_51
       4  ??DataTable11_52
       4  ??DataTable11_6
       4  ??DataTable11_7
       4  ??DataTable11_8
       4  ??DataTable11_9
      16  ENET_ISR
     204  LPLD_ENET_BDInit
      32  LPLD_ENET_Delay
      66  LPLD_ENET_HashAddress
     716  LPLD_ENET_Init
     140  LPLD_ENET_MacRecv
      96  LPLD_ENET_MacSend
      22  LPLD_ENET_MiiInit
      86  LPLD_ENET_MiiRead
      84  LPLD_ENET_MiiWrite
      38  LPLD_ENET_RXF_Isr
      88  LPLD_ENET_SetAddress
      24  LPLD_ENET_SetIsr
      38  LPLD_ENET_TXF_Isr
    2064  ucENETRxBuffers
       4  uxNextRxBuffer
       4  uxNextTxBuffer
       4  xENETRxDescriptors
      80  xENETRxDescriptors_unaligned
       4  xENETTxDescriptors
      24  xENETTxDescriptors_unaligned

 
 2 200 bytes in section .bss
   184 bytes in section .rodata
 1 846 bytes in section .text
 
 1 846 bytes of CODE  memory
   184 bytes of CONST memory
 2 200 bytes of DATA  memory

Errors: none
Warnings: none
